
getOrCreateBody(dataClazz) ::= <<
      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.get<dataClazz>s().get(this.getId());
      if (obj != null) {
         return (<dataClazz>) obj;
      }
      <dataClazz> newObj = new <dataClazz>().setId(this.getId());
      sme.get<dataClazz>s().put(this.getId(), newObj);
      return newObj;

>>

editorGetOrCreateBody(dataClazz) ::= <<
      <dataClazz> oldObject = this.get<dataClazz>s().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      <dataClazz> newObject = new <dataClazz>();
      newObject.setId(id);
      this.get<dataClazz>s().put(id, newObject);
      return newObject;

>>

preCheck(dataClazz) ::= <<
      RemoveCommand oldRemove = editor.getRemoveCommands().get("<dataClazz>-" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get("<dataClazz>-" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put("<dataClazz>-" + this.getId(), this);
      return true;

>>


run(dataClazz, attributes) ::= <<
      if ( ! preCheck(editor)) {
         return editor.get<dataClazz>s().get(this.getId());
      }
      <dataClazz> dataObject = editor.getOrCreate<dataClazz>(this.getId());
      <attributes>
      return dataObject;

>>

runHaveLink(sourceClassName, linkName, targetClassName) ::= <<
      java.util.Objects.requireNonNull(this.getTime());
      this.setId("" + this.getSource() + "-<linkName>-" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      <sourceClassName> sourceObject = editor.getOrCreate<sourceClassName>(this.getSource());
      <targetClassName> targetObject = editor.getOrCreate<targetClassName>(this.getTarget());
      sourceObject.with<linkName>(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;

>>


runRemoveLink(sourceClassName, linkName, targetClassName) ::= <<
      java.util.Objects.requireNonNull(this.getTime());
      this.setId("" + this.getSource() + "-<linkName>-" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      <sourceClassName> sourceObject = editor.getOrCreate<sourceClassName>(this.getSource());
      <targetClassName> targetObject = editor.getOrCreate<targetClassName>(this.getTarget());
      sourceObject.without<linkName>(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;

>>



removeCommandRun() ::= <<
      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + "-" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + "s");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod("removeYou", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + "-" + this.getId(), this);

      return null;

>>


loadYaml(packageName) ::= <<
      java.util.Map map = Yaml.forPackage("<packageName>").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }

>>


serviceInit(serviceName) ::= <<
      myPort = 4571;
      String envPort = System.getenv("PORT");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new <serviceName>Editor();

>>

