
getOrCreateBody(dataClazz) ::= <<
      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.get<dataClazz>s().get(this.getId());
      if (obj != null) {
         return (<dataClazz>) obj;
      }
      <dataClazz> newObj = new <dataClazz>().setId(this.getId());
      sme.get<dataClazz>s().put(this.getId(), newObj);
      return newObj;

>>


editorGetFrameBody() ::= <<
      try {
         Object modelObject = mapOfModelObjects.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = mapOfFrames.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = (Object) clazz.getConstructor().newInstance();
         Method setIdMethod = clazz.getMethod("setId", String.class);
         setIdMethod.invoke(modelObject, id);
         mapOfFrames.put(id, modelObject);

         return modelObject;
      }
      catch (Exception e) {
         throw new RuntimeException(e);
      }

>>


editorGetOrCreateBody() ::= <<
      Object modelObject = mapOfModelObjects.get(id);
      if (modelObject != null) {
         return modelObject;
      }

      modelObject = getObjectFrame(clazz, id);

      mapOfFrames.remove(id);
      mapOfModelObjects.put(id, modelObject);

      return modelObject;

>>


editorRemoveModelObject() ::= <<
      Object oldObject = mapOfModelObjects.remove(id);

      if (oldObject != null) {
         mapOfFrames.put(id, oldObject);
      }

      return mapOfFrames.get(id);

>>


editorFireCommandExecuted() ::= <<
      String commandName = command.getClass().getSimpleName();
      ArrayList\<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList\<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }

>>

editorAddCommandListener() ::= <<
      ArrayList\<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList\<>());
      listeners.add(stream);
      return this;

>>

editorExecute() ::= <<
      String id = command.getId();
      if (id == null) {
         id = "obj" + activeCommands.size();
         command.setId(id);
      }

      String time = command.getTime();
      if (time == null) {
         time = getTime();
         command.setTime(time);
      }

      ModelCommand oldCommand = activeCommands.get(id);

      if (oldCommand != null && oldCommand.getTime().compareTo(time) >= 0) {
         // already updated
         return;
      }

      if (oldCommand != null && oldCommand instanceof RemoveCommand) {
         // object is dead, do not recreate
         return;
      }

      command.run(this);

      activeCommands.put(id, command);

>>

preCheck(dataClazz) ::= <<
      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get("<dataClazz>-" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get("<dataClazz>-" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put("<dataClazz>-" + this.getId(), this);
      return true;

>>


run(dataClazz, attributes) ::= <<
      if ( ! preCheck(editor)) {
         return editor.get<dataClazz>s().get(this.getId());
      }
      <dataClazz> dataObject = editor.getOrCreate<dataClazz>(this.getId());
      <attributes>
      editor.fireCommandExecuted(this);
      return dataObject;

>>

runHaveLink(sourceClassName, linkName, targetClassName) ::= <<
      java.util.Objects.requireNonNull(this.getTime());
      this.setId("" + this.getSource() + "-<linkName>-" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      <sourceClassName> sourceObject = editor.getOrCreate<sourceClassName>(this.getSource());
      <targetClassName> targetObject = editor.getOrCreate<targetClassName>(this.getTarget());
      sourceObject.with<linkName>(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;

>>


runRemoveLink(sourceClassName, linkName, targetClassName) ::= <<
      java.util.Objects.requireNonNull(this.getTime());
      this.setId("" + this.getSource() + "-<linkName>-" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      <sourceClassName> sourceObject = editor.getOrCreate<sourceClassName>(this.getSource());
      <targetClassName> targetObject = editor.getOrCreate<targetClassName>(this.getTarget());
      sourceObject.without<linkName>(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;

>>


modelCommandRun() ::= <<
      Pattern pattern = havePattern();

      if (pattern == null) {
         return null;
      }

      // have handle objects
      for (PatternObject patternObject : pattern.getObjects()) {
         String handleObjectId = (String) getHandleObjectAttributeValue(patternObject, "id");
         Class handleObjectClass = patternObject.getHandleObjectClass();
         Object handleObject = null;
         if (patternObject.getKind() == "core") {
            handleObject = editor.getOrCreate(handleObjectClass, handleObjectId);
         }
         else {
            handleObject = editor.getObjectFrame(handleObjectClass, handleObjectId);
         }
         patternObject.setHandleObject(handleObject);
      }


      for (PatternObject patternObject : pattern.getObjects()) {
         Reflector commandReflector = new Reflector().setClassName(this.getClass().getName());
         Reflector handleObjectReflector = new Reflector().setClassName(patternObject.getHandleObject().getClass().getName());

         for (PatternAttribute patternAttribute : patternObject.getAttributes()) {
            if ("id".equals(patternAttribute.getHandleAttrName())) {
               continue;
            }

            Object paramValue = commandReflector.getValue(this, patternAttribute.getCommandParamName());
            paramValue = paramValue.toString();
            handleObjectReflector.setValue(patternObject.getHandleObject(), patternAttribute.getHandleAttrName(), paramValue, null);
         }

         Object sourceHandleObject = patternObject.getHandleObject();
         for (PatternLink patternLink : patternObject.getLinks()) {
            String linkName = patternLink.getHandleLinkName();
            Object targetHandleObject = patternLink.getTarget().getHandleObject();
            handleObjectReflector.setValue(sourceHandleObject, linkName, targetHandleObject, null);
         }
      }
      return null;

>>


modelCommandUndo() ::= <<
      Pattern pattern = havePattern();

      if (pattern == null) {
         return;
      }

      for (PatternObject patternObject : pattern.getObjects()) {
         if (patternObject.getKind() == "core") {
            String handleObjectId = (String) getHandleObjectAttributeValue(patternObject, "id");
            Object oldObject = editor.removeModelObject(handleObjectId);
            Reflector handleObjectReflector = new Reflector().setClassName(oldObject.getClass().getName());
            handleObjectReflector.removeObject(oldObject);
         }
      }

>>


modelCommandGetHandleValue() ::= <<
      Reflector reflector = new Reflector().setClassName(this.getClass().getName());
      for (PatternAttribute patternAttribute : patternObject.getAttributes()) {
         if (patternAttribute.getHandleAttrName().equals(handleAttributeName)) {
            String commandParamName = patternAttribute.getCommandParamName();
            Object value = reflector.getValue(this, commandParamName);
            return value;
         }
      }
      return null;

>>


removeCommandRun() ::= <<
      java.util.Map\<String, Object> mapOfModelObjects = editor.getMapOfModelObjects();
      java.util.Map\<String, Object> mapOfFrames = editor.getMapOfFrames();

      Object oldObject = mapOfModelObjects.remove(getId());

      if (oldObject != null) {
         mapOfFrames.put(getId(), oldObject);
      }

      // call undo on old command
      ModelCommand oldCommand = editor.getActiveCommands().get(getId());
      oldCommand.undo(editor);

      return null;

>>


loadYaml(packageName) ::= <<
      java.util.Map map = Yaml.forPackage("<packageName>").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         execute(cmd);
      }

>>


serviceInit(serviceName, streamInit) ::= <<
      if (myPort \<= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv("PORT");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new <serviceName>Editor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get("/", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get("/<serviceName>", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post("/cmd", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post("/<serviceName>cmd", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post("/connect", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      <streamInit>
      spark.notFound((req, resp) -> {
         return "404 not found: " + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info("<serviceName> Service is listening on port " + myPort);

>>

serviceAddStream() ::= <<
      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;

>>

serviceConnect() ::= <<
      String body = req.body();
      LinkedHashMap\<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return "200";

>>

serviceConnectTo() ::= <<
      String incommingRoute = targetServiceName + "To" + sourceServiceName;
      String incommingURL = sourceUrl + "/" + incommingRoute;
      String outgoingRoute = sourceServiceName + "To" + targetServiceName;
      String outgoingURL = targetUrl + "/" + outgoingRoute;
      ArrayList\<String> sourceCommands = new ArrayList\<>();
      ArrayList\<String> targetCommands = new ArrayList\<>();

      ArrayList\<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if ("\<->".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(" ", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + "/connect");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod("POST");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }

>>


rootBody(serviceName) ::= <<
      try
      {
         <serviceName>App myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new <serviceName>App().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map\<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         stringWriter.write(
               "\<html>\n" +
                     "\<head>\n" +
                     "    \<meta charset=\"utf-8\">\n" +
                     "    \<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n" +
                     "\n" +
                     "    \<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n" +
                     "    \<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\">\</script>\n" +
                     "\</head>\n\n"
         );
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         stringWriter.write("\n\</html>\n");
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf("_cmd: words[0],");
         String sessionParam = String.format("_session: '%s', ", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf("'/cmd'");
         page.insert(cmdUrlPos + 2, "<serviceName>");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return "404 " + e.getMessage();
      }

>>

cmdBody(serviceName) ::= <<
      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString("_session");

      <serviceName>App app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return "404 could not find session " + currentSession;
      }

      String cmdClassName = jsonObject.getString("_cmd");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split("\\\\?");
         cmdClassName = split[0];
         jsonObject.put("_cmd", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split("\\\\&");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split("\\\\=");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString("_cmd");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, "_app", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith("_")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith("In")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod("run", <serviceName>Editor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return "404 " + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString("_newPage");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return "404 app has no method to compute page " + newPage+ "\\n" + e.getMessage();
      }

      return root(req, res);

>>

getTime() ::= <<
      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) \<= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;

>>

serviceGetStream() ::= <<
      for (CommandStream stream : this.getStreams()) {
         if (stream.getName().equals(streamName)) {
            return stream;
         }
      }
      CommandStream newStream = new CommandStream().setName(streamName);
      newStream.setService(this);
      withStreams(newStream);
      newStream.start();
      return newStream;

>>


CommandStreamPublish() ::= <<
      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();

>>

CommandStreamSend() ::= <<
      String yaml = Yaml.encode(activeCommands.values());
      for (String targetUrl : targetUrlList) {
         try {
            URL url = new URL(targetUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            DataOutputStream out = new DataOutputStream(con.getOutputStream());
            out.writeBytes(yaml);
            out.flush();

            InputStream inputStream = con.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            BufferedReader in = new BufferedReader(inputStreamReader);
            String inputLine;
            StringBuffer content = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
               content.append(inputLine);
            }
            in.close();
            out.close();
            con.disconnect();

            // got an answer, clear active commands
            activeCommands.clear();
            LinkedHashMap\<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
                  .decode(content.toString());
            executeCommands(map.values());

         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }

>>

CommandStreamExecuteCommands() ::= <<
      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }

>>

CommandStreamStart() ::= <<
      service.getSpark().post("/" + name, (req, res) -> handlePostRequest(req, res));
      return this;

>>

CommandStreamHandlePostRequest() ::= <<
      String body = req.body();
      LinkedHashMap\<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return "OK";

>>


AddStreamCommandRun() ::= <<
      CommandStream stream = editor.getService().getStream(incommingRoute);
      stream.getTargetUrlList().add(outgoingUrl);
      return null;

>>

CommandStreamAddCommandsToBeStreamed() ::= <<
      for (String cmd : commandList) {
         service.getModelEditor().addCommandListener(cmd, this);
      }

>>

