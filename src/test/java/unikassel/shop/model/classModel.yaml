- c1: 	ClassModel
  classes: 	modelCommand2 	storeModelEditor3 	product4 	haveProductCommand5 	customer6 	haveCustomerCommand7 	offer8 	haveOfferCommand9 	removeOffer10 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.shop.model
  packageSrcFolder: 	"src/test/java/unikassel/shop/model"

- modelCommand2: 	Clazz
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	haveProductCommand5 	haveCustomerCommand7 	haveOfferCommand9 	removeOffer10 	

- storeModelEditor3: 	Clazz
  methods: 	f11 	
  model: 	c1
  modified: 	false
  name: 	StoreModelEditor
  propertyStyle: 	POJO

- product4: 	Clazz
  attributes: 	id12 	description13 	
  model: 	c1
  modified: 	false
  name: 	Product
  propertyStyle: 	POJO
  roles: 	offers14 	

- haveProductCommand5: 	Clazz
  attributes: 	description15 	
  methods: 	f16 	f17 	f18 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- customer6: 	Clazz
  attributes: 	id19 	name20 	address21 	
  model: 	c1
  modified: 	false
  name: 	Customer
  propertyStyle: 	POJO

- haveCustomerCommand7: 	Clazz
  attributes: 	name22 	address23 	
  methods: 	f24 	f25 	f26 	f27 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- offer8: 	Clazz
  attributes: 	id28 	price29 	startTime30 	endTime31 	
  model: 	c1
  modified: 	false
  name: 	Offer
  propertyStyle: 	POJO
  roles: 	product32 	

- haveOfferCommand9: 	Clazz
  attributes: 	price33 	startTime34 	endTime35 	
  methods: 	f36 	f37 	f38 	f39 	f40 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- removeOffer10: 	Clazz
  model: 	c1
  modified: 	false
  name: 	RemoveOffer
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- f11: 	FMethod
  clazz: 	storeModelEditor3
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      YamlIdMap idMap;
      idMap = new YamlIdMap(\"unikassel.shop.model\");
      Object decode = idMap.decode(yamlString);
      Collection values = idMap.getObjIdMap().values();
      for (Object value : values) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- id12: 	Attribute
  clazz: 	product4
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description13: 	Attribute
  clazz: 	product4
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- offers14: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product4
  modified: 	false
  name: 	offers
  other: 	product32
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description15: 	Attribute
  clazz: 	haveProductCommand5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f16: 	FMethod
  clazz: 	haveProductCommand5
  declaration: 	"public Product getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getModel().get(\"Product-\" + this.getId());
      if (obj != null) {
         return (Product) obj;
      }
      Product newObj = new Product().setId(this.getId());
      sme.getModel().put(\"Product-\" + this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f17: 	FMethod
  clazz: 	haveProductCommand5
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Product-\" + this.getId());
      if (oldCommand == null || oldCommand.getTime().compareTo(this.getTime()) < 0) {
         editor.getActiveCommands().put(\"Product-\" + this.getId(), this);
         return true;
      }
      return false;
"
  modified: 	false

- f18: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand5
  declaration: 	"@Override
   public Product run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Product dataObject = this.getOrCreate(sme);
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- id19: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name20: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address21: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name22: 	Attribute
  clazz: 	haveCustomerCommand7
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address23: 	Attribute
  clazz: 	haveCustomerCommand7
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f24: 	FMethod
  clazz: 	haveCustomerCommand7
  declaration: 	"public Customer getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getModel().get(\"Customer-\" + this.getId());
      if (obj != null) {
         return (Customer) obj;
      }
      Customer newObj = new Customer().setId(this.getId());
      sme.getModel().put(\"Customer-\" + this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f25: 	FMethod
  clazz: 	haveCustomerCommand7
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Customer-\" + this.getId());
      if (oldCommand == null || oldCommand.getTime().compareTo(this.getTime()) < 0) {
         editor.getActiveCommands().put(\"Customer-\" + this.getId(), this);
         return true;
      }
      return false;
"
  modified: 	false

- f26: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand7
  declaration: 	"@Override
   public Customer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f27: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand7
  declaration: 	"@Override
   public Customer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id28: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price29: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime30: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime31: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product32: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	offer8
  modified: 	false
  name: 	product
  other: 	offers14
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price33: 	Attribute
  clazz: 	haveOfferCommand9
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime34: 	Attribute
  clazz: 	haveOfferCommand9
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime35: 	Attribute
  clazz: 	haveOfferCommand9
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f36: 	FMethod
  clazz: 	haveOfferCommand9
  declaration: 	"public Offer getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getModel().get(\"Offer-\" + this.getId());
      if (obj != null) {
         return (Offer) obj;
      }
      Offer newObj = new Offer().setId(this.getId());
      sme.getModel().put(\"Offer-\" + this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	haveOfferCommand9
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Offer-\" + this.getId());
      if (oldCommand == null || oldCommand.getTime().compareTo(this.getTime()) < 0) {
         editor.getActiveCommands().put(\"Offer-\" + this.getId(), this);
         return true;
      }
      return false;
"
  modified: 	false

- f38: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand9
  declaration: 	"@Override
   public Offer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f39: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand9
  declaration: 	"@Override
   public Offer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());

      return dataObject;
"
  modified: 	false

- f40: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand9
  declaration: 	"@Override
   public Offer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());

      return dataObject;
"
  modified: 	false

