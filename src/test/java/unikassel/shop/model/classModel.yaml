- c1: 	ClassModel
  classes: 	modelCommand2 	storeModelEditor3 	product4 	haveProductCommand5 	customer6 	haveCustomerCommand7 	offer8 	haveOfferCommand9 	removeCommand10 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.shop.model
  packageSrcFolder: 	"src/test/java/unikassel/shop/model"

- modelCommand2: 	Clazz
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	haveProductCommand5 	haveCustomerCommand7 	haveOfferCommand9 	removeCommand10 	

- storeModelEditor3: 	Clazz
  attributes: 	products11 	customers12 	offers13 	
  methods: 	f14 	
  model: 	c1
  modified: 	false
  name: 	StoreModelEditor
  propertyStyle: 	POJO

- product4: 	Clazz
  attributes: 	id15 	description16 	
  model: 	c1
  modified: 	false
  name: 	Product
  propertyStyle: 	POJO
  roles: 	offers17 	

- haveProductCommand5: 	Clazz
  attributes: 	description18 	
  methods: 	f19 	f20 	f21 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- customer6: 	Clazz
  attributes: 	id22 	name23 	address24 	
  model: 	c1
  modified: 	false
  name: 	Customer
  propertyStyle: 	POJO

- haveCustomerCommand7: 	Clazz
  attributes: 	name25 	address26 	
  methods: 	f27 	f28 	f29 	f30 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- offer8: 	Clazz
  attributes: 	id31 	price32 	startTime33 	endTime34 	
  model: 	c1
  modified: 	false
  name: 	Offer
  propertyStyle: 	POJO
  roles: 	product35 	

- haveOfferCommand9: 	Clazz
  attributes: 	price36 	startTime37 	endTime38 	
  methods: 	f39 	f40 	f41 	f42 	f43 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- removeCommand10: 	Clazz
  attributes: 	targetClassName44 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- products11: 	Attribute
  clazz: 	storeModelEditor3
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	products
  propertyStyle: 	POJO
  type: 	"Map<String, Product>"

- customers12: 	Attribute
  clazz: 	storeModelEditor3
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	customers
  propertyStyle: 	POJO
  type: 	"Map<String, Customer>"

- offers13: 	Attribute
  clazz: 	storeModelEditor3
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	offers
  propertyStyle: 	POJO
  type: 	"Map<String, Offer>"

- f14: 	FMethod
  clazz: 	storeModelEditor3
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      YamlIdMap idMap;
      idMap = new YamlIdMap(\"unikassel.shop.model\");
      Object decode = idMap.decode(yamlString);
      Collection values = idMap.getObjIdMap().values();
      for (Object value : values) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- id15: 	Attribute
  clazz: 	product4
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description16: 	Attribute
  clazz: 	product4
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- offers17: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product4
  modified: 	false
  name: 	offers
  other: 	product35
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description18: 	Attribute
  clazz: 	haveProductCommand5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f19: 	FMethod
  clazz: 	haveProductCommand5
  declaration: 	"public Product getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getProducts().get(this.getId());
      if (obj != null) {
         return (Product) obj;
      }
      Product newObj = new Product().setId(this.getId());
      sme.getProducts().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f20: 	FMethod
  clazz: 	haveProductCommand5
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Product-\" + this.getId());
      if (oldCommand != null) {
         if (oldCommand instanceof RemoveCommand) {
            return false;
         }
         if (oldCommand.getTime().compareTo(this.getTime()) >= 0) {
            return false;
         }
      }
      editor.getActiveCommands().put(\"Product-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f21: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand5
  declaration: 	"@Override
   public Product run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getProducts().get(this.getId());
      }
      Product dataObject = this.getOrCreate(sme);
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- id22: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name23: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address24: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name25: 	Attribute
  clazz: 	haveCustomerCommand7
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address26: 	Attribute
  clazz: 	haveCustomerCommand7
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f27: 	FMethod
  clazz: 	haveCustomerCommand7
  declaration: 	"public Customer getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getCustomers().get(this.getId());
      if (obj != null) {
         return (Customer) obj;
      }
      Customer newObj = new Customer().setId(this.getId());
      sme.getCustomers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f28: 	FMethod
  clazz: 	haveCustomerCommand7
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Customer-\" + this.getId());
      if (oldCommand != null) {
         if (oldCommand instanceof RemoveCommand) {
            return false;
         }
         if (oldCommand.getTime().compareTo(this.getTime()) >= 0) {
            return false;
         }
      }
      editor.getActiveCommands().put(\"Customer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f29: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand7
  declaration: 	"@Override
   public Customer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f30: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand7
  declaration: 	"@Override
   public Customer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id31: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price32: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime33: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime34: 	Attribute
  clazz: 	offer8
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product35: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	offer8
  modified: 	false
  name: 	product
  other: 	offers17
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price36: 	Attribute
  clazz: 	haveOfferCommand9
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime37: 	Attribute
  clazz: 	haveOfferCommand9
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime38: 	Attribute
  clazz: 	haveOfferCommand9
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f39: 	FMethod
  clazz: 	haveOfferCommand9
  declaration: 	"public Offer getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getOffers().get(this.getId());
      if (obj != null) {
         return (Offer) obj;
      }
      Offer newObj = new Offer().setId(this.getId());
      sme.getOffers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f40: 	FMethod
  clazz: 	haveOfferCommand9
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Offer-\" + this.getId());
      if (oldCommand != null) {
         if (oldCommand instanceof RemoveCommand) {
            return false;
         }
         if (oldCommand.getTime().compareTo(this.getTime()) >= 0) {
            return false;
         }
      }
      editor.getActiveCommands().put(\"Offer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f41: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand9
  declaration: 	"@Override
   public Offer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f42: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand9
  declaration: 	"@Override
   public Offer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());

      return dataObject;
"
  modified: 	false

- f43: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand9
  declaration: 	"@Override
   public Offer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());

      return dataObject;
"
  modified: 	false

- targetClassName44: 	Attribute
  clazz: 	removeCommand10
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

