- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	product5 	haveProductCommand6 	customer7 	haveCustomerCommand8 	offer9 	haveOfferCommand10 	order11 	haveOrderCommand12 	orderPosition13 	haveOrderPositionCommand14 	haveCustomerProductsLink15 	removeCustomerProductsLink16 	storeApp17 	page18 	line19 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.shop.model
  packageSrcFolder: 	"src/test/java/unikassel/shop/model"

- storeEditor2: 	Clazz
  attributes: 	activeCommands20 	removeCommands21 	products22 	customers23 	offers24 	orders25 	orderPositions26 	
  methods: 	f27 	f28 	f29 	f30 	f31 	f32 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id33 	time34 	
  methods: 	f35 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand6 	haveCustomerCommand8 	haveOfferCommand10 	haveOrderCommand12 	haveOrderPositionCommand14 	haveCustomerProductsLink15 	removeCustomerProductsLink16 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName36 	
  methods: 	f37 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- product5: 	Clazz
  attributes: 	id38 	description39 	
  model: 	c1
  modified: 	false
  name: 	Product
  propertyStyle: 	POJO
  roles: 	offers40 	customers41 	

- haveProductCommand6: 	Clazz
  attributes: 	description42 	
  methods: 	f43 	f44 	f45 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customer7: 	Clazz
  attributes: 	id46 	name47 	address48 	
  model: 	c1
  modified: 	false
  name: 	Customer
  propertyStyle: 	POJO
  roles: 	orders49 	products50 	

- haveCustomerCommand8: 	Clazz
  attributes: 	name51 	address52 	
  methods: 	f53 	f54 	f55 	f56 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- offer9: 	Clazz
  attributes: 	id57 	price58 	startTime59 	endTime60 	
  model: 	c1
  modified: 	false
  name: 	Offer
  propertyStyle: 	POJO
  roles: 	product61 	orders62 	

- haveOfferCommand10: 	Clazz
  attributes: 	price63 	product64 	startTime65 	endTime66 	
  methods: 	f67 	f68 	f69 	f70 	f71 	f72 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- order11: 	Clazz
  attributes: 	id73 	date74 	state75 	
  model: 	c1
  modified: 	false
  name: 	Order
  propertyStyle: 	POJO
  roles: 	customer76 	positions77 	

- haveOrderCommand12: 	Clazz
  attributes: 	customer78 	date79 	state80 	
  methods: 	f81 	f82 	f83 	f84 	f85 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderPosition13: 	Clazz
  attributes: 	id86 	amount87 	state88 	
  model: 	c1
  modified: 	false
  name: 	OrderPosition
  propertyStyle: 	POJO
  roles: 	order89 	offer90 	

- haveOrderPositionCommand14: 	Clazz
  attributes: 	order91 	offer92 	amount93 	state94 	
  methods: 	f95 	f96 	f97 	f98 	f99 	f100 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink15: 	Clazz
  attributes: 	source101 	target102 	
  methods: 	f103 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink16: 	Clazz
  attributes: 	source104 	target105 	
  methods: 	f106 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeApp17: 	Clazz
  attributes: 	id107 	description108 	
  model: 	c1
  modified: 	false
  name: 	StoreApp
  propertyStyle: 	POJO
  roles: 	content109 	

- page18: 	Clazz
  attributes: 	id110 	description111 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app112 	content113 	

- line19: 	Clazz
  attributes: 	id114 	description115 	action116 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page117 	

- activeCommands20: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands21: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- products22: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	products
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Product>"

- customers23: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	customers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Customer>"

- offers24: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	offers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Offer>"

- orders25: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	orders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Order>"

- orderPositions26: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	orderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, OrderPosition>"

- f27: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.shop.model\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f28: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Product getOrCreateProduct(String id)"
  methodBody: 	"      Product oldObject = this.getProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Product newObject = new Product();
      newObject.setId(id);
      this.getProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f29: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Customer getOrCreateCustomer(String id)"
  methodBody: 	"      Customer oldObject = this.getCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Customer newObject = new Customer();
      newObject.setId(id);
      this.getCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f30: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Offer getOrCreateOffer(String id)"
  methodBody: 	"      Offer oldObject = this.getOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Offer newObject = new Offer();
      newObject.setId(id);
      this.getOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Order getOrCreateOrder(String id)"
  methodBody: 	"      Order oldObject = this.getOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Order newObject = new Order();
      newObject.setId(id);
      this.getOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public OrderPosition getOrCreateOrderPosition(String id)"
  methodBody: 	"      OrderPosition oldObject = this.getOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      OrderPosition newObject = new OrderPosition();
      newObject.setId(id);
      this.getOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id33: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time34: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f35: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName36: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f37: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);

      return null;
"
  modified: 	false

- id38: 	Attribute
  clazz: 	product5
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description39: 	Attribute
  clazz: 	product5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- offers40: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product5
  modified: 	false
  name: 	offers
  other: 	product61
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers41: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product5
  modified: 	false
  name: 	customers
  other: 	products50
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description42: 	Attribute
  clazz: 	haveProductCommand6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f43: 	FMethod
  clazz: 	haveProductCommand6
  declaration: 	"public Product getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getProducts().get(this.getId());
      if (obj != null) {
         return (Product) obj;
      }
      Product newObj = new Product().setId(this.getId());
      sme.getProducts().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f44: 	FMethod
  clazz: 	haveProductCommand6
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Product-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Product-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Product-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f45: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand6
  declaration: 	"@Override
   public Product run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getProducts().get(this.getId());
      }
      Product dataObject = this.getOrCreate(editor);
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- id46: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name47: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address48: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders49: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	customer7
  modified: 	false
  name: 	orders
  other: 	customer76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products50: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	customer7
  modified: 	false
  name: 	products
  other: 	customers41
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name51: 	Attribute
  clazz: 	haveCustomerCommand8
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address52: 	Attribute
  clazz: 	haveCustomerCommand8
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f53: 	FMethod
  clazz: 	haveCustomerCommand8
  declaration: 	"public Customer getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getCustomers().get(this.getId());
      if (obj != null) {
         return (Customer) obj;
      }
      Customer newObj = new Customer().setId(this.getId());
      sme.getCustomers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f54: 	FMethod
  clazz: 	haveCustomerCommand8
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Customer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Customer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Customer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f55: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand8
  declaration: 	"@Override
   public Customer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(editor);
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f56: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand8
  declaration: 	"@Override
   public Customer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(editor);
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id57: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price58: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime59: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime60: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product61: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	offer9
  modified: 	false
  name: 	product
  other: 	offers40
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders62: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	offer9
  modified: 	false
  name: 	orders
  other: 	offer90
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price63: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product64: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime65: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime66: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f67: 	FMethod
  clazz: 	haveOfferCommand10
  declaration: 	"public Offer getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getOffers().get(this.getId());
      if (obj != null) {
         return (Offer) obj;
      }
      Offer newObj = new Offer().setId(this.getId());
      sme.getOffers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f68: 	FMethod
  clazz: 	haveOfferCommand10
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Offer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Offer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Offer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f69: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f70: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());
      Product product = editor.getOrCreateProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f71: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      Product product = editor.getOrCreateProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f72: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      Product product = editor.getOrCreateProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- id73: 	Attribute
  clazz: 	order11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date74: 	Attribute
  clazz: 	order11
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state75: 	Attribute
  clazz: 	order11
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer76: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	order11
  modified: 	false
  name: 	customer
  other: 	orders49
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions77: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	order11
  modified: 	false
  name: 	positions
  other: 	order89
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer78: 	Attribute
  clazz: 	haveOrderCommand12
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date79: 	Attribute
  clazz: 	haveOrderCommand12
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state80: 	Attribute
  clazz: 	haveOrderCommand12
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f81: 	FMethod
  clazz: 	haveOrderCommand12
  declaration: 	"public Order getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getOrders().get(this.getId());
      if (obj != null) {
         return (Order) obj;
      }
      Order newObj = new Order().setId(this.getId());
      sme.getOrders().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f82: 	FMethod
  clazz: 	haveOrderCommand12
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Order-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Order-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Order-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f83: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand12
  declaration: 	"@Override
   public Order run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrders().get(this.getId());
      }
      Order dataObject = this.getOrCreate(editor);
      Customer customer = editor.getOrCreateCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f84: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand12
  declaration: 	"@Override
   public Order run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrders().get(this.getId());
      }
      Order dataObject = this.getOrCreate(editor);
      dataObject.setDate(this.getDate());
      Customer customer = editor.getOrCreateCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f85: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand12
  declaration: 	"@Override
   public Order run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrders().get(this.getId());
      }
      Order dataObject = this.getOrCreate(editor);
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      Customer customer = editor.getOrCreateCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- id86: 	Attribute
  clazz: 	orderPosition13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount87: 	Attribute
  clazz: 	orderPosition13
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state88: 	Attribute
  clazz: 	orderPosition13
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order89: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	orderPosition13
  modified: 	false
  name: 	order
  other: 	positions77
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer90: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	orderPosition13
  modified: 	false
  name: 	offer
  other: 	orders62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order91: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer92: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount93: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state94: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f95: 	FMethod
  clazz: 	haveOrderPositionCommand14
  declaration: 	"public OrderPosition getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getOrderPositions().get(this.getId());
      if (obj != null) {
         return (OrderPosition) obj;
      }
      OrderPosition newObj = new OrderPosition().setId(this.getId());
      sme.getOrderPositions().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f96: 	FMethod
  clazz: 	haveOrderPositionCommand14
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"OrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"OrderPosition-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"OrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f97: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);

      return dataObject;
"
  modified: 	false

- f98: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);
      Offer offer = editor.getOrCreateOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f99: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      dataObject.setAmount(this.getAmount());
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);
      Offer offer = editor.getOrCreateOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);
      Offer offer = editor.getOrCreateOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- source101: 	Attribute
  clazz: 	haveCustomerProductsLink15
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target102: 	Attribute
  clazz: 	haveCustomerProductsLink15
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f103: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink15
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      Customer sourceObject = editor.getOrCreateCustomer(this.getSource());
      Product targetObject = editor.getOrCreateProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

- source104: 	Attribute
  clazz: 	removeCustomerProductsLink16
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target105: 	Attribute
  clazz: 	removeCustomerProductsLink16
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink16
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      Customer sourceObject = editor.getOrCreateCustomer(this.getSource());
      Product targetObject = editor.getOrCreateProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

- id107: 	Attribute
  clazz: 	storeApp17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description108: 	Attribute
  clazz: 	storeApp17
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- content109: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeApp17
  modified: 	false
  name: 	content
  other: 	app112
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id110: 	Attribute
  clazz: 	page18
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description111: 	Attribute
  clazz: 	page18
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app112: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page18
  modified: 	false
  name: 	app
  other: 	content109
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content113: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page18
  modified: 	false
  name: 	content
  other: 	page117
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id114: 	Attribute
  clazz: 	line19
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description115: 	Attribute
  clazz: 	line19
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action116: 	Attribute
  clazz: 	line19
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- page117: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line19
  modified: 	false
  name: 	page
  other: 	content113
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

