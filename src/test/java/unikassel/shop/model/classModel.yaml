- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	product5 	haveProductCommand6 	customer7 	haveCustomerCommand8 	offer9 	haveOfferCommand10 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.shop.model
  packageSrcFolder: 	"src/test/java/unikassel/shop/model"

- storeEditor2: 	Clazz
  attributes: 	activeCommands11 	removeCommands12 	products13 	customers14 	offers15 	
  methods: 	f16 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id17 	time18 	
  methods: 	f19 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand6 	haveCustomerCommand8 	haveOfferCommand10 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName20 	
  methods: 	f21 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- product5: 	Clazz
  attributes: 	id22 	description23 	
  model: 	c1
  modified: 	false
  name: 	Product
  propertyStyle: 	POJO
  roles: 	offers24 	

- haveProductCommand6: 	Clazz
  attributes: 	description25 	
  methods: 	f26 	f27 	f28 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customer7: 	Clazz
  attributes: 	id29 	name30 	address31 	
  model: 	c1
  modified: 	false
  name: 	Customer
  propertyStyle: 	POJO

- haveCustomerCommand8: 	Clazz
  attributes: 	name32 	address33 	
  methods: 	f34 	f35 	f36 	f37 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- offer9: 	Clazz
  attributes: 	id38 	price39 	startTime40 	endTime41 	
  model: 	c1
  modified: 	false
  name: 	Offer
  propertyStyle: 	POJO
  roles: 	product42 	

- haveOfferCommand10: 	Clazz
  attributes: 	price43 	startTime44 	endTime45 	product46 	
  methods: 	f47 	f48 	f49 	f50 	f51 	f52 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands11: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"Map<String, ModelCommand>"

- removeCommands12: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"Map<String, RemoveCommand>"

- products13: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	products
  propertyStyle: 	POJO
  type: 	"Map<String, Product>"

- customers14: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	customers
  propertyStyle: 	POJO
  type: 	"Map<String, Customer>"

- offers15: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	offers
  propertyStyle: 	POJO
  type: 	"Map<String, Offer>"

- f16: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      YamlIdMap idMap;
      idMap = new YamlIdMap(\"unikassel.shop.model\");
      Object decode = idMap.decode(yamlString);
      Collection values = idMap.getObjIdMap().values();
      for (Object value : values) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- id17: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time18: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f19: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName20: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f21: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      Map objects = (Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", (Class) null);
         removeYouMethod.invoke(target, (Object) null);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);

      return null;
"
  modified: 	false

- id22: 	Attribute
  clazz: 	product5
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description23: 	Attribute
  clazz: 	product5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- offers24: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product5
  modified: 	false
  name: 	offers
  other: 	product42
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description25: 	Attribute
  clazz: 	haveProductCommand6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f26: 	FMethod
  clazz: 	haveProductCommand6
  declaration: 	"public Product getOrCreate(StoreEditor sme)"
  methodBody: 	"      Object obj = sme.getProducts().get(this.getId());
      if (obj != null) {
         return (Product) obj;
      }
      Product newObj = new Product().setId(this.getId());
      sme.getProducts().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f27: 	FMethod
  clazz: 	haveProductCommand6
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Product-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Product-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Product-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f28: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand6
  declaration: 	"@Override
   public Product run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getProducts().get(this.getId());
      }
      Product dataObject = this.getOrCreate(sme);
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- id29: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name30: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address31: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name32: 	Attribute
  clazz: 	haveCustomerCommand8
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address33: 	Attribute
  clazz: 	haveCustomerCommand8
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f34: 	FMethod
  clazz: 	haveCustomerCommand8
  declaration: 	"public Customer getOrCreate(StoreEditor sme)"
  methodBody: 	"      Object obj = sme.getCustomers().get(this.getId());
      if (obj != null) {
         return (Customer) obj;
      }
      Customer newObj = new Customer().setId(this.getId());
      sme.getCustomers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	haveCustomerCommand8
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Customer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Customer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Customer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f36: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand8
  declaration: 	"@Override
   public Customer run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f37: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand8
  declaration: 	"@Override
   public Customer run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id38: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price39: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime40: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime41: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product42: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	offer9
  modified: 	false
  name: 	product
  other: 	offers24
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price43: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime44: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime45: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product46: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- f47: 	FMethod
  clazz: 	haveOfferCommand10
  declaration: 	"public Offer getOrCreate(StoreEditor sme)"
  methodBody: 	"      Object obj = sme.getOffers().get(this.getId());
      if (obj != null) {
         return (Offer) obj;
      }
      Offer newObj = new Offer().setId(this.getId());
      sme.getOffers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f48: 	FMethod
  clazz: 	haveOfferCommand10
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Offer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Offer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Offer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f49: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f50: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());

      return dataObject;
"
  modified: 	false

- f51: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());

      return dataObject;
"
  modified: 	false

- f52: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return sme.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(sme);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      Product product = new HaveProductCommand().setId(this.getProduct()).getOrCreate(sme);
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

