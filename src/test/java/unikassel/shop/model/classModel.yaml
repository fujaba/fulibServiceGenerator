- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	product5 	haveProductCommand6 	customer7 	haveCustomerCommand8 	offer9 	haveOfferCommand10 	order11 	haveOrderCommand12 	orderPosition13 	haveOrderPositionCommand14 	haveCustomerProductsLink15 	removeCustomerProductsLink16 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.shop.model
  packageSrcFolder: 	"src/test/java/unikassel/shop/model"

- storeEditor2: 	Clazz
  attributes: 	activeCommands17 	removeCommands18 	products19 	customers20 	offers21 	orders22 	orderPositions23 	
  methods: 	f24 	f25 	f26 	f27 	f28 	f29 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id30 	time31 	
  methods: 	f32 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand6 	haveCustomerCommand8 	haveOfferCommand10 	haveOrderCommand12 	haveOrderPositionCommand14 	haveCustomerProductsLink15 	removeCustomerProductsLink16 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName33 	
  methods: 	f34 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- product5: 	Clazz
  attributes: 	id35 	description36 	
  model: 	c1
  modified: 	false
  name: 	Product
  propertyStyle: 	POJO
  roles: 	offers37 	customers38 	

- haveProductCommand6: 	Clazz
  attributes: 	description39 	
  methods: 	f40 	f41 	f42 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customer7: 	Clazz
  attributes: 	id43 	name44 	address45 	
  model: 	c1
  modified: 	false
  name: 	Customer
  propertyStyle: 	POJO
  roles: 	orders46 	products47 	

- haveCustomerCommand8: 	Clazz
  attributes: 	name48 	address49 	
  methods: 	f50 	f51 	f52 	f53 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- offer9: 	Clazz
  attributes: 	id54 	price55 	startTime56 	endTime57 	
  model: 	c1
  modified: 	false
  name: 	Offer
  propertyStyle: 	POJO
  roles: 	product58 	orders59 	

- haveOfferCommand10: 	Clazz
  attributes: 	price60 	product61 	startTime62 	endTime63 	
  methods: 	f64 	f65 	f66 	f67 	f68 	f69 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- order11: 	Clazz
  attributes: 	id70 	date71 	state72 	
  model: 	c1
  modified: 	false
  name: 	Order
  propertyStyle: 	POJO
  roles: 	customer73 	positions74 	

- haveOrderCommand12: 	Clazz
  attributes: 	customer75 	date76 	state77 	
  methods: 	f78 	f79 	f80 	f81 	f82 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderPosition13: 	Clazz
  attributes: 	id83 	amount84 	state85 	
  model: 	c1
  modified: 	false
  name: 	OrderPosition
  propertyStyle: 	POJO
  roles: 	order86 	offer87 	

- haveOrderPositionCommand14: 	Clazz
  attributes: 	order88 	offer89 	amount90 	state91 	
  methods: 	f92 	f93 	f94 	f95 	f96 	f97 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink15: 	Clazz
  attributes: 	source98 	target99 	
  methods: 	f100 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink16: 	Clazz
  attributes: 	source101 	target102 	
  methods: 	f103 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands17: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"Map<String, ModelCommand>"

- removeCommands18: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"Map<String, RemoveCommand>"

- products19: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	products
  propertyStyle: 	POJO
  type: 	"Map<String, Product>"

- customers20: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	customers
  propertyStyle: 	POJO
  type: 	"Map<String, Customer>"

- offers21: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	offers
  propertyStyle: 	POJO
  type: 	"Map<String, Offer>"

- orders22: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	orders
  propertyStyle: 	POJO
  type: 	"Map<String, Order>"

- orderPositions23: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	orderPositions
  propertyStyle: 	POJO
  type: 	"Map<String, OrderPosition>"

- f24: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      YamlIdMap idMap;
      idMap = new YamlIdMap(\"unikassel.shop.model\");
      Object decode = idMap.decode(yamlString);
      Collection values = idMap.getObjIdMap().values();
      for (Object value : values) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f25: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Product getOrCreateProduct(String id)"
  methodBody: 	"      Product oldObject = this.getProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Product newObject = new Product();
      newObject.setId(id);
      this.getProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f26: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Customer getOrCreateCustomer(String id)"
  methodBody: 	"      Customer oldObject = this.getCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Customer newObject = new Customer();
      newObject.setId(id);
      this.getCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f27: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Offer getOrCreateOffer(String id)"
  methodBody: 	"      Offer oldObject = this.getOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Offer newObject = new Offer();
      newObject.setId(id);
      this.getOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f28: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public Order getOrCreateOrder(String id)"
  methodBody: 	"      Order oldObject = this.getOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      Order newObject = new Order();
      newObject.setId(id);
      this.getOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f29: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public OrderPosition getOrCreateOrderPosition(String id)"
  methodBody: 	"      OrderPosition oldObject = this.getOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      OrderPosition newObject = new OrderPosition();
      newObject.setId(id);
      this.getOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id30: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time31: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f32: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName33: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f34: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      Map objects = (Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);

      return null;
"
  modified: 	false

- id35: 	Attribute
  clazz: 	product5
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description36: 	Attribute
  clazz: 	product5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- offers37: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product5
  modified: 	false
  name: 	offers
  other: 	product58
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers38: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	product5
  modified: 	false
  name: 	customers
  other: 	products47
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description39: 	Attribute
  clazz: 	haveProductCommand6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f40: 	FMethod
  clazz: 	haveProductCommand6
  declaration: 	"public Product getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getProducts().get(this.getId());
      if (obj != null) {
         return (Product) obj;
      }
      Product newObj = new Product().setId(this.getId());
      sme.getProducts().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f41: 	FMethod
  clazz: 	haveProductCommand6
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Product-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Product-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Product-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f42: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand6
  declaration: 	"@Override
   public Product run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getProducts().get(this.getId());
      }
      Product dataObject = this.getOrCreate(editor);
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- id43: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name44: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address45: 	Attribute
  clazz: 	customer7
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders46: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	customer7
  modified: 	false
  name: 	orders
  other: 	customer73
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products47: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	customer7
  modified: 	false
  name: 	products
  other: 	customers38
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name48: 	Attribute
  clazz: 	haveCustomerCommand8
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address49: 	Attribute
  clazz: 	haveCustomerCommand8
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f50: 	FMethod
  clazz: 	haveCustomerCommand8
  declaration: 	"public Customer getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getCustomers().get(this.getId());
      if (obj != null) {
         return (Customer) obj;
      }
      Customer newObj = new Customer().setId(this.getId());
      sme.getCustomers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f51: 	FMethod
  clazz: 	haveCustomerCommand8
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Customer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Customer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Customer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f52: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand8
  declaration: 	"@Override
   public Customer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(editor);
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f53: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand8
  declaration: 	"@Override
   public Customer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getCustomers().get(this.getId());
      }
      Customer dataObject = this.getOrCreate(editor);
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id54: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price55: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime56: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime57: 	Attribute
  clazz: 	offer9
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product58: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	offer9
  modified: 	false
  name: 	product
  other: 	offers37
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders59: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	offer9
  modified: 	false
  name: 	orders
  other: 	offer87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price60: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product61: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime62: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime63: 	Attribute
  clazz: 	haveOfferCommand10
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f64: 	FMethod
  clazz: 	haveOfferCommand10
  declaration: 	"public Offer getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getOffers().get(this.getId());
      if (obj != null) {
         return (Offer) obj;
      }
      Offer newObj = new Offer().setId(this.getId());
      sme.getOffers().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f65: 	FMethod
  clazz: 	haveOfferCommand10
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Offer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Offer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Offer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f66: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f67: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());
      Product product = editor.getOrCreateProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f68: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      Product product = editor.getOrCreateProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f69: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand10
  declaration: 	"@Override
   public Offer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOffers().get(this.getId());
      }
      Offer dataObject = this.getOrCreate(editor);
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      Product product = editor.getOrCreateProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- id70: 	Attribute
  clazz: 	order11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date71: 	Attribute
  clazz: 	order11
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state72: 	Attribute
  clazz: 	order11
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer73: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	order11
  modified: 	false
  name: 	customer
  other: 	orders46
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions74: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	order11
  modified: 	false
  name: 	positions
  other: 	order86
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer75: 	Attribute
  clazz: 	haveOrderCommand12
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date76: 	Attribute
  clazz: 	haveOrderCommand12
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state77: 	Attribute
  clazz: 	haveOrderCommand12
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f78: 	FMethod
  clazz: 	haveOrderCommand12
  declaration: 	"public Order getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getOrders().get(this.getId());
      if (obj != null) {
         return (Order) obj;
      }
      Order newObj = new Order().setId(this.getId());
      sme.getOrders().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f79: 	FMethod
  clazz: 	haveOrderCommand12
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"Order-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"Order-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"Order-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f80: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand12
  declaration: 	"@Override
   public Order run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrders().get(this.getId());
      }
      Order dataObject = this.getOrCreate(editor);
      Customer customer = editor.getOrCreateCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f81: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand12
  declaration: 	"@Override
   public Order run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrders().get(this.getId());
      }
      Order dataObject = this.getOrCreate(editor);
      dataObject.setDate(this.getDate());
      Customer customer = editor.getOrCreateCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f82: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand12
  declaration: 	"@Override
   public Order run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrders().get(this.getId());
      }
      Order dataObject = this.getOrCreate(editor);
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      Customer customer = editor.getOrCreateCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- id83: 	Attribute
  clazz: 	orderPosition13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount84: 	Attribute
  clazz: 	orderPosition13
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state85: 	Attribute
  clazz: 	orderPosition13
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order86: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	orderPosition13
  modified: 	false
  name: 	order
  other: 	positions74
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	orderPosition13
  modified: 	false
  name: 	offer
  other: 	orders59
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order88: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer89: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount90: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state91: 	Attribute
  clazz: 	haveOrderPositionCommand14
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f92: 	FMethod
  clazz: 	haveOrderPositionCommand14
  declaration: 	"public OrderPosition getOrCreate(StoreEditor sme)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getId());
      Object obj = sme.getOrderPositions().get(this.getId());
      if (obj != null) {
         return (OrderPosition) obj;
      }
      OrderPosition newObj = new OrderPosition().setId(this.getId());
      sme.getOrderPositions().put(this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f93: 	FMethod
  clazz: 	haveOrderPositionCommand14
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"OrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"OrderPosition-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"OrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f94: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);

      return dataObject;
"
  modified: 	false

- f95: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);
      Offer offer = editor.getOrCreateOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f96: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      dataObject.setAmount(this.getAmount());
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);
      Offer offer = editor.getOrCreateOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f97: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand14
  declaration: 	"@Override
   public OrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getOrderPositions().get(this.getId());
      }
      OrderPosition dataObject = this.getOrCreate(editor);
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      Order order = editor.getOrCreateOrder(this.getOrder());
      dataObject.setOrder(order);
      Offer offer = editor.getOrCreateOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- source98: 	Attribute
  clazz: 	haveCustomerProductsLink15
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target99: 	Attribute
  clazz: 	haveCustomerProductsLink15
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink15
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      Customer sourceObject = editor.getOrCreateCustomer(this.getSource());
      Product targetObject = editor.getOrCreateProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

- source101: 	Attribute
  clazz: 	removeCustomerProductsLink16
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target102: 	Attribute
  clazz: 	removeCustomerProductsLink16
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f103: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink16
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      Customer sourceObject = editor.getOrCreateCustomer(this.getSource());
      Product targetObject = editor.getOrCreateProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

