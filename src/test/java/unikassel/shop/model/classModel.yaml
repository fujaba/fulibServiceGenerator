- c1: 	ClassModel
  classes: 	modelCommand2 	storeModelEditor3 	product4 	haveProductCommand5 	customer6 	haveCustomerCommand7 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.shop.model
  packageSrcFolder: 	"src/test/java/unikassel/shop/model"

- modelCommand2: 	Clazz
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	haveProductCommand5 	haveCustomerCommand7 	

- storeModelEditor3: 	Clazz
  model: 	c1
  modified: 	false
  name: 	StoreModelEditor
  propertyStyle: 	POJO

- product4: 	Clazz
  attributes: 	id8 	description9 	
  model: 	c1
  modified: 	false
  name: 	Product
  propertyStyle: 	POJO

- haveProductCommand5: 	Clazz
  attributes: 	description10 	
  methods: 	f11 	f12 	f13 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- customer6: 	Clazz
  attributes: 	id14 	name15 	address16 	
  model: 	c1
  modified: 	false
  name: 	Customer
  propertyStyle: 	POJO

- haveCustomerCommand7: 	Clazz
  attributes: 	name17 	address18 	
  methods: 	f19 	f20 	f21 	f22 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand2

- id8: 	Attribute
  clazz: 	product4
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description9: 	Attribute
  clazz: 	product4
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- description10: 	Attribute
  clazz: 	haveProductCommand5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f11: 	FMethod
  clazz: 	haveProductCommand5
  declaration: 	"public Product getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getModel().get(\"Product-\" + this.getId());
      if (obj != null) {
         return (Product) obj;
      }
      Product newObj = new Product().setId(this.getId());
      sme.getModel().put(\"Product-\" + this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f12: 	FMethod
  clazz: 	haveProductCommand5
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Product-\" + this.getId());
      if (oldCommand == null || oldCommand.getTime().compareTo(this.getTime()) < 0) {
         editor.getActiveCommands().put(\"Product-\" + this.getId(), this);
         return true;
      }
      return false;
"
  modified: 	false

- f13: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand5
  declaration: 	"@Override
   public Product run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Product dataObject = this.getOrCreate(sme);
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- id14: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name15: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address16: 	Attribute
  clazz: 	customer6
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name17: 	Attribute
  clazz: 	haveCustomerCommand7
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address18: 	Attribute
  clazz: 	haveCustomerCommand7
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f19: 	FMethod
  clazz: 	haveCustomerCommand7
  declaration: 	"public Customer getOrCreate(StoreModelEditor sme)"
  methodBody: 	"      Object obj = sme.getModel().get(\"Customer-\" + this.getId());
      if (obj != null) {
         return (Customer) obj;
      }
      Customer newObj = new Customer().setId(this.getId());
      sme.getModel().put(\"Customer-\" + this.getId(), newObj);
      return newObj;
"
  modified: 	false

- f20: 	FMethod
  clazz: 	haveCustomerCommand7
  declaration: 	"public boolean preCheck(StoreModelEditor editor)"
  methodBody: 	"      ModelCommand oldCommand = editor.getActiveCommands().get(\"Customer-\" + this.getId());
      if (oldCommand == null || oldCommand.getTime().compareTo(this.getTime()) < 0) {
         editor.getActiveCommands().put(\"Customer-\" + this.getId(), this);
         return true;
      }
      return false;
"
  modified: 	false

- f21: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand7
  declaration: 	"@Override
   public Customer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f22: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand7
  declaration: 	"@Override
   public Customer run(StoreModelEditor sme)"
  methodBody: 	"      if ( ! preCheck(sme)) {
         return null;
      }
      Customer dataObject = this.getOrCreate(sme);
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

