- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	storeService5 	storeApp6 	page7 	line8 	storeProduct9 	haveProductCommand10 	storeCustomer11 	haveCustomerCommand12 	storeOffer13 	haveOfferCommand14 	storeOrder15 	haveOrderCommand16 	storeOrderPosition17 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Store
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Store"

- storeEditor2: 	Clazz
  attributes: 	activeCommands21 	removeCommands22 	storeProducts23 	storeCustomers24 	storeOffers25 	storeOrders26 	storeOrderPositions27 	
  importList: 	null 	
  methods: 	f28 	f29 	f30 	f31 	f32 	f33 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id34 	time35 	
  methods: 	f36 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand10 	haveCustomerCommand12 	haveOfferCommand14 	haveOrderCommand16 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName37 	
  importList: 	null 	null 	null 	
  methods: 	f38 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeService5: 	Clazz
  attributes: 	myPort39 	modelEditor40 	reflectorMap41 	currentSession42 	executor43 	sessionToAppMap44 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f45 	f46 	f47 	f48 	
  model: 	c1
  modified: 	false
  name: 	StoreService
  propertyStyle: 	POJO

- storeApp6: 	Clazz
  attributes: 	modelEditor49 	id50 	description51 	
  methods: 	f52 	
  model: 	c1
  modified: 	false
  name: 	StoreApp
  propertyStyle: 	POJO
  roles: 	content53 	

- page7: 	Clazz
  attributes: 	id54 	description55 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app56 	content57 	

- line8: 	Clazz
  attributes: 	id58 	description59 	action60 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page61 	

- storeProduct9: 	Clazz
  attributes: 	id62 	description63 	items64 	
  model: 	c1
  modified: 	false
  name: 	StoreProduct
  propertyStyle: 	POJO
  roles: 	offers65 	customers66 	

- haveProductCommand10: 	Clazz
  attributes: 	description67 	items68 	
  methods: 	f69 	f70 	f71 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeCustomer11: 	Clazz
  attributes: 	id72 	name73 	address74 	
  model: 	c1
  modified: 	false
  name: 	StoreCustomer
  propertyStyle: 	POJO
  roles: 	orders75 	products76 	

- haveCustomerCommand12: 	Clazz
  attributes: 	name77 	address78 	
  methods: 	f79 	f80 	f81 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOffer13: 	Clazz
  attributes: 	id82 	price83 	startTime84 	endTime85 	
  model: 	c1
  modified: 	false
  name: 	StoreOffer
  propertyStyle: 	POJO
  roles: 	product86 	orders87 	

- haveOfferCommand14: 	Clazz
  attributes: 	price88 	product89 	startTime90 	endTime91 	
  methods: 	f92 	f93 	f94 	f95 	f96 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrder15: 	Clazz
  attributes: 	id97 	date98 	state99 	
  model: 	c1
  modified: 	false
  name: 	StoreOrder
  propertyStyle: 	POJO
  roles: 	customer100 	positions101 	

- haveOrderCommand16: 	Clazz
  attributes: 	customer102 	date103 	state104 	
  methods: 	f105 	f106 	f107 	f108 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrderPosition17: 	Clazz
  attributes: 	id109 	amount110 	state111 	
  model: 	c1
  modified: 	false
  name: 	StoreOrderPosition
  propertyStyle: 	POJO
  roles: 	order112 	offer113 	

- haveOrderPositionCommand18: 	Clazz
  attributes: 	order114 	offer115 	amount116 	state117 	
  methods: 	f118 	f119 	f120 	f121 	f122 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink19: 	Clazz
  attributes: 	source123 	target124 	
  methods: 	f125 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink20: 	Clazz
  attributes: 	source126 	target127 	
  methods: 	f128 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands21: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands22: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- storeProducts23: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreProduct>"

- storeCustomers24: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreCustomer>"

- storeOffers25: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOffer>"

- storeOrders26: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrder>"

- storeOrderPositions27: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrderPosition>"

- f28: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Store\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f29: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreProduct getOrCreateStoreProduct(String id)"
  methodBody: 	"      StoreProduct oldObject = this.getStoreProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreProduct newObject = new StoreProduct();
      newObject.setId(id);
      this.getStoreProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f30: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreCustomer getOrCreateStoreCustomer(String id)"
  methodBody: 	"      StoreCustomer oldObject = this.getStoreCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreCustomer newObject = new StoreCustomer();
      newObject.setId(id);
      this.getStoreCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOffer getOrCreateStoreOffer(String id)"
  methodBody: 	"      StoreOffer oldObject = this.getStoreOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOffer newObject = new StoreOffer();
      newObject.setId(id);
      this.getStoreOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrder getOrCreateStoreOrder(String id)"
  methodBody: 	"      StoreOrder oldObject = this.getStoreOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrder newObject = new StoreOrder();
      newObject.setId(id);
      this.getStoreOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f33: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrderPosition getOrCreateStoreOrderPosition(String id)"
  methodBody: 	"      StoreOrderPosition oldObject = this.getStoreOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrderPosition newObject = new StoreOrderPosition();
      newObject.setId(id);
      this.getStoreOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id34: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time35: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f36: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName37: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f38: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);

      return null;
"
  modified: 	false

- myPort39: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor40: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	StoreEditor

- reflectorMap41: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession42: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor43: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap44: 	Attribute
  clazz: 	storeService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, StoreApp>"

- f45: 	FMethod
  clazz: 	storeService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new StoreEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      port(myPort);
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Serice is listening on port \" + myPort);
"
  modified: 	false

- f46: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f47: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         StoreApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new StoreApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f48: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      StoreApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", StoreEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- modelEditor49: 	Attribute
  clazz: 	storeApp6
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	StoreEditor

- id50: 	Attribute
  clazz: 	storeApp6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description51: 	Attribute
  clazz: 	storeApp6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f52: 	FMethod
  clazz: 	storeApp6
  declaration: 	"public StoreApp init(StoreEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Store App\");
      return this;
"
  modified: 	false

- content53: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeApp6
  modified: 	false
  name: 	content
  other: 	app56
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id54: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description55: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app56: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page7
  modified: 	false
  name: 	app
  other: 	content53
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content57: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page7
  modified: 	false
  name: 	content
  other: 	page61
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id58: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description59: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action60: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- page61: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line8
  modified: 	false
  name: 	page
  other: 	content57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id62: 	Attribute
  clazz: 	storeProduct9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description63: 	Attribute
  clazz: 	storeProduct9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items64: 	Attribute
  clazz: 	storeProduct9
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers65: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct9
  modified: 	false
  name: 	offers
  other: 	product86
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers66: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct9
  modified: 	false
  name: 	customers
  other: 	products76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description67: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items68: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f69: 	FMethod
  clazz: 	haveProductCommand10
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f70: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- f71: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      return dataObject;
"
  modified: 	false

- id72: 	Attribute
  clazz: 	storeCustomer11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name73: 	Attribute
  clazz: 	storeCustomer11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address74: 	Attribute
  clazz: 	storeCustomer11
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders75: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer11
  modified: 	false
  name: 	orders
  other: 	customer100
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products76: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer11
  modified: 	false
  name: 	products
  other: 	customers66
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name77: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address78: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f79: 	FMethod
  clazz: 	haveCustomerCommand12
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f80: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f81: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id82: 	Attribute
  clazz: 	storeOffer13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price83: 	Attribute
  clazz: 	storeOffer13
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime84: 	Attribute
  clazz: 	storeOffer13
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime85: 	Attribute
  clazz: 	storeOffer13
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product86: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOffer13
  modified: 	false
  name: 	product
  other: 	offers65
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders87: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOffer13
  modified: 	false
  name: 	orders
  other: 	offer113
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price88: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product89: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime90: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime91: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f92: 	FMethod
  clazz: 	haveOfferCommand14
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f93: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f94: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f95: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f96: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- id97: 	Attribute
  clazz: 	storeOrder15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date98: 	Attribute
  clazz: 	storeOrder15
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state99: 	Attribute
  clazz: 	storeOrder15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer100: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrder15
  modified: 	false
  name: 	customer
  other: 	orders75
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions101: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOrder15
  modified: 	false
  name: 	positions
  other: 	order112
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer102: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date103: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state104: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f105: 	FMethod
  clazz: 	haveOrderCommand16
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f108: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- id109: 	Attribute
  clazz: 	storeOrderPosition17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount110: 	Attribute
  clazz: 	storeOrderPosition17
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state111: 	Attribute
  clazz: 	storeOrderPosition17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order112: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition17
  modified: 	false
  name: 	order
  other: 	positions101
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer113: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition17
  modified: 	false
  name: 	offer
  other: 	orders87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order114: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer115: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount116: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state117: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f118: 	FMethod
  clazz: 	haveOrderPositionCommand18
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f119: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);

      return dataObject;
"
  modified: 	false

- f120: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f121: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- source123: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target124: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f125: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink19
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

- source126: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target127: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f128: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink20
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

