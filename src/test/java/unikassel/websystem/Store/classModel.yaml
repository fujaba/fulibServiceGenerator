- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	storeApp5 	page6 	line7 	storeProduct8 	haveProductCommand9 	storeCustomer10 	haveCustomerCommand11 	storeOffer12 	haveOfferCommand13 	storeOrder14 	haveOrderCommand15 	storeOrderPosition16 	haveOrderPositionCommand17 	haveCustomerProductsLink18 	removeCustomerProductsLink19 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Store
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Store"

- storeEditor2: 	Clazz
  attributes: 	activeCommands20 	removeCommands21 	storeProducts22 	storeCustomers23 	storeOffers24 	storeOrders25 	storeOrderPositions26 	
  importList: 	null 	
  methods: 	f27 	f28 	f29 	f30 	f31 	f32 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id33 	time34 	
  methods: 	f35 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand9 	haveCustomerCommand11 	haveOfferCommand13 	haveOrderCommand15 	haveOrderPositionCommand17 	haveCustomerProductsLink18 	removeCustomerProductsLink19 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName36 	
  importList: 	null 	null 	null 	
  methods: 	f37 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeApp5: 	Clazz
  attributes: 	id38 	description39 	
  model: 	c1
  modified: 	false
  name: 	StoreApp
  propertyStyle: 	POJO
  roles: 	content40 	

- page6: 	Clazz
  attributes: 	id41 	description42 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app43 	content44 	

- line7: 	Clazz
  attributes: 	id45 	description46 	action47 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page48 	

- storeProduct8: 	Clazz
  attributes: 	id49 	description50 	items51 	
  model: 	c1
  modified: 	false
  name: 	StoreProduct
  propertyStyle: 	POJO
  roles: 	offers52 	customers53 	

- haveProductCommand9: 	Clazz
  attributes: 	description54 	items55 	
  methods: 	f56 	f57 	f58 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeCustomer10: 	Clazz
  attributes: 	id59 	name60 	address61 	
  model: 	c1
  modified: 	false
  name: 	StoreCustomer
  propertyStyle: 	POJO
  roles: 	orders62 	products63 	

- haveCustomerCommand11: 	Clazz
  attributes: 	name64 	address65 	
  methods: 	f66 	f67 	f68 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOffer12: 	Clazz
  attributes: 	id69 	price70 	startTime71 	endTime72 	
  model: 	c1
  modified: 	false
  name: 	StoreOffer
  propertyStyle: 	POJO
  roles: 	product73 	orders74 	

- haveOfferCommand13: 	Clazz
  attributes: 	price75 	product76 	startTime77 	endTime78 	
  methods: 	f79 	f80 	f81 	f82 	f83 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrder14: 	Clazz
  attributes: 	id84 	date85 	state86 	
  model: 	c1
  modified: 	false
  name: 	StoreOrder
  propertyStyle: 	POJO
  roles: 	customer87 	positions88 	

- haveOrderCommand15: 	Clazz
  attributes: 	customer89 	date90 	state91 	
  methods: 	f92 	f93 	f94 	f95 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrderPosition16: 	Clazz
  attributes: 	id96 	amount97 	state98 	
  model: 	c1
  modified: 	false
  name: 	StoreOrderPosition
  propertyStyle: 	POJO
  roles: 	order99 	offer100 	

- haveOrderPositionCommand17: 	Clazz
  attributes: 	order101 	offer102 	amount103 	state104 	
  methods: 	f105 	f106 	f107 	f108 	f109 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink18: 	Clazz
  attributes: 	source110 	target111 	
  methods: 	f112 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink19: 	Clazz
  attributes: 	source113 	target114 	
  methods: 	f115 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands20: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands21: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- storeProducts22: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreProduct>"

- storeCustomers23: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreCustomer>"

- storeOffers24: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOffer>"

- storeOrders25: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrder>"

- storeOrderPositions26: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrderPosition>"

- f27: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Store\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f28: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreProduct getOrCreateStoreProduct(String id)"
  methodBody: 	"      StoreProduct oldObject = this.getStoreProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreProduct newObject = new StoreProduct();
      newObject.setId(id);
      this.getStoreProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f29: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreCustomer getOrCreateStoreCustomer(String id)"
  methodBody: 	"      StoreCustomer oldObject = this.getStoreCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreCustomer newObject = new StoreCustomer();
      newObject.setId(id);
      this.getStoreCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f30: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOffer getOrCreateStoreOffer(String id)"
  methodBody: 	"      StoreOffer oldObject = this.getStoreOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOffer newObject = new StoreOffer();
      newObject.setId(id);
      this.getStoreOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrder getOrCreateStoreOrder(String id)"
  methodBody: 	"      StoreOrder oldObject = this.getStoreOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrder newObject = new StoreOrder();
      newObject.setId(id);
      this.getStoreOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrderPosition getOrCreateStoreOrderPosition(String id)"
  methodBody: 	"      StoreOrderPosition oldObject = this.getStoreOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrderPosition newObject = new StoreOrderPosition();
      newObject.setId(id);
      this.getStoreOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id33: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time34: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f35: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName36: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f37: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);

      return null;
"
  modified: 	false

- id38: 	Attribute
  clazz: 	storeApp5
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description39: 	Attribute
  clazz: 	storeApp5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- content40: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeApp5
  modified: 	false
  name: 	content
  other: 	app43
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id41: 	Attribute
  clazz: 	page6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description42: 	Attribute
  clazz: 	page6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app43: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page6
  modified: 	false
  name: 	app
  other: 	content40
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content44: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page6
  modified: 	false
  name: 	content
  other: 	page48
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id45: 	Attribute
  clazz: 	line7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description46: 	Attribute
  clazz: 	line7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action47: 	Attribute
  clazz: 	line7
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- page48: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line7
  modified: 	false
  name: 	page
  other: 	content44
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id49: 	Attribute
  clazz: 	storeProduct8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description50: 	Attribute
  clazz: 	storeProduct8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items51: 	Attribute
  clazz: 	storeProduct8
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers52: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct8
  modified: 	false
  name: 	offers
  other: 	product73
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers53: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct8
  modified: 	false
  name: 	customers
  other: 	products63
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description54: 	Attribute
  clazz: 	haveProductCommand9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items55: 	Attribute
  clazz: 	haveProductCommand9
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f56: 	FMethod
  clazz: 	haveProductCommand9
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f57: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand9
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- f58: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand9
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      return dataObject;
"
  modified: 	false

- id59: 	Attribute
  clazz: 	storeCustomer10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name60: 	Attribute
  clazz: 	storeCustomer10
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address61: 	Attribute
  clazz: 	storeCustomer10
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders62: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer10
  modified: 	false
  name: 	orders
  other: 	customer87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products63: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer10
  modified: 	false
  name: 	products
  other: 	customers53
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name64: 	Attribute
  clazz: 	haveCustomerCommand11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address65: 	Attribute
  clazz: 	haveCustomerCommand11
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f66: 	FMethod
  clazz: 	haveCustomerCommand11
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f67: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand11
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f68: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand11
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id69: 	Attribute
  clazz: 	storeOffer12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price70: 	Attribute
  clazz: 	storeOffer12
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime71: 	Attribute
  clazz: 	storeOffer12
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime72: 	Attribute
  clazz: 	storeOffer12
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product73: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOffer12
  modified: 	false
  name: 	product
  other: 	offers52
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders74: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOffer12
  modified: 	false
  name: 	orders
  other: 	offer100
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price75: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product76: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime77: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime78: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f79: 	FMethod
  clazz: 	haveOfferCommand13
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f80: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f81: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f82: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f83: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- id84: 	Attribute
  clazz: 	storeOrder14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date85: 	Attribute
  clazz: 	storeOrder14
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state86: 	Attribute
  clazz: 	storeOrder14
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrder14
  modified: 	false
  name: 	customer
  other: 	orders62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions88: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOrder14
  modified: 	false
  name: 	positions
  other: 	order99
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer89: 	Attribute
  clazz: 	haveOrderCommand15
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date90: 	Attribute
  clazz: 	haveOrderCommand15
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state91: 	Attribute
  clazz: 	haveOrderCommand15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f92: 	FMethod
  clazz: 	haveOrderCommand15
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f93: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand15
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f94: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand15
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f95: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand15
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- id96: 	Attribute
  clazz: 	storeOrderPosition16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount97: 	Attribute
  clazz: 	storeOrderPosition16
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state98: 	Attribute
  clazz: 	storeOrderPosition16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order99: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition16
  modified: 	false
  name: 	order
  other: 	positions88
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer100: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition16
  modified: 	false
  name: 	offer
  other: 	orders74
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order101: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer102: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount103: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state104: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f105: 	FMethod
  clazz: 	haveOrderPositionCommand17
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);

      return dataObject;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f108: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f109: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- source110: 	Attribute
  clazz: 	haveCustomerProductsLink18
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target111: 	Attribute
  clazz: 	haveCustomerProductsLink18
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f112: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink18
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

- source113: 	Attribute
  clazz: 	removeCustomerProductsLink19
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target114: 	Attribute
  clazz: 	removeCustomerProductsLink19
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f115: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink19
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

