- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	shopApp6 	page7 	line8 	shopProduct9 	haveProductCommand10 	shopCustomer11 	haveCustomerCommand12 	shopOffer13 	haveOfferCommand14 	shopOrder15 	haveOrderCommand16 	shopOrderPosition17 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	addToCard21 	orderAction22 	customerAccount23 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands24 	removeCommands25 	isoDateFormat26 	lastTime27 	timeDelta28 	shopProducts29 	shopCustomers30 	shopOffers31 	shopOrders32 	shopOrderPositions33 	
  importList: 	null 	null 	null 	
  methods: 	f34 	f35 	f36 	f37 	f38 	f39 	f40 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id41 	time42 	
  methods: 	f43 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand10 	haveCustomerCommand12 	haveOfferCommand14 	haveOrderCommand16 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	addToCard21 	orderAction22 	customerAccount23 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName44 	
  importList: 	null 	null 	null 	
  methods: 	f45 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort46 	modelEditor47 	reflectorMap48 	currentSession49 	executor50 	sessionToAppMap51 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f52 	f53 	f54 	f55 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO

- shopApp6: 	Clazz
  attributes: 	modelEditor56 	id57 	description58 	customer59 	
  methods: 	f60 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content61 	shoppingCard62 	

- page7: 	Clazz
  attributes: 	id63 	description64 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app65 	content66 	

- line8: 	Clazz
  attributes: 	id67 	description68 	action69 	value70 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page71 	

- shopProduct9: 	Clazz
  attributes: 	id72 	description73 	items74 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers75 	customers76 	

- haveProductCommand10: 	Clazz
  attributes: 	description77 	items78 	
  methods: 	f79 	f80 	f81 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer11: 	Clazz
  attributes: 	id82 	name83 	address84 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders85 	products86 	

- haveCustomerCommand12: 	Clazz
  attributes: 	name87 	address88 	
  methods: 	f89 	f90 	f91 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer13: 	Clazz
  attributes: 	id92 	price93 	startTime94 	endTime95 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product96 	orders97 	

- haveOfferCommand14: 	Clazz
  attributes: 	price98 	product99 	startTime100 	endTime101 	
  methods: 	f102 	f103 	f104 	f105 	f106 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder15: 	Clazz
  attributes: 	id107 	date108 	state109 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer110 	positions111 	shopApp112 	

- haveOrderCommand16: 	Clazz
  attributes: 	customer113 	date114 	state115 	
  methods: 	f116 	f117 	f118 	f119 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition17: 	Clazz
  attributes: 	id120 	amount121 	state122 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order123 	offer124 	

- haveOrderPositionCommand18: 	Clazz
  attributes: 	order125 	offer126 	amount127 	state128 	
  methods: 	f129 	f130 	f131 	f132 	f133 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink19: 	Clazz
  attributes: 	source134 	target135 	
  methods: 	f136 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink20: 	Clazz
  attributes: 	source137 	target138 	
  methods: 	f139 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addToCard21: 	Clazz
  attributes: 	offer140 	_app141 	
  model: 	c1
  modified: 	false
  name: 	AddToCard
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderAction22: 	Clazz
  attributes: 	order142 	name143 	address144 	_app145 	
  model: 	c1
  modified: 	false
  name: 	OrderAction
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customerAccount23: 	Clazz
  attributes: 	name146 	address147 	_app148 	
  model: 	c1
  modified: 	false
  name: 	CustomerAccount
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands24: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- isoDateFormat26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- shopProducts29: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers30: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers31: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders32: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions33: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f34: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f36: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f38: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f39: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f40: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id41: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time42: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f43: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName44: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f45: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort46: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor47: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- reflectorMap48: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession49: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor50: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap51: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f52: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new ShopEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      port(myPort);
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Serice is listening on port \" + myPort);
"
  modified: 	false

- f53: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f54: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f55: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- modelEditor56: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id57: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description58: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- customer59: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	ShopCustomer

- f60: 	FMethod
  clazz: 	shopApp6
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content61: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp6
  modified: 	false
  name: 	content
  other: 	app65
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shoppingCard62: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp6
  modified: 	false
  name: 	shoppingCard
  other: 	shopApp112
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id63: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description64: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app65: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page7
  modified: 	false
  name: 	app
  other: 	content61
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content66: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page7
  modified: 	false
  name: 	content
  other: 	page71
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id67: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description68: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action69: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value70: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page71: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line8
  modified: 	false
  name: 	page
  other: 	content66
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id72: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description73: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items74: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers75: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct9
  modified: 	false
  name: 	offers
  other: 	product96
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers76: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct9
  modified: 	false
  name: 	customers
  other: 	products86
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description77: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items78: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f79: 	FMethod
  clazz: 	haveProductCommand10
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f80: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f81: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id82: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name83: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address84: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders85: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer11
  modified: 	false
  name: 	orders
  other: 	customer110
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products86: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer11
  modified: 	false
  name: 	products
  other: 	customers76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name87: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address88: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f89: 	FMethod
  clazz: 	haveCustomerCommand12
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f90: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f91: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id92: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price93: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime94: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime95: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product96: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer13
  modified: 	false
  name: 	product
  other: 	offers75
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders97: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer13
  modified: 	false
  name: 	orders
  other: 	offer124
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price98: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product99: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime100: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime101: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f102: 	FMethod
  clazz: 	haveOfferCommand14
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f103: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f104: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f105: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id107: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date108: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state109: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer110: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder15
  modified: 	false
  name: 	customer
  other: 	orders85
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions111: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder15
  modified: 	false
  name: 	positions
  other: 	order123
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shopApp112: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder15
  modified: 	false
  name: 	shopApp
  other: 	shoppingCard62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer113: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date114: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state115: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f116: 	FMethod
  clazz: 	haveOrderCommand16
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f117: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f118: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f119: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id120: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount121: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state122: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order123: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	order
  other: 	positions111
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer124: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	offer
  other: 	orders97
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order125: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer126: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount127: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state128: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f129: 	FMethod
  clazz: 	haveOrderPositionCommand18
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f130: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f131: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f132: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f133: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source134: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target135: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f136: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink19
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source137: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target138: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f139: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink20
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer140: 	Attribute
  clazz: 	addToCard21
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- _app141: 	Attribute
  clazz: 	addToCard21
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- order142: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- name143: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address144: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app145: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- name146: 	Attribute
  clazz: 	customerAccount23
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address147: 	Attribute
  clazz: 	customerAccount23
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app148: 	Attribute
  clazz: 	customerAccount23
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

