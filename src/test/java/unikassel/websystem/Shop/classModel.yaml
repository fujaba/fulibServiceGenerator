- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopApp5 	page6 	line7 	shopProduct8 	haveProductCommand9 	shopCustomer10 	haveCustomerCommand11 	shopOffer12 	haveOfferCommand13 	shopOrder14 	haveOrderCommand15 	shopOrderPosition16 	haveOrderPositionCommand17 	haveCustomerProductsLink18 	removeCustomerProductsLink19 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands20 	removeCommands21 	shopProducts22 	shopCustomers23 	shopOffers24 	shopOrders25 	shopOrderPositions26 	
  importList: 	null 	
  methods: 	f27 	f28 	f29 	f30 	f31 	f32 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id33 	time34 	
  methods: 	f35 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand9 	haveCustomerCommand11 	haveOfferCommand13 	haveOrderCommand15 	haveOrderPositionCommand17 	haveCustomerProductsLink18 	removeCustomerProductsLink19 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName36 	
  importList: 	null 	null 	null 	
  methods: 	f37 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopApp5: 	Clazz
  attributes: 	id38 	description39 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content40 	

- page6: 	Clazz
  attributes: 	id41 	description42 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app43 	content44 	

- line7: 	Clazz
  attributes: 	id45 	description46 	action47 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page48 	

- shopProduct8: 	Clazz
  attributes: 	id49 	description50 	items51 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers52 	customers53 	

- haveProductCommand9: 	Clazz
  attributes: 	description54 	items55 	
  methods: 	f56 	f57 	f58 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer10: 	Clazz
  attributes: 	id59 	name60 	address61 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders62 	products63 	

- haveCustomerCommand11: 	Clazz
  attributes: 	name64 	address65 	
  methods: 	f66 	f67 	f68 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer12: 	Clazz
  attributes: 	id69 	price70 	startTime71 	endTime72 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product73 	orders74 	

- haveOfferCommand13: 	Clazz
  attributes: 	price75 	product76 	startTime77 	endTime78 	
  methods: 	f79 	f80 	f81 	f82 	f83 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder14: 	Clazz
  attributes: 	id84 	date85 	state86 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer87 	positions88 	

- haveOrderCommand15: 	Clazz
  attributes: 	customer89 	date90 	state91 	
  methods: 	f92 	f93 	f94 	f95 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition16: 	Clazz
  attributes: 	id96 	amount97 	state98 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order99 	offer100 	

- haveOrderPositionCommand17: 	Clazz
  attributes: 	order101 	offer102 	amount103 	state104 	
  methods: 	f105 	f106 	f107 	f108 	f109 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink18: 	Clazz
  attributes: 	source110 	target111 	
  methods: 	f112 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink19: 	Clazz
  attributes: 	source113 	target114 	
  methods: 	f115 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands20: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands21: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- shopProducts22: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers23: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers24: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f27: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f28: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f29: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f30: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id33: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time34: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f35: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName36: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f37: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);

      return null;
"
  modified: 	false

- id38: 	Attribute
  clazz: 	shopApp5
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description39: 	Attribute
  clazz: 	shopApp5
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- content40: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp5
  modified: 	false
  name: 	content
  other: 	app43
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id41: 	Attribute
  clazz: 	page6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description42: 	Attribute
  clazz: 	page6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app43: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page6
  modified: 	false
  name: 	app
  other: 	content40
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content44: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page6
  modified: 	false
  name: 	content
  other: 	page48
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id45: 	Attribute
  clazz: 	line7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description46: 	Attribute
  clazz: 	line7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action47: 	Attribute
  clazz: 	line7
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- page48: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line7
  modified: 	false
  name: 	page
  other: 	content44
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id49: 	Attribute
  clazz: 	shopProduct8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description50: 	Attribute
  clazz: 	shopProduct8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items51: 	Attribute
  clazz: 	shopProduct8
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers52: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct8
  modified: 	false
  name: 	offers
  other: 	product73
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers53: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct8
  modified: 	false
  name: 	customers
  other: 	products63
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description54: 	Attribute
  clazz: 	haveProductCommand9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items55: 	Attribute
  clazz: 	haveProductCommand9
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f56: 	FMethod
  clazz: 	haveProductCommand9
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f57: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand9
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      return dataObject;
"
  modified: 	false

- f58: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand9
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      return dataObject;
"
  modified: 	false

- id59: 	Attribute
  clazz: 	shopCustomer10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name60: 	Attribute
  clazz: 	shopCustomer10
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address61: 	Attribute
  clazz: 	shopCustomer10
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders62: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer10
  modified: 	false
  name: 	orders
  other: 	customer87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products63: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer10
  modified: 	false
  name: 	products
  other: 	customers53
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name64: 	Attribute
  clazz: 	haveCustomerCommand11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address65: 	Attribute
  clazz: 	haveCustomerCommand11
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f66: 	FMethod
  clazz: 	haveCustomerCommand11
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f67: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand11
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      return dataObject;
"
  modified: 	false

- f68: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand11
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      return dataObject;
"
  modified: 	false

- id69: 	Attribute
  clazz: 	shopOffer12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price70: 	Attribute
  clazz: 	shopOffer12
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime71: 	Attribute
  clazz: 	shopOffer12
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime72: 	Attribute
  clazz: 	shopOffer12
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product73: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer12
  modified: 	false
  name: 	product
  other: 	offers52
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders74: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer12
  modified: 	false
  name: 	orders
  other: 	offer100
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price75: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product76: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime77: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime78: 	Attribute
  clazz: 	haveOfferCommand13
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f79: 	FMethod
  clazz: 	haveOfferCommand13
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f80: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      return dataObject;
"
  modified: 	false

- f81: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f82: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- f83: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand13
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      return dataObject;
"
  modified: 	false

- id84: 	Attribute
  clazz: 	shopOrder14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date85: 	Attribute
  clazz: 	shopOrder14
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state86: 	Attribute
  clazz: 	shopOrder14
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder14
  modified: 	false
  name: 	customer
  other: 	orders62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions88: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder14
  modified: 	false
  name: 	positions
  other: 	order99
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer89: 	Attribute
  clazz: 	haveOrderCommand15
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date90: 	Attribute
  clazz: 	haveOrderCommand15
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state91: 	Attribute
  clazz: 	haveOrderCommand15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f92: 	FMethod
  clazz: 	haveOrderCommand15
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f93: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand15
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f94: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand15
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- f95: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand15
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      return dataObject;
"
  modified: 	false

- id96: 	Attribute
  clazz: 	shopOrderPosition16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount97: 	Attribute
  clazz: 	shopOrderPosition16
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state98: 	Attribute
  clazz: 	shopOrderPosition16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order99: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition16
  modified: 	false
  name: 	order
  other: 	positions88
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer100: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition16
  modified: 	false
  name: 	offer
  other: 	orders74
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order101: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer102: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount103: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state104: 	Attribute
  clazz: 	haveOrderPositionCommand17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f105: 	FMethod
  clazz: 	haveOrderPositionCommand17
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      return dataObject;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f108: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- f109: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand17
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      return dataObject;
"
  modified: 	false

- source110: 	Attribute
  clazz: 	haveCustomerProductsLink18
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target111: 	Attribute
  clazz: 	haveCustomerProductsLink18
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f112: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink18
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

- source113: 	Attribute
  clazz: 	removeCustomerProductsLink19
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target114: 	Attribute
  clazz: 	removeCustomerProductsLink19
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f115: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink19
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);

      return null;
"
  modified: 	false

