- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	shopApp6 	page7 	line8 	shopProduct9 	haveProductCommand10 	shopCustomer11 	haveCustomerCommand12 	shopOffer13 	haveOfferCommand14 	shopOrder15 	haveOrderCommand16 	shopOrderPosition17 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	addToCard21 	orderAction22 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands23 	removeCommands24 	shopProducts25 	shopCustomers26 	shopOffers27 	shopOrders28 	shopOrderPositions29 	
  importList: 	null 	
  methods: 	f30 	f31 	f32 	f33 	f34 	f35 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id36 	time37 	
  methods: 	f38 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand10 	haveCustomerCommand12 	haveOfferCommand14 	haveOrderCommand16 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	addToCard21 	orderAction22 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName39 	
  importList: 	null 	null 	null 	
  methods: 	f40 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort41 	modelEditor42 	reflectorMap43 	currentSession44 	executor45 	sessionToAppMap46 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f47 	f48 	f49 	f50 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO

- shopApp6: 	Clazz
  attributes: 	modelEditor51 	id52 	description53 	customer54 	
  methods: 	f55 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content56 	shoppingCard57 	

- page7: 	Clazz
  attributes: 	id58 	description59 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app60 	content61 	

- line8: 	Clazz
  attributes: 	id62 	description63 	action64 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page65 	

- shopProduct9: 	Clazz
  attributes: 	id66 	description67 	items68 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers69 	customers70 	

- haveProductCommand10: 	Clazz
  attributes: 	description71 	items72 	
  methods: 	f73 	f74 	f75 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer11: 	Clazz
  attributes: 	id76 	name77 	address78 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders79 	products80 	

- haveCustomerCommand12: 	Clazz
  attributes: 	name81 	address82 	
  methods: 	f83 	f84 	f85 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer13: 	Clazz
  attributes: 	id86 	price87 	startTime88 	endTime89 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product90 	orders91 	

- haveOfferCommand14: 	Clazz
  attributes: 	price92 	product93 	startTime94 	endTime95 	
  methods: 	f96 	f97 	f98 	f99 	f100 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder15: 	Clazz
  attributes: 	id101 	date102 	state103 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer104 	positions105 	shopApp106 	

- haveOrderCommand16: 	Clazz
  attributes: 	customer107 	date108 	state109 	
  methods: 	f110 	f111 	f112 	f113 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition17: 	Clazz
  attributes: 	id114 	amount115 	state116 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order117 	offer118 	

- haveOrderPositionCommand18: 	Clazz
  attributes: 	order119 	offer120 	amount121 	state122 	
  methods: 	f123 	f124 	f125 	f126 	f127 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink19: 	Clazz
  attributes: 	source128 	target129 	
  methods: 	f130 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink20: 	Clazz
  attributes: 	source131 	target132 	
  methods: 	f133 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addToCard21: 	Clazz
  attributes: 	offer134 	_app135 	
  model: 	c1
  modified: 	false
  name: 	AddToCard
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderAction22: 	Clazz
  attributes: 	order136 	name137 	address138 	_app139 	
  model: 	c1
  modified: 	false
  name: 	OrderAction
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands23: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands24: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- shopProducts25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions29: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f30: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f31: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f33: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f34: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id36: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time37: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f38: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName39: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f40: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort41: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor42: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- reflectorMap43: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession44: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor45: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap46: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f47: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new ShopEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      port(myPort);
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Serice is listening on port \" + myPort);
"
  modified: 	false

- f48: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f49: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f50: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- modelEditor51: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id52: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description53: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- customer54: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	ShopCustomer

- f55: 	FMethod
  clazz: 	shopApp6
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content56: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp6
  modified: 	false
  name: 	content
  other: 	app60
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shoppingCard57: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp6
  modified: 	false
  name: 	shoppingCard
  other: 	shopApp106
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id58: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description59: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app60: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page7
  modified: 	false
  name: 	app
  other: 	content56
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content61: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page7
  modified: 	false
  name: 	content
  other: 	page65
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id62: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description63: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action64: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- page65: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line8
  modified: 	false
  name: 	page
  other: 	content61
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id66: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description67: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items68: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers69: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct9
  modified: 	false
  name: 	offers
  other: 	product90
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers70: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct9
  modified: 	false
  name: 	customers
  other: 	products80
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description71: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items72: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f73: 	FMethod
  clazz: 	haveProductCommand10
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f74: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f75: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id76: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name77: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address78: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders79: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer11
  modified: 	false
  name: 	orders
  other: 	customer104
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products80: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer11
  modified: 	false
  name: 	products
  other: 	customers70
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name81: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address82: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f83: 	FMethod
  clazz: 	haveCustomerCommand12
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f84: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f85: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id86: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price87: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime88: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime89: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product90: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer13
  modified: 	false
  name: 	product
  other: 	offers69
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders91: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer13
  modified: 	false
  name: 	orders
  other: 	offer118
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price92: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product93: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime94: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime95: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f96: 	FMethod
  clazz: 	haveOfferCommand14
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f97: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f98: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f99: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id101: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date102: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state103: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer104: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder15
  modified: 	false
  name: 	customer
  other: 	orders79
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions105: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder15
  modified: 	false
  name: 	positions
  other: 	order117
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shopApp106: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder15
  modified: 	false
  name: 	shopApp
  other: 	shoppingCard57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer107: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date108: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state109: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f110: 	FMethod
  clazz: 	haveOrderCommand16
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f111: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f112: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f113: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id114: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount115: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state116: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order117: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	order
  other: 	positions105
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer118: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	offer
  other: 	orders91
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order119: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer120: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount121: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state122: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f123: 	FMethod
  clazz: 	haveOrderPositionCommand18
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f124: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f125: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f126: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f127: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source128: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target129: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f130: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink19
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source131: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target132: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f133: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink20
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer134: 	Attribute
  clazz: 	addToCard21
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- _app135: 	Attribute
  clazz: 	addToCard21
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- order136: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- name137: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address138: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app139: 	Attribute
  clazz: 	orderAction22
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

