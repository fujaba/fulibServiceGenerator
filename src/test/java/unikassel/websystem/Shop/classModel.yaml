- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	commandStream6 	shopApp7 	page8 	line9 	shopProduct10 	haveProductCommand11 	shopCustomer12 	haveCustomerCommand13 	shopOffer14 	haveOfferCommand15 	shopOrder16 	haveOrderCommand17 	shopOrderPosition18 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	addTobCard22 	orderAction23 	customerAccount24 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands25 	removeCommands26 	isoDateFormat27 	lastTime28 	timeDelta29 	shopProducts30 	shopCustomers31 	shopOffers32 	shopOrders33 	shopOrderPositions34 	
  importList: 	null 	null 	null 	
  methods: 	f35 	f36 	f37 	f38 	f39 	f40 	f41 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id42 	time43 	
  methods: 	f44 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand11 	haveCustomerCommand13 	haveOfferCommand15 	haveOrderCommand17 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	addTobCard22 	orderAction23 	customerAccount24 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName45 	
  importList: 	null 	null 	null 	
  methods: 	f46 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort47 	modelEditor48 	reflectorMap49 	currentSession50 	executor51 	sessionToAppMap52 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f53 	f54 	f55 	f56 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO
  roles: 	streams57 	

- commandStream6: 	Clazz
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service58 	

- shopApp7: 	Clazz
  attributes: 	modelEditor59 	id60 	description61 	customer62 	
  methods: 	f63 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content64 	shoppingCard65 	

- page8: 	Clazz
  attributes: 	id66 	description67 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app68 	content69 	

- line9: 	Clazz
  attributes: 	id70 	description71 	action72 	value73 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page74 	

- shopProduct10: 	Clazz
  attributes: 	id75 	description76 	items77 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers78 	customers79 	

- haveProductCommand11: 	Clazz
  attributes: 	description80 	items81 	
  methods: 	f82 	f83 	f84 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer12: 	Clazz
  attributes: 	id85 	name86 	address87 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders88 	products89 	

- haveCustomerCommand13: 	Clazz
  attributes: 	name90 	address91 	
  methods: 	f92 	f93 	f94 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer14: 	Clazz
  attributes: 	id95 	price96 	startTime97 	endTime98 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product99 	orders100 	

- haveOfferCommand15: 	Clazz
  attributes: 	price101 	product102 	startTime103 	endTime104 	
  methods: 	f105 	f106 	f107 	f108 	f109 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder16: 	Clazz
  attributes: 	id110 	date111 	state112 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer113 	positions114 	shopApp115 	

- haveOrderCommand17: 	Clazz
  attributes: 	customer116 	date117 	state118 	
  methods: 	f119 	f120 	f121 	f122 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition18: 	Clazz
  attributes: 	id123 	amount124 	state125 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order126 	offer127 	

- haveOrderPositionCommand19: 	Clazz
  attributes: 	order128 	offer129 	amount130 	state131 	
  methods: 	f132 	f133 	f134 	f135 	f136 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink20: 	Clazz
  attributes: 	source137 	target138 	
  methods: 	f139 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink21: 	Clazz
  attributes: 	source140 	target141 	
  methods: 	f142 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addTobCard22: 	Clazz
  attributes: 	offer143 	_app144 	
  model: 	c1
  modified: 	false
  name: 	AddTobCard
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderAction23: 	Clazz
  attributes: 	order145 	name146 	address147 	_app148 	
  model: 	c1
  modified: 	false
  name: 	OrderAction
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customerAccount24: 	Clazz
  attributes: 	name149 	address150 	_app151 	
  model: 	c1
  modified: 	false
  name: 	CustomerAccount
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- isoDateFormat27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta29: 	Attribute
  clazz: 	shopEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- shopProducts30: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers31: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers32: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders33: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions34: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f35: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f37: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f38: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f39: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f40: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f41: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id42: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time43: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f44: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName45: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f46: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort47: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor48: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- reflectorMap49: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession50: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor51: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap52: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f53: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new ShopEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      port(myPort);
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Serice is listening on port \" + myPort);
"
  modified: 	false

- f54: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f55: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f56: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- streams57: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopService5
  modified: 	false
  name: 	streams
  other: 	service58
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- service58: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- modelEditor59: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id60: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description61: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- customer62: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	ShopCustomer

- f63: 	FMethod
  clazz: 	shopApp7
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content64: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp7
  modified: 	false
  name: 	content
  other: 	app68
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shoppingCard65: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp7
  modified: 	false
  name: 	shoppingCard
  other: 	shopApp115
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id66: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description67: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app68: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page8
  modified: 	false
  name: 	app
  other: 	content64
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content69: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page8
  modified: 	false
  name: 	content
  other: 	page74
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id70: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description71: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action72: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value73: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page74: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line9
  modified: 	false
  name: 	page
  other: 	content69
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id75: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description76: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items77: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers78: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct10
  modified: 	false
  name: 	offers
  other: 	product99
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers79: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct10
  modified: 	false
  name: 	customers
  other: 	products89
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description80: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items81: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f82: 	FMethod
  clazz: 	haveProductCommand11
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f83: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f84: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id85: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name86: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address87: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders88: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer12
  modified: 	false
  name: 	orders
  other: 	customer113
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products89: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer12
  modified: 	false
  name: 	products
  other: 	customers79
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name90: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address91: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f92: 	FMethod
  clazz: 	haveCustomerCommand13
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f93: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f94: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id95: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price96: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime97: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime98: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product99: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer14
  modified: 	false
  name: 	product
  other: 	offers78
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders100: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer14
  modified: 	false
  name: 	orders
  other: 	offer127
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price101: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product102: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime103: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime104: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f105: 	FMethod
  clazz: 	haveOfferCommand15
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f108: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f109: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id110: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date111: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state112: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer113: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder16
  modified: 	false
  name: 	customer
  other: 	orders88
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions114: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder16
  modified: 	false
  name: 	positions
  other: 	order126
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shopApp115: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder16
  modified: 	false
  name: 	shopApp
  other: 	shoppingCard65
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer116: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date117: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state118: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f119: 	FMethod
  clazz: 	haveOrderCommand17
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f120: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f121: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id123: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount124: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state125: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order126: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	order
  other: 	positions114
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer127: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	offer
  other: 	orders100
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order128: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer129: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount130: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state131: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f132: 	FMethod
  clazz: 	haveOrderPositionCommand19
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f133: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f134: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f135: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f136: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source137: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target138: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f139: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink20
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source140: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target141: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f142: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink21
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer143: 	Attribute
  clazz: 	addTobCard22
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- _app144: 	Attribute
  clazz: 	addTobCard22
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- order145: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- name146: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address147: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app148: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- name149: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address150: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app151: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

