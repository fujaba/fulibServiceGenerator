- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	shopApp6 	page7 	line8 	shopProduct9 	haveProductCommand10 	shopCustomer11 	haveCustomerCommand12 	shopOffer13 	haveOfferCommand14 	shopOrder15 	haveOrderCommand16 	shopOrderPosition17 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	addToCard21 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/test/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/test/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands22 	removeCommands23 	shopProducts24 	shopCustomers25 	shopOffers26 	shopOrders27 	shopOrderPositions28 	
  importList: 	null 	
  methods: 	f29 	f30 	f31 	f32 	f33 	f34 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id35 	time36 	
  methods: 	f37 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand10 	haveCustomerCommand12 	haveOfferCommand14 	haveOrderCommand16 	haveOrderPositionCommand18 	haveCustomerProductsLink19 	removeCustomerProductsLink20 	addToCard21 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName38 	
  importList: 	null 	null 	null 	
  methods: 	f39 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort40 	modelEditor41 	reflectorMap42 	currentSession43 	executor44 	sessionToAppMap45 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f46 	f47 	f48 	f49 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO

- shopApp6: 	Clazz
  attributes: 	modelEditor50 	id51 	description52 	
  methods: 	f53 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content54 	

- page7: 	Clazz
  attributes: 	id55 	description56 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app57 	content58 	

- line8: 	Clazz
  attributes: 	id59 	description60 	action61 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page62 	

- shopProduct9: 	Clazz
  attributes: 	id63 	description64 	items65 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers66 	customers67 	

- haveProductCommand10: 	Clazz
  attributes: 	description68 	items69 	
  methods: 	f70 	f71 	f72 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer11: 	Clazz
  attributes: 	id73 	name74 	address75 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders76 	products77 	

- haveCustomerCommand12: 	Clazz
  attributes: 	name78 	address79 	
  methods: 	f80 	f81 	f82 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer13: 	Clazz
  attributes: 	id83 	price84 	startTime85 	endTime86 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product87 	orders88 	

- haveOfferCommand14: 	Clazz
  attributes: 	price89 	product90 	startTime91 	endTime92 	
  methods: 	f93 	f94 	f95 	f96 	f97 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder15: 	Clazz
  attributes: 	id98 	date99 	state100 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer101 	positions102 	

- haveOrderCommand16: 	Clazz
  attributes: 	customer103 	date104 	state105 	
  methods: 	f106 	f107 	f108 	f109 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition17: 	Clazz
  attributes: 	id110 	amount111 	state112 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order113 	offer114 	

- haveOrderPositionCommand18: 	Clazz
  attributes: 	order115 	offer116 	amount117 	state118 	
  methods: 	f119 	f120 	f121 	f122 	f123 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink19: 	Clazz
  attributes: 	source124 	target125 	
  methods: 	f126 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink20: 	Clazz
  attributes: 	source127 	target128 	
  methods: 	f129 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addToCard21: 	Clazz
  attributes: 	offer130 	
  model: 	c1
  modified: 	false
  name: 	AddToCard
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands22: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands23: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- shopProducts24: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f29: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f30: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f33: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f34: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id35: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time36: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f37: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName38: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f39: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort40: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor41: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- reflectorMap42: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession43: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor44: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap45: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f46: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new ShopEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      port(myPort);
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Serice is listening on port \" + myPort);
"
  modified: 	false

- f47: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f48: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f49: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- modelEditor50: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id51: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description52: 	Attribute
  clazz: 	shopApp6
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f53: 	FMethod
  clazz: 	shopApp6
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content54: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp6
  modified: 	false
  name: 	content
  other: 	app57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id55: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description56: 	Attribute
  clazz: 	page7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app57: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page7
  modified: 	false
  name: 	app
  other: 	content54
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content58: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page7
  modified: 	false
  name: 	content
  other: 	page62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id59: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description60: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action61: 	Attribute
  clazz: 	line8
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- page62: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line8
  modified: 	false
  name: 	page
  other: 	content58
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id63: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description64: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items65: 	Attribute
  clazz: 	shopProduct9
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers66: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct9
  modified: 	false
  name: 	offers
  other: 	product87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers67: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct9
  modified: 	false
  name: 	customers
  other: 	products77
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description68: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items69: 	Attribute
  clazz: 	haveProductCommand10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f70: 	FMethod
  clazz: 	haveProductCommand10
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f71: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f72: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand10
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id73: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name74: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address75: 	Attribute
  clazz: 	shopCustomer11
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders76: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer11
  modified: 	false
  name: 	orders
  other: 	customer101
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products77: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer11
  modified: 	false
  name: 	products
  other: 	customers67
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name78: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address79: 	Attribute
  clazz: 	haveCustomerCommand12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f80: 	FMethod
  clazz: 	haveCustomerCommand12
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f81: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f82: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand12
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id83: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price84: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime85: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime86: 	Attribute
  clazz: 	shopOffer13
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer13
  modified: 	false
  name: 	product
  other: 	offers66
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders88: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer13
  modified: 	false
  name: 	orders
  other: 	offer114
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price89: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product90: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime91: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime92: 	Attribute
  clazz: 	haveOfferCommand14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f93: 	FMethod
  clazz: 	haveOfferCommand14
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f94: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f95: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f96: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f97: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand14
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id98: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date99: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state100: 	Attribute
  clazz: 	shopOrder15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer101: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder15
  modified: 	false
  name: 	customer
  other: 	orders76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions102: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder15
  modified: 	false
  name: 	positions
  other: 	order113
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer103: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date104: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state105: 	Attribute
  clazz: 	haveOrderCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f106: 	FMethod
  clazz: 	haveOrderCommand16
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f108: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f109: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand16
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id110: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount111: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state112: 	Attribute
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order113: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	order
  other: 	positions102
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer114: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition17
  modified: 	false
  name: 	offer
  other: 	orders88
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order115: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer116: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount117: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state118: 	Attribute
  clazz: 	haveOrderPositionCommand18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f119: 	FMethod
  clazz: 	haveOrderPositionCommand18
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f120: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f121: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f123: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand18
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source124: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target125: 	Attribute
  clazz: 	haveCustomerProductsLink19
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f126: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink19
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source127: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target128: 	Attribute
  clazz: 	removeCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f129: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink20
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer130: 	Attribute
  clazz: 	addToCard21
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

