- c1: 	ClassModel
  classes: 	m1Editor2 	modelCommand3 	removeCommand4 	m1Service5 	commandStream6 	addStreamCommand7 	m1App8 	page9 	line10 	person11 	dog12 	havePerson13 	haveDog14 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	de.hub.mse.ttc2020.solution.M1
  packageSrcFolder: 	"test/src/main/java/de/hub/mse/ttc2020/solution/M1"

- m1Editor2: 	Clazz
  attributes: 	activeCommands15 	removeCommands16 	commandListeners17 	mapOfFrames18 	mapOfModelObjects19 	isoDateFormat20 	lastTime21 	timeDelta22 	
  importList: 	null 	null 	null 	null 	null 	
  methods: 	f23 	f24 	f25 	f26 	f27 	f28 	f29 	f30 	
  model: 	c1
  modified: 	false
  name: 	M1Editor
  propertyStyle: 	POJO
  roles: 	service31 	

- modelCommand3: 	Clazz
  attributes: 	id32 	time33 	
  methods: 	f34 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	havePerson13 	haveDog14 	

- removeCommand4: 	Clazz
  importList: 	null 	null 	null 	
  methods: 	f35 	f36 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- m1Service5: 	Clazz
  attributes: 	myPort37 	reflectorMap38 	currentSession39 	executor40 	spark41 	sessionToAppMap42 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f43 	f44 	f45 	f46 	f47 	f48 	
  model: 	c1
  modified: 	false
  name: 	M1Service
  propertyStyle: 	POJO
  roles: 	modelEditor49 	streams50 	

- commandStream6: 	Clazz
  attributes: 	name51 	targetUrlList52 	oldCommands53 	activeCommands54 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f55 	f56 	f57 	f58 	f59 	f60 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service61 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute62 	outgoingUrl63 	
  methods: 	f64 	f65 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- m1App8: 	Clazz
  attributes: 	modelEditor66 	id67 	description68 	
  methods: 	f69 	
  model: 	c1
  modified: 	false
  name: 	M1App
  propertyStyle: 	POJO
  roles: 	content70 	

- page9: 	Clazz
  attributes: 	id71 	description72 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app73 	content74 	

- line10: 	Clazz
  attributes: 	id75 	description76 	action77 	value78 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page79 	

- person11: 	Clazz
  attributes: 	id80 	name81 	age82 	
  model: 	c1
  modified: 	false
  name: 	Person
  propertyStyle: 	POJO
  roles: 	dog83 	

- dog12: 	Clazz
  attributes: 	id84 	name85 	age86 	
  model: 	c1
  modified: 	false
  name: 	Dog
  propertyStyle: 	POJO
  roles: 	owner87 	

- havePerson13: 	Clazz
  attributes: 	name88 	age89 	
  methods: 	f90 	
  model: 	c1
  modified: 	false
  name: 	HavePerson
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveDog14: 	Clazz
  attributes: 	name91 	age92 	owner93 	
  methods: 	f94 	
  model: 	c1
  modified: 	false
  name: 	HaveDog
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands15: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands16: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners17: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- mapOfFrames18: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfFrames
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Object>"

- mapOfModelObjects19: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfModelObjects
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Object>"

- isoDateFormat20: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime21: 	Attribute
  clazz: 	m1Editor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta22: 	Attribute
  clazz: 	m1Editor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- f23: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public Object getOrCreate(Class clazz, String id)"
  methodBody: 	"      Object modelObject = mapOfModelObjects.get(id);
      if (modelObject != null) {
         return modelObject;
      }

      modelObject = getObjectFrame(clazz, id);

      mapOfFrames.remove(id);
      mapOfModelObjects.put(id, modelObject);

      return modelObject;
"
  modified: 	false

- f24: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public Object getObjectFrame(Class clazz, String id)"
  methodBody: 	"      try {
         Object modelObject = mapOfModelObjects.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = mapOfFrames.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = (Object) clazz.getConstructor().newInstance();
         Method setIdMethod = clazz.getMethod(\"setId\", String.class);
         setIdMethod.invoke(modelObject, id);
         mapOfFrames.put(id, modelObject);

         return modelObject;
      }
      catch (Exception e) {
         throw new RuntimeException(e);
      }
"
  modified: 	false

- f25: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public Object getModelObject(String id)"
  methodBody: 	"   return mapOfModelObjects.get(id);
"
  modified: 	false

- f26: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f27: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f28: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public M1Editor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f29: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"de.hub.mse.ttc2020.solution.M1\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         execute(cmd);
      }
"
  modified: 	false

- f30: 	FMethod
  clazz: 	m1Editor2
  declaration: 	"public void execute(ModelCommand command)"
  methodBody: 	"      String id = command.getId();
      if (id == null) {
         id = \"obj\" + activeCommands.size();
         command.setId(id);
      }

      String time = command.getTime();
      if (time == null) {
         time = getTime();
         command.setTime(time);
      }

      ModelCommand oldCommand = activeCommands.get(id);

      if (oldCommand != null && oldCommand.getTime().compareTo(time) >= 0) {
         // already updated
         return;
      }

      if (oldCommand != null && oldCommand instanceof RemoveCommand) {
         // object is dead, do not recreate
         return;
      }

      command.run(this);

      activeCommands.put(id, command);
"
  modified: 	false

- service31: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	m1Editor2
  modified: 	false
  name: 	service
  other: 	modelEditor49
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id32: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time33: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f34: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(M1Editor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public boolean preCheck(M1Editor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RemoveCommand-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RemoveCommand-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RemoveCommand-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(M1Editor editor)"
  methodBody: 	"      java.util.Map<String, Object> mapOfModelObjects = editor.getMapOfModelObjects();
      java.util.Map<String, Object> mapOfFrames = editor.getMapOfFrames();

      Object oldObject = mapOfModelObjects.remove(getId());

      if (oldObject != null) {
         mapOfFrames.put(getId(), oldObject);
      }

      return null;
"
  modified: 	false

- myPort37: 	Attribute
  clazz: 	m1Service5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap38: 	Attribute
  clazz: 	m1Service5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession39: 	Attribute
  clazz: 	m1Service5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor40: 	Attribute
  clazz: 	m1Service5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark41: 	Attribute
  clazz: 	m1Service5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap42: 	Attribute
  clazz: 	m1Service5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, M1App>"

- f43: 	FMethod
  clazz: 	m1Service5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new M1Editor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/M1\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/M1cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // there are no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"M1 Service is listening on port \" + myPort);
"
  modified: 	false

- f44: 	FMethod
  clazz: 	m1Service5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f45: 	FMethod
  clazz: 	m1Service5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         M1App myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new M1App().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         stringWriter.write(
               \"<html>\n\" +
                     \"<head>\n\" +
                     \"    <meta charset=\\"utf-8\\">\n\" +
                     \"    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\n\" +
                     \"\n\" +
                     \"    <link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\\">\n\" +
                     \"    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"></script>\n\" +
                     \"</head>\n\n\"
         );
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         stringWriter.write(\"\n</html>\n\");
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"M1\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f46: 	FMethod
  clazz: 	m1Service5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      M1App app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", M1Editor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f47: 	FMethod
  clazz: 	m1Service5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f48: 	FMethod
  clazz: 	m1Service5
  declaration: 	"public CommandStream getStream(String streamName)"
  methodBody: 	"      for (CommandStream stream : this.getStreams()) {
         if (stream.getName().equals(streamName)) {
            return stream;
         }
      }
      CommandStream newStream = new CommandStream().setName(streamName);
      newStream.setService(this);
      withStreams(newStream);
      newStream.start();
      return newStream;
"
  modified: 	false

- modelEditor49: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	m1Service5
  modified: 	false
  name: 	modelEditor
  other: 	service31
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams50: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	m1Service5
  modified: 	false
  name: 	streams
  other: 	service61
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name51: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- targetUrlList52: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	targetUrlList
  propertyStyle: 	POJO
  type: 	"ArrayList<String>"

- oldCommands53: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands54: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f55: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f56: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      String yaml = Yaml.encode(activeCommands.values());
      for (String targetUrl : targetUrlList) {
         try {
            URL url = new URL(targetUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(\"POST\");
            con.setDoOutput(true);
            DataOutputStream out = new DataOutputStream(con.getOutputStream());
            out.writeBytes(yaml);
            out.flush();

            InputStream inputStream = con.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            BufferedReader in = new BufferedReader(inputStreamReader);
            String inputLine;
            StringBuffer content = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
               content.append(inputLine);
            }
            in.close();
            out.close();
            con.disconnect();

            // got an answer, clear active commands
            activeCommands.clear();
            LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
                  .decode(content.toString());
            executeCommands(map.values());

         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f57: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f58: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start()"
  methodBody: 	"      service.getSpark().post(\"/\" + name, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f59: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- f60: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void addCommandsToBeStreamed(String... commandList)"
  methodBody: 	"      for (String cmd : commandList) {
         service.getModelEditor().addCommandListener(cmd, this);
      }
"
  modified: 	false

- service61: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams50
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute62: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl63: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- f64: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public boolean preCheck(M1Editor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AddStreamCommand-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AddStreamCommand-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AddStreamCommand-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f65: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(M1Editor editor)"
  methodBody: 	"      CommandStream stream = editor.getService().getStream(incommingRoute);
      stream.getTargetUrlList().add(outgoingUrl);
      return null;
"
  modified: 	false

- modelEditor66: 	Attribute
  clazz: 	m1App8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	M1Editor

- id67: 	Attribute
  clazz: 	m1App8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description68: 	Attribute
  clazz: 	m1App8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f69: 	FMethod
  clazz: 	m1App8
  declaration: 	"public M1App init(M1Editor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"M1 App\");
      return this;
"
  modified: 	false

- content70: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	m1App8
  modified: 	false
  name: 	content
  other: 	app73
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id71: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description72: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app73: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content70
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content74: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page79
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id75: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description76: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action77: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value78: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page79: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content74
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id80: 	Attribute
  clazz: 	person11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name81: 	Attribute
  clazz: 	person11
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- age82: 	Attribute
  clazz: 	person11
  modified: 	false
  name: 	age
  propertyStyle: 	POJO
  type: 	int

- dog83: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	person11
  modified: 	false
  name: 	dog
  other: 	owner87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id84: 	Attribute
  clazz: 	dog12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name85: 	Attribute
  clazz: 	dog12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- age86: 	Attribute
  clazz: 	dog12
  modified: 	false
  name: 	age
  propertyStyle: 	POJO
  type: 	int

- owner87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	dog12
  modified: 	false
  name: 	owner
  other: 	dog83
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name88: 	Attribute
  clazz: 	havePerson13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- age89: 	Attribute
  clazz: 	havePerson13
  modified: 	false
  name: 	age
  propertyStyle: 	POJO
  type: 	int

- f90: 	FMethod
  clazz: 	havePerson13
  declaration: 	"public boolean preCheck(M1Editor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"HavePerson-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"HavePerson-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"HavePerson-\" + this.getId(), this);
      return true;
"
  modified: 	false

- name91: 	Attribute
  clazz: 	haveDog14
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- age92: 	Attribute
  clazz: 	haveDog14
  modified: 	false
  name: 	age
  propertyStyle: 	POJO
  type: 	int

- owner93: 	Attribute
  clazz: 	haveDog14
  modified: 	false
  name: 	owner
  propertyStyle: 	POJO
  type: 	String

- f94: 	FMethod
  clazz: 	haveDog14
  declaration: 	"public boolean preCheck(M1Editor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"HaveDog-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"HaveDog-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"HaveDog-\" + this.getId(), this);
      return true;
"
  modified: 	false

