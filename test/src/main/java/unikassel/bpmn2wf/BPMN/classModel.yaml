- c1: 	ClassModel
  classes: 	bPMNEditor2 	modelCommand3 	removeCommand4 	bPMNService5 	commandStream6 	addStreamCommand7 	bPMNApp8 	page9 	line10 	addStep11 	addFlow12 	task13 	flow14 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.bpmn2wf.BPMN
  packageSrcFolder: 	"src/main/java/unikassel/bpmn2wf/BPMN"

- bPMNEditor2: 	Clazz
  attributes: 	activeCommands15 	removeCommands16 	commandListeners17 	isoDateFormat18 	lastTime19 	timeDelta20 	
  importList: 	null 	null 	null 	null 	
  methods: 	f21 	f22 	f23 	f24 	
  model: 	c1
  modified: 	false
  name: 	BPMNEditor
  propertyStyle: 	POJO
  roles: 	service25 	

- modelCommand3: 	Clazz
  attributes: 	id26 	time27 	
  methods: 	f28 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	addStep11 	addFlow12 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName29 	
  importList: 	null 	null 	null 	
  methods: 	f30 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- bPMNService5: 	Clazz
  attributes: 	myPort31 	reflectorMap32 	currentSession33 	executor34 	spark35 	sessionToAppMap36 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f37 	f38 	f39 	f40 	f41 	f42 	f43 	
  model: 	c1
  modified: 	false
  name: 	BPMNService
  propertyStyle: 	POJO
  roles: 	modelEditor44 	streams45 	

- commandStream6: 	Clazz
  attributes: 	targetUrl46 	oldCommands47 	activeCommands48 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f49 	f50 	f51 	f52 	f53 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service54 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute55 	outgoingUrl56 	commandList57 	
  methods: 	f58 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- bPMNApp8: 	Clazz
  attributes: 	modelEditor59 	id60 	description61 	
  methods: 	f62 	
  model: 	c1
  modified: 	false
  name: 	BPMNApp
  propertyStyle: 	POJO
  roles: 	content63 	

- page9: 	Clazz
  attributes: 	id64 	description65 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app66 	content67 	

- line10: 	Clazz
  attributes: 	id68 	description69 	action70 	value71 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page72 	

- addStep11: 	Clazz
  attributes: 	taskId73 	taskKind74 	taskText75 	
  model: 	c1
  modified: 	false
  name: 	AddStep
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addFlow12: 	Clazz
  attributes: 	source76 	target77 	
  model: 	c1
  modified: 	false
  name: 	AddFlow
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- task13: 	Clazz
  attributes: 	id78 	text79 	kind80 	
  model: 	c1
  modified: 	false
  name: 	Task
  propertyStyle: 	POJO
  roles: 	outgoing81 	incomming82 	kids83 	parent84 	

- flow14: 	Clazz
  model: 	c1
  modified: 	false
  name: 	Flow
  propertyStyle: 	POJO
  roles: 	source85 	target86 	

- activeCommands15: 	Attribute
  clazz: 	bPMNEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands16: 	Attribute
  clazz: 	bPMNEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners17: 	Attribute
  clazz: 	bPMNEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat18: 	Attribute
  clazz: 	bPMNEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime19: 	Attribute
  clazz: 	bPMNEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta20: 	Attribute
  clazz: 	bPMNEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- f21: 	FMethod
  clazz: 	bPMNEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f22: 	FMethod
  clazz: 	bPMNEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f23: 	FMethod
  clazz: 	bPMNEditor2
  declaration: 	"public BPMNEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f24: 	FMethod
  clazz: 	bPMNEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.bpmn2wf.BPMN\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- service25: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	bPMNEditor2
  modified: 	false
  name: 	service
  other: 	modelEditor44
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id26: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time27: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f28: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(BPMNEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName29: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f30: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(BPMNEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort31: 	Attribute
  clazz: 	bPMNService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap32: 	Attribute
  clazz: 	bPMNService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession33: 	Attribute
  clazz: 	bPMNService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor34: 	Attribute
  clazz: 	bPMNService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark35: 	Attribute
  clazz: 	bPMNService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap36: 	Attribute
  clazz: 	bPMNService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, BPMNApp>"

- f37: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new BPMNEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/BPMN\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/BPMNcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"BPMN Service is listening on port \" + myPort);
"
  modified: 	false

- f38: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f39: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         BPMNApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new BPMNApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"BPMN\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f40: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      BPMNApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", BPMNEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f41: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public CommandStream addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;
"
  modified: 	false

- f42: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f43: 	FMethod
  clazz: 	bPMNService5
  declaration: 	"public void connectTo(String sourceServiceName, String sourceUrl, String targetServiceName, String targetUrl, String... commandList)"
  methodBody: 	"      String incommingRoute = targetServiceName + \"To\" + sourceServiceName;
      String incommingURL = sourceUrl + \"/\" + incommingRoute;
      String outgoingRoute = sourceServiceName + \"To\" + targetServiceName;
      String outgoingURL = targetUrl + \"/\" + outgoingRoute;
      ArrayList<String> sourceCommands = new ArrayList<>();
      ArrayList<String> targetCommands = new ArrayList<>();

      ArrayList<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if (\"<->\".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(\" \", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + \"/connect\");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- modelEditor44: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	bPMNService5
  modified: 	false
  name: 	modelEditor
  other: 	service25
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams45: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	bPMNService5
  modified: 	false
  name: 	streams
  other: 	service54
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl46: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands47: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands48: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f49: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f50: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(content.toString());
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f51: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f52: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, BPMNService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f53: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service54: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams45
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute55: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl56: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- commandList57: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	commandList
  propertyStyle: 	POJO
  type: 	String

- f58: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(BPMNEditor editor)"
  methodBody: 	"      String[] split = commandList.split(\" \");
      editor.getService().addStream(incommingRoute, outgoingUrl, split);
      return null;
"
  modified: 	false

- modelEditor59: 	Attribute
  clazz: 	bPMNApp8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	BPMNEditor

- id60: 	Attribute
  clazz: 	bPMNApp8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description61: 	Attribute
  clazz: 	bPMNApp8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f62: 	FMethod
  clazz: 	bPMNApp8
  declaration: 	"public BPMNApp init(BPMNEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"BPMN App\");
      return this;
"
  modified: 	false

- content63: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	bPMNApp8
  modified: 	false
  name: 	content
  other: 	app66
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id64: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description65: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app66: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content63
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content67: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page72
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id68: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description69: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action70: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value71: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page72: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content67
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- taskId73: 	Attribute
  clazz: 	addStep11
  modified: 	false
  name: 	taskId
  propertyStyle: 	POJO
  type: 	String

- taskKind74: 	Attribute
  clazz: 	addStep11
  modified: 	false
  name: 	taskKind
  propertyStyle: 	POJO
  type: 	String

- taskText75: 	Attribute
  clazz: 	addStep11
  modified: 	false
  name: 	taskText
  propertyStyle: 	POJO
  type: 	String

- source76: 	Attribute
  clazz: 	addFlow12
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target77: 	Attribute
  clazz: 	addFlow12
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- id78: 	Attribute
  clazz: 	task13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- text79: 	Attribute
  clazz: 	task13
  modified: 	false
  name: 	text
  propertyStyle: 	POJO
  type: 	String

- kind80: 	Attribute
  clazz: 	task13
  modified: 	false
  name: 	kind
  propertyStyle: 	POJO
  type: 	String

- outgoing81: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	task13
  modified: 	false
  name: 	outgoing
  other: 	source85
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incomming82: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	task13
  modified: 	false
  name: 	incomming
  other: 	target86
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- kids83: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	task13
  modified: 	false
  name: 	kids
  other: 	parent84
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- parent84: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	task13
  modified: 	false
  name: 	parent
  other: 	kids83
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- source85: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	flow14
  modified: 	false
  name: 	source
  other: 	outgoing81
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- target86: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	flow14
  modified: 	false
  name: 	target
  other: 	incomming82
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

