- c1: 	ClassModel
  classes: 	storageEditor2 	modelCommand3 	removeCommand4 	storageService5 	commandStream6 	addStreamCommand7 	storageApp8 	page9 	line10 	storageProduct11 	haveProductCommand12 	storageSupplier13 	haveSupplierCommand14 	storageSupply15 	haveSupplyCommand16 	storageCustomer17 	haveCustomerCommand18 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.qsexample.Storage
  packageSrcFolder: 	"src/main/java/unikassel/qsexample/Storage"

- storageEditor2: 	Clazz
  attributes: 	activeCommands19 	removeCommands20 	commandListeners21 	isoDateFormat22 	lastTime23 	timeDelta24 	storageProducts25 	storageSuppliers26 	storageSupplys27 	storageCustomers28 	
  importList: 	null 	null 	null 	null 	
  methods: 	f29 	f30 	f31 	f32 	f33 	f34 	f35 	f36 	
  model: 	c1
  modified: 	false
  name: 	StorageEditor
  propertyStyle: 	POJO
  roles: 	service37 	

- modelCommand3: 	Clazz
  attributes: 	id38 	time39 	
  methods: 	f40 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	haveProductCommand12 	haveSupplierCommand14 	haveSupplyCommand16 	haveCustomerCommand18 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName41 	
  importList: 	null 	null 	null 	
  methods: 	f42 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storageService5: 	Clazz
  attributes: 	myPort43 	reflectorMap44 	currentSession45 	executor46 	spark47 	sessionToAppMap48 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f49 	f50 	f51 	f52 	f53 	f54 	f55 	
  model: 	c1
  modified: 	false
  name: 	StorageService
  propertyStyle: 	POJO
  roles: 	modelEditor56 	streams57 	

- commandStream6: 	Clazz
  attributes: 	targetUrl58 	oldCommands59 	activeCommands60 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f61 	f62 	f63 	f64 	f65 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service66 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute67 	outgoingUrl68 	commandList69 	
  methods: 	f70 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storageApp8: 	Clazz
  attributes: 	modelEditor71 	id72 	description73 	
  methods: 	f74 	
  model: 	c1
  modified: 	false
  name: 	StorageApp
  propertyStyle: 	POJO
  roles: 	content75 	

- page9: 	Clazz
  attributes: 	id76 	description77 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app78 	content79 	

- line10: 	Clazz
  attributes: 	id80 	description81 	action82 	value83 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page84 	

- storageProduct11: 	Clazz
  attributes: 	id85 	description86 	
  model: 	c1
  modified: 	false
  name: 	StorageProduct
  propertyStyle: 	POJO
  roles: 	supplies87 	

- haveProductCommand12: 	Clazz
  attributes: 	description88 	
  methods: 	f89 	f90 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storageSupplier13: 	Clazz
  attributes: 	id91 	name92 	address93 	
  model: 	c1
  modified: 	false
  name: 	StorageSupplier
  propertyStyle: 	POJO
  roles: 	deliveries94 	

- haveSupplierCommand14: 	Clazz
  attributes: 	name95 	address96 	
  methods: 	f97 	f98 	f99 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplierCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storageSupply15: 	Clazz
  attributes: 	id100 	items101 	state102 	
  model: 	c1
  modified: 	false
  name: 	StorageSupply
  propertyStyle: 	POJO
  roles: 	supplier103 	product104 	

- haveSupplyCommand16: 	Clazz
  attributes: 	supplier105 	product106 	items107 	state108 	
  methods: 	f109 	f110 	f111 	f112 	f113 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplyCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storageCustomer17: 	Clazz
  attributes: 	id114 	name115 	address116 	
  model: 	c1
  modified: 	false
  name: 	StorageCustomer
  propertyStyle: 	POJO

- haveCustomerCommand18: 	Clazz
  attributes: 	name117 	address118 	
  methods: 	f119 	f120 	f121 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands19: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands20: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners21: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat22: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime23: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta24: 	Attribute
  clazz: 	storageEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- storageProducts25: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storageProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StorageProduct>"

- storageSuppliers26: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storageSuppliers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StorageSupplier>"

- storageSupplys27: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storageSupplys
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StorageSupply>"

- storageCustomers28: 	Attribute
  clazz: 	storageEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storageCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StorageCustomer>"

- f29: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f30: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f31: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public StorageEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.qsexample.Storage\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f33: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public StorageProduct getOrCreateStorageProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StorageProduct oldObject = this.getStorageProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StorageProduct newObject = new StorageProduct();
      newObject.setId(id);
      this.getStorageProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f34: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public StorageSupplier getOrCreateStorageSupplier(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StorageSupplier oldObject = this.getStorageSuppliers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StorageSupplier newObject = new StorageSupplier();
      newObject.setId(id);
      this.getStorageSuppliers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public StorageSupply getOrCreateStorageSupply(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StorageSupply oldObject = this.getStorageSupplys().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StorageSupply newObject = new StorageSupply();
      newObject.setId(id);
      this.getStorageSupplys().put(id, newObject);
      return newObject;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	storageEditor2
  declaration: 	"public StorageCustomer getOrCreateStorageCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StorageCustomer oldObject = this.getStorageCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StorageCustomer newObject = new StorageCustomer();
      newObject.setId(id);
      this.getStorageCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- service37: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageEditor2
  modified: 	false
  name: 	service
  other: 	modelEditor56
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id38: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time39: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f40: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(StorageEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName41: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f42: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(StorageEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort43: 	Attribute
  clazz: 	storageService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap44: 	Attribute
  clazz: 	storageService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession45: 	Attribute
  clazz: 	storageService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor46: 	Attribute
  clazz: 	storageService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark47: 	Attribute
  clazz: 	storageService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap48: 	Attribute
  clazz: 	storageService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, StorageApp>"

- f49: 	FMethod
  clazz: 	storageService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new StorageEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Storage\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Storagecmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Storage Service is listening on port \" + myPort);
"
  modified: 	false

- f50: 	FMethod
  clazz: 	storageService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f51: 	FMethod
  clazz: 	storageService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         StorageApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new StorageApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         stringWriter.write(
               \"<html>\n\" +
                     \"<head>\n\" +
                     \"    <meta charset=\\"utf-8\\">\n\" +
                     \"    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\n\" +
                     \"\n\" +
                     \"    <link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\\">\n\" +
                     \"    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"></script>\n\" +
                     \"</head>\n\n\"
         );
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         stringWriter.write(\"\n</html>\n\");
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Storage\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f52: 	FMethod
  clazz: 	storageService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      StorageApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", StorageEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f53: 	FMethod
  clazz: 	storageService5
  declaration: 	"public CommandStream addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;
"
  modified: 	false

- f54: 	FMethod
  clazz: 	storageService5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f55: 	FMethod
  clazz: 	storageService5
  declaration: 	"public void connectTo(String sourceServiceName, String sourceUrl, String targetServiceName, String targetUrl, String... commandList)"
  methodBody: 	"      String incommingRoute = targetServiceName + \"To\" + sourceServiceName;
      String incommingURL = sourceUrl + \"/\" + incommingRoute;
      String outgoingRoute = sourceServiceName + \"To\" + targetServiceName;
      String outgoingURL = targetUrl + \"/\" + outgoingRoute;
      ArrayList<String> sourceCommands = new ArrayList<>();
      ArrayList<String> targetCommands = new ArrayList<>();

      ArrayList<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if (\"<->\".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(\" \", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + \"/connect\");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- modelEditor56: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageService5
  modified: 	false
  name: 	modelEditor
  other: 	service37
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams57: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storageService5
  modified: 	false
  name: 	streams
  other: 	service66
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl58: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands59: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands60: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f61: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f62: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(content.toString());
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f63: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f64: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, StorageService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f65: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service66: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute67: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl68: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- commandList69: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	commandList
  propertyStyle: 	POJO
  type: 	String

- f70: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(StorageEditor editor)"
  methodBody: 	"      String[] split = commandList.split(\" \");
      editor.getService().addStream(incommingRoute, outgoingUrl, split);
      return null;
"
  modified: 	false

- modelEditor71: 	Attribute
  clazz: 	storageApp8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	StorageEditor

- id72: 	Attribute
  clazz: 	storageApp8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description73: 	Attribute
  clazz: 	storageApp8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f74: 	FMethod
  clazz: 	storageApp8
  declaration: 	"public StorageApp init(StorageEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Storage App\");
      return this;
"
  modified: 	false

- content75: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageApp8
  modified: 	false
  name: 	content
  other: 	app78
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id76: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description77: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app78: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content75
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content79: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page84
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id80: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description81: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action82: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value83: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page84: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content79
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id85: 	Attribute
  clazz: 	storageProduct11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description86: 	Attribute
  clazz: 	storageProduct11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- supplies87: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storageProduct11
  modified: 	false
  name: 	supplies
  other: 	product104
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description88: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f89: 	FMethod
  clazz: 	haveProductCommand12
  declaration: 	"public boolean preCheck(StorageEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StorageProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StorageProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StorageProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f90: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public StorageProduct run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageProducts().get(this.getId());
      }
      StorageProduct dataObject = editor.getOrCreateStorageProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id91: 	Attribute
  clazz: 	storageSupplier13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name92: 	Attribute
  clazz: 	storageSupplier13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address93: 	Attribute
  clazz: 	storageSupplier13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- deliveries94: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storageSupplier13
  modified: 	false
  name: 	deliveries
  other: 	supplier103
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name95: 	Attribute
  clazz: 	haveSupplierCommand14
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address96: 	Attribute
  clazz: 	haveSupplierCommand14
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f97: 	FMethod
  clazz: 	haveSupplierCommand14
  declaration: 	"public boolean preCheck(StorageEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StorageSupplier-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StorageSupplier-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StorageSupplier-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f98: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand14
  declaration: 	"@Override
   public StorageSupplier run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageSuppliers().get(this.getId());
      }
      StorageSupplier dataObject = editor.getOrCreateStorageSupplier(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f99: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand14
  declaration: 	"@Override
   public StorageSupplier run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageSuppliers().get(this.getId());
      }
      StorageSupplier dataObject = editor.getOrCreateStorageSupplier(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id100: 	Attribute
  clazz: 	storageSupply15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- items101: 	Attribute
  clazz: 	storageSupply15
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state102: 	Attribute
  clazz: 	storageSupply15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- supplier103: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageSupply15
  modified: 	false
  name: 	supplier
  other: 	deliveries94
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- product104: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storageSupply15
  modified: 	false
  name: 	product
  other: 	supplies87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- supplier105: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	supplier
  propertyStyle: 	POJO
  type: 	String

- product106: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- items107: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state108: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f109: 	FMethod
  clazz: 	haveSupplyCommand16
  declaration: 	"public boolean preCheck(StorageEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StorageSupply-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StorageSupply-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StorageSupply-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f110: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public StorageSupply run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageSupplys().get(this.getId());
      }
      StorageSupply dataObject = editor.getOrCreateStorageSupply(this.getId());
      StorageSupplier supplier = editor.getOrCreateStorageSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f111: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public StorageSupply run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageSupplys().get(this.getId());
      }
      StorageSupply dataObject = editor.getOrCreateStorageSupply(this.getId());
      StorageSupplier supplier = editor.getOrCreateStorageSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      StorageProduct product = editor.getOrCreateStorageProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f112: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public StorageSupply run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageSupplys().get(this.getId());
      }
      StorageSupply dataObject = editor.getOrCreateStorageSupply(this.getId());
      dataObject.setItems(this.getItems());
      StorageSupplier supplier = editor.getOrCreateStorageSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      StorageProduct product = editor.getOrCreateStorageProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f113: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public StorageSupply run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageSupplys().get(this.getId());
      }
      StorageSupply dataObject = editor.getOrCreateStorageSupply(this.getId());
      dataObject.setItems(this.getItems());
      dataObject.setState(this.getState());
      StorageSupplier supplier = editor.getOrCreateStorageSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      StorageProduct product = editor.getOrCreateStorageProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id114: 	Attribute
  clazz: 	storageCustomer17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name115: 	Attribute
  clazz: 	storageCustomer17
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address116: 	Attribute
  clazz: 	storageCustomer17
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name117: 	Attribute
  clazz: 	haveCustomerCommand18
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address118: 	Attribute
  clazz: 	haveCustomerCommand18
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f119: 	FMethod
  clazz: 	haveCustomerCommand18
  declaration: 	"public boolean preCheck(StorageEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StorageCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StorageCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StorageCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f120: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand18
  declaration: 	"@Override
   public StorageCustomer run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageCustomers().get(this.getId());
      }
      StorageCustomer dataObject = editor.getOrCreateStorageCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f121: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand18
  declaration: 	"@Override
   public StorageCustomer run(StorageEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStorageCustomers().get(this.getId());
      }
      StorageCustomer dataObject = editor.getOrCreateStorageCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

