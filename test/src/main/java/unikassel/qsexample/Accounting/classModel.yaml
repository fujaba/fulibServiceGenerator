- c1: 	ClassModel
  classes: 	accountingEditor2 	modelCommand3 	removeCommand4 	accountingService5 	commandStream6 	accountingApp7 	page8 	line9 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.qsexample.Accounting
  packageSrcFolder: 	"src/main/java/unikassel/qsexample/Accounting"

- accountingEditor2: 	Clazz
  attributes: 	activeCommands10 	removeCommands11 	commandListeners12 	isoDateFormat13 	lastTime14 	timeDelta15 	
  importList: 	null 	null 	null 	null 	
  methods: 	f16 	f17 	f18 	
  model: 	c1
  modified: 	false
  name: 	AccountingEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id19 	time20 	
  methods: 	f21 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName22 	
  importList: 	null 	null 	null 	
  methods: 	f23 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingService5: 	Clazz
  attributes: 	myPort24 	modelEditor25 	reflectorMap26 	currentSession27 	executor28 	sessionToAppMap29 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f30 	f31 	f32 	f33 	
  model: 	c1
  modified: 	false
  name: 	AccountingService
  propertyStyle: 	POJO
  roles: 	streams34 	

- commandStream6: 	Clazz
  attributes: 	targetUrl35 	activeCommands36 	
  importList: 	null 	null 	null 	null 	null 	
  methods: 	f37 	f38 	f39 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service40 	

- accountingApp7: 	Clazz
  attributes: 	modelEditor41 	id42 	description43 	
  methods: 	f44 	
  model: 	c1
  modified: 	false
  name: 	AccountingApp
  propertyStyle: 	POJO
  roles: 	content45 	

- page8: 	Clazz
  attributes: 	id46 	description47 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app48 	content49 	

- line9: 	Clazz
  attributes: 	id50 	description51 	action52 	value53 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page54 	

- activeCommands10: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands11: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners12: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat13: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime14: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta15: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- f16: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f17: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f18: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.qsexample.Accounting\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- id19: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time20: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f21: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(AccountingEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName22: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f23: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(AccountingEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort24: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor25: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	AccountingEditor

- reflectorMap26: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession27: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor28: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap29: 	Attribute
  clazz: 	accountingService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, AccountingApp>"

- f30: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new AccountingEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      try { port(myPort);} catch (Exception e) {};
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      get(\"/Accounting\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      post(\"/Accountingcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      // no streams

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Service is listening on port \" + myPort);
"
  modified: 	false

- f31: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f32: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         AccountingApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new AccountingApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Accounting\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f33: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      AccountingApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", AccountingEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- streams34: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingService5
  modified: 	false
  name: 	streams
  other: 	service40
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl35: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- activeCommands36: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f37: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);

      send();
"
  modified: 	false

- f38: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(yaml);
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f39: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- service40: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams34
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- modelEditor41: 	Attribute
  clazz: 	accountingApp7
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	AccountingEditor

- id42: 	Attribute
  clazz: 	accountingApp7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description43: 	Attribute
  clazz: 	accountingApp7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f44: 	FMethod
  clazz: 	accountingApp7
  declaration: 	"public AccountingApp init(AccountingEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Accounting App\");
      return this;
"
  modified: 	false

- content45: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingApp7
  modified: 	false
  name: 	content
  other: 	app48
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id46: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description47: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app48: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page8
  modified: 	false
  name: 	app
  other: 	content45
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content49: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page8
  modified: 	false
  name: 	content
  other: 	page54
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id50: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description51: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action52: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value53: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page54: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line9
  modified: 	false
  name: 	page
  other: 	content49
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

