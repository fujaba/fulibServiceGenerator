- c1: 	ClassModel
  classes: 	accountingEditor2 	modelCommand3 	removeCommand4 	accountingService5 	commandStream6 	addStreamCommand7 	accountingApp8 	page9 	line10 	accountingProduct11 	haveProductCommand12 	accountingSupplier13 	haveSupplierCommand14 	accountingSupply15 	haveSupplyCommand16 	accountingCustomer17 	haveCustomerCommand18 	addSupply19 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.qsexample.Accounting
  packageSrcFolder: 	"src/main/java/unikassel/qsexample/Accounting"

- accountingEditor2: 	Clazz
  attributes: 	activeCommands20 	removeCommands21 	commandListeners22 	isoDateFormat23 	lastTime24 	timeDelta25 	accountingProducts26 	accountingSuppliers27 	accountingSupplys28 	accountingCustomers29 	
  importList: 	null 	null 	null 	null 	
  methods: 	f30 	f31 	f32 	f33 	f34 	f35 	f36 	f37 	
  model: 	c1
  modified: 	false
  name: 	AccountingEditor
  propertyStyle: 	POJO
  roles: 	service38 	

- modelCommand3: 	Clazz
  attributes: 	id39 	time40 	
  methods: 	f41 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	haveProductCommand12 	haveSupplierCommand14 	haveSupplyCommand16 	haveCustomerCommand18 	addSupply19 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName42 	
  importList: 	null 	null 	null 	
  methods: 	f43 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingService5: 	Clazz
  attributes: 	myPort44 	reflectorMap45 	currentSession46 	executor47 	spark48 	sessionToAppMap49 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f50 	f51 	f52 	f53 	f54 	f55 	f56 	
  model: 	c1
  modified: 	false
  name: 	AccountingService
  propertyStyle: 	POJO
  roles: 	modelEditor57 	streams58 	

- commandStream6: 	Clazz
  attributes: 	targetUrl59 	oldCommands60 	activeCommands61 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f62 	f63 	f64 	f65 	f66 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service67 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute68 	outgoingUrl69 	commandList70 	
  methods: 	f71 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingApp8: 	Clazz
  attributes: 	modelEditor72 	id73 	description74 	
  methods: 	f75 	
  model: 	c1
  modified: 	false
  name: 	AccountingApp
  propertyStyle: 	POJO
  roles: 	content76 	

- page9: 	Clazz
  attributes: 	id77 	description78 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app79 	content80 	

- line10: 	Clazz
  attributes: 	id81 	description82 	action83 	value84 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page85 	

- accountingProduct11: 	Clazz
  attributes: 	id86 	description87 	
  model: 	c1
  modified: 	false
  name: 	AccountingProduct
  propertyStyle: 	POJO
  roles: 	supplies88 	

- haveProductCommand12: 	Clazz
  attributes: 	description89 	
  methods: 	f90 	f91 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingSupplier13: 	Clazz
  attributes: 	id92 	name93 	address94 	
  model: 	c1
  modified: 	false
  name: 	AccountingSupplier
  propertyStyle: 	POJO
  roles: 	deliveries95 	

- haveSupplierCommand14: 	Clazz
  attributes: 	name96 	address97 	
  methods: 	f98 	f99 	f100 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplierCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingSupply15: 	Clazz
  attributes: 	id101 	items102 	state103 	
  model: 	c1
  modified: 	false
  name: 	AccountingSupply
  propertyStyle: 	POJO
  roles: 	supplier104 	product105 	

- haveSupplyCommand16: 	Clazz
  attributes: 	supplier106 	product107 	items108 	state109 	
  methods: 	f110 	f111 	f112 	f113 	f114 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplyCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingCustomer17: 	Clazz
  attributes: 	id115 	name116 	address117 	
  model: 	c1
  modified: 	false
  name: 	AccountingCustomer
  propertyStyle: 	POJO

- haveCustomerCommand18: 	Clazz
  attributes: 	name118 	address119 	
  methods: 	f120 	f121 	f122 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addSupply19: 	Clazz
  attributes: 	supplier123 	product124 	items125 	_app126 	
  model: 	c1
  modified: 	false
  name: 	AddSupply
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands20: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands21: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners22: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat23: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime24: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta25: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- accountingProducts26: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingProduct>"

- accountingSuppliers27: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingSuppliers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingSupplier>"

- accountingSupplys28: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingSupplys
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingSupply>"

- accountingCustomers29: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingCustomer>"

- f30: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f32: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f33: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.qsexample.Accounting\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f34: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingProduct getOrCreateAccountingProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingProduct oldObject = this.getAccountingProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingProduct newObject = new AccountingProduct();
      newObject.setId(id);
      this.getAccountingProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingSupplier getOrCreateAccountingSupplier(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingSupplier oldObject = this.getAccountingSuppliers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingSupplier newObject = new AccountingSupplier();
      newObject.setId(id);
      this.getAccountingSuppliers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingSupply getOrCreateAccountingSupply(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingSupply oldObject = this.getAccountingSupplys().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingSupply newObject = new AccountingSupply();
      newObject.setId(id);
      this.getAccountingSupplys().put(id, newObject);
      return newObject;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingCustomer getOrCreateAccountingCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingCustomer oldObject = this.getAccountingCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingCustomer newObject = new AccountingCustomer();
      newObject.setId(id);
      this.getAccountingCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- service38: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingEditor2
  modified: 	false
  name: 	service
  other: 	modelEditor57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id39: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time40: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f41: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(AccountingEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName42: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f43: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(AccountingEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort44: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap45: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession46: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor47: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark48: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap49: 	Attribute
  clazz: 	accountingService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, AccountingApp>"

- f50: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new AccountingEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Accounting\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Accountingcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Accounting Service is listening on port \" + myPort);
"
  modified: 	false

- f51: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f52: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         AccountingApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new AccountingApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Accounting\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f53: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      AccountingApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", AccountingEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f54: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public CommandStream addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;
"
  modified: 	false

- f55: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f56: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public void connectTo(String sourceServiceName, String sourceUrl, String targetServiceName, String targetUrl, String... commandList)"
  methodBody: 	"      String incommingRoute = targetServiceName + \"To\" + sourceServiceName;
      String incommingURL = sourceUrl + \"/\" + incommingRoute;
      String outgoingRoute = sourceServiceName + \"To\" + targetServiceName;
      String outgoingURL = targetUrl + \"/\" + outgoingRoute;
      ArrayList<String> sourceCommands = new ArrayList<>();
      ArrayList<String> targetCommands = new ArrayList<>();

      ArrayList<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if (\"<->\".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(\" \", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + \"/connect\");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- modelEditor57: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingService5
  modified: 	false
  name: 	modelEditor
  other: 	service38
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams58: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingService5
  modified: 	false
  name: 	streams
  other: 	service67
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl59: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands60: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands61: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f62: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f63: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(content.toString());
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f64: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f65: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, AccountingService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f66: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service67: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams58
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute68: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl69: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- commandList70: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	commandList
  propertyStyle: 	POJO
  type: 	String

- f71: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(AccountingEditor editor)"
  methodBody: 	"      String[] split = commandList.split(\" \");
      editor.getService().addStream(incommingRoute, outgoingUrl, split);
      return null;
"
  modified: 	false

- modelEditor72: 	Attribute
  clazz: 	accountingApp8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	AccountingEditor

- id73: 	Attribute
  clazz: 	accountingApp8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description74: 	Attribute
  clazz: 	accountingApp8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f75: 	FMethod
  clazz: 	accountingApp8
  declaration: 	"public AccountingApp init(AccountingEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Accounting App\");
      return this;
"
  modified: 	false

- content76: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingApp8
  modified: 	false
  name: 	content
  other: 	app79
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id77: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description78: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app79: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content80: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page85
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id81: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description82: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action83: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value84: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page85: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content80
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id86: 	Attribute
  clazz: 	accountingProduct11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description87: 	Attribute
  clazz: 	accountingProduct11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- supplies88: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingProduct11
  modified: 	false
  name: 	supplies
  other: 	product105
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description89: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f90: 	FMethod
  clazz: 	haveProductCommand12
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f91: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public AccountingProduct run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingProducts().get(this.getId());
      }
      AccountingProduct dataObject = editor.getOrCreateAccountingProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id92: 	Attribute
  clazz: 	accountingSupplier13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name93: 	Attribute
  clazz: 	accountingSupplier13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address94: 	Attribute
  clazz: 	accountingSupplier13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- deliveries95: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingSupplier13
  modified: 	false
  name: 	deliveries
  other: 	supplier104
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name96: 	Attribute
  clazz: 	haveSupplierCommand14
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address97: 	Attribute
  clazz: 	haveSupplierCommand14
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f98: 	FMethod
  clazz: 	haveSupplierCommand14
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingSupplier-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingSupplier-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingSupplier-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f99: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand14
  declaration: 	"@Override
   public AccountingSupplier run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSuppliers().get(this.getId());
      }
      AccountingSupplier dataObject = editor.getOrCreateAccountingSupplier(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand14
  declaration: 	"@Override
   public AccountingSupplier run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSuppliers().get(this.getId());
      }
      AccountingSupplier dataObject = editor.getOrCreateAccountingSupplier(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id101: 	Attribute
  clazz: 	accountingSupply15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- items102: 	Attribute
  clazz: 	accountingSupply15
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state103: 	Attribute
  clazz: 	accountingSupply15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- supplier104: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingSupply15
  modified: 	false
  name: 	supplier
  other: 	deliveries95
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- product105: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingSupply15
  modified: 	false
  name: 	product
  other: 	supplies88
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- supplier106: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	supplier
  propertyStyle: 	POJO
  type: 	String

- product107: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- items108: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state109: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f110: 	FMethod
  clazz: 	haveSupplyCommand16
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingSupply-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingSupply-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingSupply-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f111: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f112: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      AccountingProduct product = editor.getOrCreateAccountingProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f113: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      dataObject.setItems(this.getItems());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      AccountingProduct product = editor.getOrCreateAccountingProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f114: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      dataObject.setItems(this.getItems());
      dataObject.setState(this.getState());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      AccountingProduct product = editor.getOrCreateAccountingProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id115: 	Attribute
  clazz: 	accountingCustomer17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name116: 	Attribute
  clazz: 	accountingCustomer17
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address117: 	Attribute
  clazz: 	accountingCustomer17
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name118: 	Attribute
  clazz: 	haveCustomerCommand18
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address119: 	Attribute
  clazz: 	haveCustomerCommand18
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f120: 	FMethod
  clazz: 	haveCustomerCommand18
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f121: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand18
  declaration: 	"@Override
   public AccountingCustomer run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingCustomers().get(this.getId());
      }
      AccountingCustomer dataObject = editor.getOrCreateAccountingCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand18
  declaration: 	"@Override
   public AccountingCustomer run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingCustomers().get(this.getId());
      }
      AccountingCustomer dataObject = editor.getOrCreateAccountingCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- supplier123: 	Attribute
  clazz: 	addSupply19
  modified: 	false
  name: 	supplier
  propertyStyle: 	POJO
  type: 	String

- product124: 	Attribute
  clazz: 	addSupply19
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- items125: 	Attribute
  clazz: 	addSupply19
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	String

- _app126: 	Attribute
  clazz: 	addSupply19
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	AccountingApp

