- c1: 	ClassModel
  classes: 	accountingEditor2 	modelCommand3 	removeCommand4 	accountingService5 	commandStream6 	accountingApp7 	page8 	line9 	accountingProduct10 	haveProductCommand11 	accountingSupplier12 	haveSupplierCommand13 	accountingSupply14 	haveSupplyCommand15 	accountingCustomer16 	haveCustomerCommand17 	addSupply18 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.qsexample.Accounting
  packageSrcFolder: 	"src/main/java/unikassel/qsexample/Accounting"

- accountingEditor2: 	Clazz
  attributes: 	activeCommands19 	removeCommands20 	commandListeners21 	isoDateFormat22 	lastTime23 	timeDelta24 	accountingProducts25 	accountingSuppliers26 	accountingSupplys27 	accountingCustomers28 	
  importList: 	null 	null 	null 	null 	
  methods: 	f29 	f30 	f31 	f32 	f33 	f34 	f35 	f36 	
  model: 	c1
  modified: 	false
  name: 	AccountingEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id37 	time38 	
  methods: 	f39 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand11 	haveSupplierCommand13 	haveSupplyCommand15 	haveCustomerCommand17 	addSupply18 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName40 	
  importList: 	null 	null 	null 	
  methods: 	f41 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingService5: 	Clazz
  attributes: 	myPort42 	modelEditor43 	reflectorMap44 	currentSession45 	executor46 	spark47 	sessionToAppMap48 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f49 	f50 	f51 	f52 	f53 	
  model: 	c1
  modified: 	false
  name: 	AccountingService
  propertyStyle: 	POJO
  roles: 	streams54 	

- commandStream6: 	Clazz
  attributes: 	targetUrl55 	oldCommands56 	activeCommands57 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f58 	f59 	f60 	f61 	f62 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service63 	

- accountingApp7: 	Clazz
  attributes: 	modelEditor64 	id65 	description66 	
  methods: 	f67 	
  model: 	c1
  modified: 	false
  name: 	AccountingApp
  propertyStyle: 	POJO
  roles: 	content68 	

- page8: 	Clazz
  attributes: 	id69 	description70 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app71 	content72 	

- line9: 	Clazz
  attributes: 	id73 	description74 	action75 	value76 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page77 	

- accountingProduct10: 	Clazz
  attributes: 	id78 	description79 	
  model: 	c1
  modified: 	false
  name: 	AccountingProduct
  propertyStyle: 	POJO
  roles: 	supplies80 	

- haveProductCommand11: 	Clazz
  attributes: 	description81 	
  methods: 	f82 	f83 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingSupplier12: 	Clazz
  attributes: 	id84 	name85 	address86 	
  model: 	c1
  modified: 	false
  name: 	AccountingSupplier
  propertyStyle: 	POJO
  roles: 	deliveries87 	

- haveSupplierCommand13: 	Clazz
  attributes: 	name88 	address89 	
  methods: 	f90 	f91 	f92 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplierCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingSupply14: 	Clazz
  attributes: 	id93 	items94 	state95 	
  model: 	c1
  modified: 	false
  name: 	AccountingSupply
  propertyStyle: 	POJO
  roles: 	supplier96 	product97 	

- haveSupplyCommand15: 	Clazz
  attributes: 	supplier98 	product99 	items100 	state101 	
  methods: 	f102 	f103 	f104 	f105 	f106 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplyCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- accountingCustomer16: 	Clazz
  attributes: 	id107 	name108 	address109 	
  model: 	c1
  modified: 	false
  name: 	AccountingCustomer
  propertyStyle: 	POJO

- haveCustomerCommand17: 	Clazz
  attributes: 	name110 	address111 	
  methods: 	f112 	f113 	f114 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addSupply18: 	Clazz
  attributes: 	supplier115 	product116 	items117 	_app118 	
  model: 	c1
  modified: 	false
  name: 	AddSupply
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands19: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands20: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners21: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat22: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime23: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta24: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- accountingProducts25: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingProduct>"

- accountingSuppliers26: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingSuppliers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingSupplier>"

- accountingSupplys27: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingSupplys
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingSupply>"

- accountingCustomers28: 	Attribute
  clazz: 	accountingEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	accountingCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, AccountingCustomer>"

- f29: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f30: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f31: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f32: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.qsexample.Accounting\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f33: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingProduct getOrCreateAccountingProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingProduct oldObject = this.getAccountingProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingProduct newObject = new AccountingProduct();
      newObject.setId(id);
      this.getAccountingProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f34: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingSupplier getOrCreateAccountingSupplier(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingSupplier oldObject = this.getAccountingSuppliers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingSupplier newObject = new AccountingSupplier();
      newObject.setId(id);
      this.getAccountingSuppliers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingSupply getOrCreateAccountingSupply(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingSupply oldObject = this.getAccountingSupplys().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingSupply newObject = new AccountingSupply();
      newObject.setId(id);
      this.getAccountingSupplys().put(id, newObject);
      return newObject;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	accountingEditor2
  declaration: 	"public AccountingCustomer getOrCreateAccountingCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      AccountingCustomer oldObject = this.getAccountingCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      AccountingCustomer newObject = new AccountingCustomer();
      newObject.setId(id);
      this.getAccountingCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- id37: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time38: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f39: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(AccountingEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName40: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f41: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(AccountingEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort42: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor43: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	AccountingEditor

- reflectorMap44: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession45: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor46: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark47: 	Attribute
  clazz: 	accountingService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap48: 	Attribute
  clazz: 	accountingService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, AccountingApp>"

- f49: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new AccountingEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Accounting\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Accountingcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Accounting Service is listening on port \" + myPort);
"
  modified: 	false

- f50: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f51: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         AccountingApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new AccountingApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Accounting\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f52: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      AccountingApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", AccountingEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- f53: 	FMethod
  clazz: 	accountingService5
  declaration: 	"public void addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
"
  modified: 	false

- streams54: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingService5
  modified: 	false
  name: 	streams
  other: 	service63
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl55: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands56: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands57: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f58: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f59: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(yaml);
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f60: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f61: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, AccountingService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f62: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service63: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams54
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- modelEditor64: 	Attribute
  clazz: 	accountingApp7
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	AccountingEditor

- id65: 	Attribute
  clazz: 	accountingApp7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description66: 	Attribute
  clazz: 	accountingApp7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f67: 	FMethod
  clazz: 	accountingApp7
  declaration: 	"public AccountingApp init(AccountingEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Accounting App\");
      return this;
"
  modified: 	false

- content68: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingApp7
  modified: 	false
  name: 	content
  other: 	app71
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id69: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description70: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app71: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page8
  modified: 	false
  name: 	app
  other: 	content68
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content72: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page8
  modified: 	false
  name: 	content
  other: 	page77
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id73: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description74: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action75: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value76: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page77: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line9
  modified: 	false
  name: 	page
  other: 	content72
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id78: 	Attribute
  clazz: 	accountingProduct10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description79: 	Attribute
  clazz: 	accountingProduct10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- supplies80: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingProduct10
  modified: 	false
  name: 	supplies
  other: 	product97
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description81: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f82: 	FMethod
  clazz: 	haveProductCommand11
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f83: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public AccountingProduct run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingProducts().get(this.getId());
      }
      AccountingProduct dataObject = editor.getOrCreateAccountingProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id84: 	Attribute
  clazz: 	accountingSupplier12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name85: 	Attribute
  clazz: 	accountingSupplier12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address86: 	Attribute
  clazz: 	accountingSupplier12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- deliveries87: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	accountingSupplier12
  modified: 	false
  name: 	deliveries
  other: 	supplier96
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name88: 	Attribute
  clazz: 	haveSupplierCommand13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address89: 	Attribute
  clazz: 	haveSupplierCommand13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f90: 	FMethod
  clazz: 	haveSupplierCommand13
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingSupplier-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingSupplier-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingSupplier-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f91: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand13
  declaration: 	"@Override
   public AccountingSupplier run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSuppliers().get(this.getId());
      }
      AccountingSupplier dataObject = editor.getOrCreateAccountingSupplier(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f92: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand13
  declaration: 	"@Override
   public AccountingSupplier run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSuppliers().get(this.getId());
      }
      AccountingSupplier dataObject = editor.getOrCreateAccountingSupplier(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id93: 	Attribute
  clazz: 	accountingSupply14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- items94: 	Attribute
  clazz: 	accountingSupply14
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state95: 	Attribute
  clazz: 	accountingSupply14
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- supplier96: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingSupply14
  modified: 	false
  name: 	supplier
  other: 	deliveries87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- product97: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	accountingSupply14
  modified: 	false
  name: 	product
  other: 	supplies80
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- supplier98: 	Attribute
  clazz: 	haveSupplyCommand15
  modified: 	false
  name: 	supplier
  propertyStyle: 	POJO
  type: 	String

- product99: 	Attribute
  clazz: 	haveSupplyCommand15
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- items100: 	Attribute
  clazz: 	haveSupplyCommand15
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state101: 	Attribute
  clazz: 	haveSupplyCommand15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f102: 	FMethod
  clazz: 	haveSupplyCommand15
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingSupply-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingSupply-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingSupply-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f103: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand15
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f104: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand15
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      AccountingProduct product = editor.getOrCreateAccountingProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f105: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand15
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      dataObject.setItems(this.getItems());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      AccountingProduct product = editor.getOrCreateAccountingProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand15
  declaration: 	"@Override
   public AccountingSupply run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingSupplys().get(this.getId());
      }
      AccountingSupply dataObject = editor.getOrCreateAccountingSupply(this.getId());
      dataObject.setItems(this.getItems());
      dataObject.setState(this.getState());
      AccountingSupplier supplier = editor.getOrCreateAccountingSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      AccountingProduct product = editor.getOrCreateAccountingProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id107: 	Attribute
  clazz: 	accountingCustomer16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name108: 	Attribute
  clazz: 	accountingCustomer16
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address109: 	Attribute
  clazz: 	accountingCustomer16
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name110: 	Attribute
  clazz: 	haveCustomerCommand17
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address111: 	Attribute
  clazz: 	haveCustomerCommand17
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f112: 	FMethod
  clazz: 	haveCustomerCommand17
  declaration: 	"public boolean preCheck(AccountingEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AccountingCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AccountingCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AccountingCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f113: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand17
  declaration: 	"@Override
   public AccountingCustomer run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingCustomers().get(this.getId());
      }
      AccountingCustomer dataObject = editor.getOrCreateAccountingCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f114: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand17
  declaration: 	"@Override
   public AccountingCustomer run(AccountingEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getAccountingCustomers().get(this.getId());
      }
      AccountingCustomer dataObject = editor.getOrCreateAccountingCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- supplier115: 	Attribute
  clazz: 	addSupply18
  modified: 	false
  name: 	supplier
  propertyStyle: 	POJO
  type: 	String

- product116: 	Attribute
  clazz: 	addSupply18
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- items117: 	Attribute
  clazz: 	addSupply18
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	String

- _app118: 	Attribute
  clazz: 	addSupply18
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	AccountingApp

