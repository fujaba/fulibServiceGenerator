- c1: 	ClassModel
  classes: 	rampEditor2 	modelCommand3 	removeCommand4 	rampService5 	commandStream6 	addStreamCommand7 	rampApp8 	page9 	line10 	rampProduct11 	haveProductCommand12 	rampSupplier13 	haveSupplierCommand14 	rampSupply15 	haveSupplyCommand16 	rampCustomer17 	haveCustomerCommand18 	openAddPalette19 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.qsexample.Ramp
  packageSrcFolder: 	"src/main/java/unikassel/qsexample/Ramp"

- rampEditor2: 	Clazz
  attributes: 	activeCommands20 	removeCommands21 	commandListeners22 	isoDateFormat23 	lastTime24 	timeDelta25 	rampProducts26 	rampSuppliers27 	rampSupplys28 	rampCustomers29 	
  importList: 	null 	null 	null 	null 	
  methods: 	f30 	f31 	f32 	f33 	f34 	f35 	f36 	f37 	
  model: 	c1
  modified: 	false
  name: 	RampEditor
  propertyStyle: 	POJO
  roles: 	service38 	

- modelCommand3: 	Clazz
  attributes: 	id39 	time40 	
  methods: 	f41 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	haveProductCommand12 	haveSupplierCommand14 	haveSupplyCommand16 	haveCustomerCommand18 	openAddPalette19 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName42 	
  importList: 	null 	null 	null 	
  methods: 	f43 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- rampService5: 	Clazz
  attributes: 	myPort44 	reflectorMap45 	currentSession46 	executor47 	spark48 	sessionToAppMap49 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f50 	f51 	f52 	f53 	f54 	f55 	f56 	
  model: 	c1
  modified: 	false
  name: 	RampService
  propertyStyle: 	POJO
  roles: 	modelEditor57 	streams58 	

- commandStream6: 	Clazz
  attributes: 	targetUrl59 	oldCommands60 	activeCommands61 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f62 	f63 	f64 	f65 	f66 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service67 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute68 	outgoingUrl69 	commandList70 	
  methods: 	f71 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- rampApp8: 	Clazz
  attributes: 	modelEditor72 	id73 	description74 	supplyId75 	
  methods: 	f76 	
  model: 	c1
  modified: 	false
  name: 	RampApp
  propertyStyle: 	POJO
  roles: 	content77 	

- page9: 	Clazz
  attributes: 	id78 	description79 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app80 	content81 	

- line10: 	Clazz
  attributes: 	id82 	description83 	action84 	value85 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page86 	

- rampProduct11: 	Clazz
  attributes: 	id87 	description88 	
  model: 	c1
  modified: 	false
  name: 	RampProduct
  propertyStyle: 	POJO
  roles: 	supplies89 	

- haveProductCommand12: 	Clazz
  attributes: 	description90 	
  methods: 	f91 	f92 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- rampSupplier13: 	Clazz
  attributes: 	id93 	name94 	address95 	
  model: 	c1
  modified: 	false
  name: 	RampSupplier
  propertyStyle: 	POJO
  roles: 	deliveries96 	

- haveSupplierCommand14: 	Clazz
  attributes: 	name97 	address98 	
  methods: 	f99 	f100 	f101 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplierCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- rampSupply15: 	Clazz
  attributes: 	id102 	items103 	state104 	
  model: 	c1
  modified: 	false
  name: 	RampSupply
  propertyStyle: 	POJO
  roles: 	supplier105 	product106 	

- haveSupplyCommand16: 	Clazz
  attributes: 	supplier107 	product108 	items109 	state110 	
  methods: 	f111 	f112 	f113 	f114 	f115 	
  model: 	c1
  modified: 	false
  name: 	HaveSupplyCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- rampCustomer17: 	Clazz
  attributes: 	id116 	name117 	address118 	
  model: 	c1
  modified: 	false
  name: 	RampCustomer
  propertyStyle: 	POJO

- haveCustomerCommand18: 	Clazz
  attributes: 	name119 	address120 	
  methods: 	f121 	f122 	f123 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- openAddPalette19: 	Clazz
  attributes: 	supply124 	_app125 	
  model: 	c1
  modified: 	false
  name: 	OpenAddPalette
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands20: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands21: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners22: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat23: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime24: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta25: 	Attribute
  clazz: 	rampEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- rampProducts26: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	rampProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RampProduct>"

- rampSuppliers27: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	rampSuppliers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RampSupplier>"

- rampSupplys28: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	rampSupplys
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RampSupply>"

- rampCustomers29: 	Attribute
  clazz: 	rampEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	rampCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RampCustomer>"

- f30: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f31: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f32: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public RampEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f33: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.qsexample.Ramp\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f34: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public RampProduct getOrCreateRampProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      RampProduct oldObject = this.getRampProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      RampProduct newObject = new RampProduct();
      newObject.setId(id);
      this.getRampProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public RampSupplier getOrCreateRampSupplier(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      RampSupplier oldObject = this.getRampSuppliers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      RampSupplier newObject = new RampSupplier();
      newObject.setId(id);
      this.getRampSuppliers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public RampSupply getOrCreateRampSupply(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      RampSupply oldObject = this.getRampSupplys().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      RampSupply newObject = new RampSupply();
      newObject.setId(id);
      this.getRampSupplys().put(id, newObject);
      return newObject;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	rampEditor2
  declaration: 	"public RampCustomer getOrCreateRampCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      RampCustomer oldObject = this.getRampCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      RampCustomer newObject = new RampCustomer();
      newObject.setId(id);
      this.getRampCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- service38: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	rampEditor2
  modified: 	false
  name: 	service
  other: 	modelEditor57
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id39: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time40: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f41: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(RampEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName42: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f43: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(RampEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort44: 	Attribute
  clazz: 	rampService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap45: 	Attribute
  clazz: 	rampService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession46: 	Attribute
  clazz: 	rampService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor47: 	Attribute
  clazz: 	rampService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark48: 	Attribute
  clazz: 	rampService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap49: 	Attribute
  clazz: 	rampService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, RampApp>"

- f50: 	FMethod
  clazz: 	rampService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new RampEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Ramp\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Rampcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Ramp Service is listening on port \" + myPort);
"
  modified: 	false

- f51: 	FMethod
  clazz: 	rampService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f52: 	FMethod
  clazz: 	rampService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         RampApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new RampApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Ramp\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f53: 	FMethod
  clazz: 	rampService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      RampApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", RampEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f54: 	FMethod
  clazz: 	rampService5
  declaration: 	"public CommandStream addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;
"
  modified: 	false

- f55: 	FMethod
  clazz: 	rampService5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f56: 	FMethod
  clazz: 	rampService5
  declaration: 	"public void connectTo(String sourceServiceName, String sourceUrl, String targetServiceName, String targetUrl, String... commandList)"
  methodBody: 	"      String incommingRoute = targetServiceName + \"To\" + sourceServiceName;
      String incommingURL = sourceUrl + \"/\" + incommingRoute;
      String outgoingRoute = sourceServiceName + \"To\" + targetServiceName;
      String outgoingURL = targetUrl + \"/\" + outgoingRoute;
      ArrayList<String> sourceCommands = new ArrayList<>();
      ArrayList<String> targetCommands = new ArrayList<>();

      ArrayList<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if (\"<->\".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(\" \", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + \"/connect\");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- modelEditor57: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	rampService5
  modified: 	false
  name: 	modelEditor
  other: 	service38
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams58: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	rampService5
  modified: 	false
  name: 	streams
  other: 	service67
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl59: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands60: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands61: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f62: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f63: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(content.toString());
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f64: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f65: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, RampService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f66: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service67: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams58
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute68: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl69: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- commandList70: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	commandList
  propertyStyle: 	POJO
  type: 	String

- f71: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(RampEditor editor)"
  methodBody: 	"      String[] split = commandList.split(\" \");
      editor.getService().addStream(incommingRoute, outgoingUrl, split);
      return null;
"
  modified: 	false

- modelEditor72: 	Attribute
  clazz: 	rampApp8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	RampEditor

- id73: 	Attribute
  clazz: 	rampApp8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description74: 	Attribute
  clazz: 	rampApp8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- supplyId75: 	Attribute
  clazz: 	rampApp8
  modified: 	false
  name: 	supplyId
  propertyStyle: 	POJO
  type: 	String

- f76: 	FMethod
  clazz: 	rampApp8
  declaration: 	"public RampApp init(RampEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Ramp App\");
      return this;
"
  modified: 	false

- content77: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	rampApp8
  modified: 	false
  name: 	content
  other: 	app80
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id78: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description79: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app80: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content77
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content81: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page86
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id82: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description83: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action84: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value85: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page86: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content81
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id87: 	Attribute
  clazz: 	rampProduct11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description88: 	Attribute
  clazz: 	rampProduct11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- supplies89: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	rampProduct11
  modified: 	false
  name: 	supplies
  other: 	product106
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description90: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f91: 	FMethod
  clazz: 	haveProductCommand12
  declaration: 	"public boolean preCheck(RampEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RampProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RampProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RampProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f92: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public RampProduct run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampProducts().get(this.getId());
      }
      RampProduct dataObject = editor.getOrCreateRampProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id93: 	Attribute
  clazz: 	rampSupplier13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name94: 	Attribute
  clazz: 	rampSupplier13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address95: 	Attribute
  clazz: 	rampSupplier13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- deliveries96: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	rampSupplier13
  modified: 	false
  name: 	deliveries
  other: 	supplier105
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name97: 	Attribute
  clazz: 	haveSupplierCommand14
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address98: 	Attribute
  clazz: 	haveSupplierCommand14
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f99: 	FMethod
  clazz: 	haveSupplierCommand14
  declaration: 	"public boolean preCheck(RampEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RampSupplier-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RampSupplier-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RampSupplier-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand14
  declaration: 	"@Override
   public RampSupplier run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampSuppliers().get(this.getId());
      }
      RampSupplier dataObject = editor.getOrCreateRampSupplier(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f101: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplierCommand14
  declaration: 	"@Override
   public RampSupplier run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampSuppliers().get(this.getId());
      }
      RampSupplier dataObject = editor.getOrCreateRampSupplier(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id102: 	Attribute
  clazz: 	rampSupply15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- items103: 	Attribute
  clazz: 	rampSupply15
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state104: 	Attribute
  clazz: 	rampSupply15
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- supplier105: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	rampSupply15
  modified: 	false
  name: 	supplier
  other: 	deliveries96
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- product106: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	rampSupply15
  modified: 	false
  name: 	product
  other: 	supplies89
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- supplier107: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	supplier
  propertyStyle: 	POJO
  type: 	String

- product108: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- items109: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- state110: 	Attribute
  clazz: 	haveSupplyCommand16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f111: 	FMethod
  clazz: 	haveSupplyCommand16
  declaration: 	"public boolean preCheck(RampEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RampSupply-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RampSupply-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RampSupply-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f112: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public RampSupply run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampSupplys().get(this.getId());
      }
      RampSupply dataObject = editor.getOrCreateRampSupply(this.getId());
      RampSupplier supplier = editor.getOrCreateRampSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f113: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public RampSupply run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampSupplys().get(this.getId());
      }
      RampSupply dataObject = editor.getOrCreateRampSupply(this.getId());
      RampSupplier supplier = editor.getOrCreateRampSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      RampProduct product = editor.getOrCreateRampProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f114: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public RampSupply run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampSupplys().get(this.getId());
      }
      RampSupply dataObject = editor.getOrCreateRampSupply(this.getId());
      dataObject.setItems(this.getItems());
      RampSupplier supplier = editor.getOrCreateRampSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      RampProduct product = editor.getOrCreateRampProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f115: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveSupplyCommand16
  declaration: 	"@Override
   public RampSupply run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampSupplys().get(this.getId());
      }
      RampSupply dataObject = editor.getOrCreateRampSupply(this.getId());
      dataObject.setItems(this.getItems());
      dataObject.setState(this.getState());
      RampSupplier supplier = editor.getOrCreateRampSupplier(this.getSupplier());
      dataObject.setSupplier(supplier);
      RampProduct product = editor.getOrCreateRampProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id116: 	Attribute
  clazz: 	rampCustomer17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name117: 	Attribute
  clazz: 	rampCustomer17
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address118: 	Attribute
  clazz: 	rampCustomer17
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- name119: 	Attribute
  clazz: 	haveCustomerCommand18
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address120: 	Attribute
  clazz: 	haveCustomerCommand18
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f121: 	FMethod
  clazz: 	haveCustomerCommand18
  declaration: 	"public boolean preCheck(RampEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RampCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RampCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RampCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand18
  declaration: 	"@Override
   public RampCustomer run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampCustomers().get(this.getId());
      }
      RampCustomer dataObject = editor.getOrCreateRampCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f123: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand18
  declaration: 	"@Override
   public RampCustomer run(RampEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getRampCustomers().get(this.getId());
      }
      RampCustomer dataObject = editor.getOrCreateRampCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- supply124: 	Attribute
  clazz: 	openAddPalette19
  modified: 	false
  name: 	supply
  propertyStyle: 	POJO
  type: 	String

- _app125: 	Attribute
  clazz: 	openAddPalette19
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	RampApp

