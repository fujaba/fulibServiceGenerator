- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	storeService5 	commandStream6 	addStreamCommand7 	storeApp8 	page9 	line10 	storeProduct11 	haveProductCommand12 	storeCustomer13 	haveCustomerCommand14 	storeOffer15 	haveOfferCommand16 	storeOrder17 	haveOrderCommand18 	storeOrderPosition19 	haveOrderPositionCommand20 	haveCustomerProductsLink21 	removeCustomerProductsLink22 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.websystem.Store
  packageSrcFolder: 	"src/main/java/unikassel/websystem/Store"

- storeEditor2: 	Clazz
  attributes: 	activeCommands23 	removeCommands24 	commandListeners25 	isoDateFormat26 	lastTime27 	timeDelta28 	storeProducts29 	storeCustomers30 	storeOffers31 	storeOrders32 	storeOrderPositions33 	
  importList: 	null 	null 	null 	null 	
  methods: 	f34 	f35 	f36 	f37 	f38 	f39 	f40 	f41 	f42 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO
  roles: 	service43 	

- modelCommand3: 	Clazz
  attributes: 	id44 	time45 	
  methods: 	f46 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	haveProductCommand12 	haveCustomerCommand14 	haveOfferCommand16 	haveOrderCommand18 	haveOrderPositionCommand20 	haveCustomerProductsLink21 	removeCustomerProductsLink22 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName47 	
  importList: 	null 	null 	null 	
  methods: 	f48 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeService5: 	Clazz
  attributes: 	myPort49 	reflectorMap50 	currentSession51 	executor52 	spark53 	sessionToAppMap54 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f55 	f56 	f57 	f58 	f59 	f60 	f61 	
  model: 	c1
  modified: 	false
  name: 	StoreService
  propertyStyle: 	POJO
  roles: 	modelEditor62 	streams63 	

- commandStream6: 	Clazz
  attributes: 	targetUrl64 	oldCommands65 	activeCommands66 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f67 	f68 	f69 	f70 	f71 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service72 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute73 	outgoingUrl74 	commandList75 	
  methods: 	f76 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeApp8: 	Clazz
  attributes: 	modelEditor77 	id78 	description79 	
  methods: 	f80 	
  model: 	c1
  modified: 	false
  name: 	StoreApp
  propertyStyle: 	POJO
  roles: 	content81 	

- page9: 	Clazz
  attributes: 	id82 	description83 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app84 	content85 	

- line10: 	Clazz
  attributes: 	id86 	description87 	action88 	value89 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page90 	

- storeProduct11: 	Clazz
  attributes: 	id91 	description92 	items93 	
  model: 	c1
  modified: 	false
  name: 	StoreProduct
  propertyStyle: 	POJO
  roles: 	offers94 	customers95 	

- haveProductCommand12: 	Clazz
  attributes: 	description96 	items97 	
  methods: 	f98 	f99 	f100 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeCustomer13: 	Clazz
  attributes: 	id101 	name102 	address103 	
  model: 	c1
  modified: 	false
  name: 	StoreCustomer
  propertyStyle: 	POJO
  roles: 	orders104 	products105 	

- haveCustomerCommand14: 	Clazz
  attributes: 	name106 	address107 	
  methods: 	f108 	f109 	f110 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOffer15: 	Clazz
  attributes: 	id111 	price112 	startTime113 	endTime114 	
  model: 	c1
  modified: 	false
  name: 	StoreOffer
  propertyStyle: 	POJO
  roles: 	product115 	orders116 	

- haveOfferCommand16: 	Clazz
  attributes: 	price117 	product118 	startTime119 	endTime120 	
  methods: 	f121 	f122 	f123 	f124 	f125 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrder17: 	Clazz
  attributes: 	id126 	date127 	state128 	
  model: 	c1
  modified: 	false
  name: 	StoreOrder
  propertyStyle: 	POJO
  roles: 	customer129 	positions130 	

- haveOrderCommand18: 	Clazz
  attributes: 	customer131 	date132 	state133 	
  methods: 	f134 	f135 	f136 	f137 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrderPosition19: 	Clazz
  attributes: 	id138 	amount139 	state140 	
  model: 	c1
  modified: 	false
  name: 	StoreOrderPosition
  propertyStyle: 	POJO
  roles: 	order141 	offer142 	

- haveOrderPositionCommand20: 	Clazz
  attributes: 	order143 	offer144 	amount145 	state146 	
  methods: 	f147 	f148 	f149 	f150 	f151 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink21: 	Clazz
  attributes: 	source152 	target153 	
  methods: 	f154 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink22: 	Clazz
  attributes: 	source155 	target156 	
  methods: 	f157 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands23: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands24: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners25: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat26: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime27: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta28: 	Attribute
  clazz: 	storeEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- storeProducts29: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreProduct>"

- storeCustomers30: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreCustomer>"

- storeOffers31: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOffer>"

- storeOrders32: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrder>"

- storeOrderPositions33: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrderPosition>"

- f34: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f35: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f36: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Store\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f38: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreProduct getOrCreateStoreProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreProduct oldObject = this.getStoreProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreProduct newObject = new StoreProduct();
      newObject.setId(id);
      this.getStoreProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f39: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreCustomer getOrCreateStoreCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreCustomer oldObject = this.getStoreCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreCustomer newObject = new StoreCustomer();
      newObject.setId(id);
      this.getStoreCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f40: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOffer getOrCreateStoreOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreOffer oldObject = this.getStoreOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOffer newObject = new StoreOffer();
      newObject.setId(id);
      this.getStoreOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f41: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrder getOrCreateStoreOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreOrder oldObject = this.getStoreOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrder newObject = new StoreOrder();
      newObject.setId(id);
      this.getStoreOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f42: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrderPosition getOrCreateStoreOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreOrderPosition oldObject = this.getStoreOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrderPosition newObject = new StoreOrderPosition();
      newObject.setId(id);
      this.getStoreOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- service43: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeEditor2
  modified: 	false
  name: 	service
  other: 	modelEditor62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id44: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time45: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f46: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName47: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f48: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort49: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap50: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession51: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor52: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark53: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap54: 	Attribute
  clazz: 	storeService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, StoreApp>"

- f55: 	FMethod
  clazz: 	storeService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new StoreEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Store\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Storecmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Service is listening on port \" + myPort);
"
  modified: 	false

- f56: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f57: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         StoreApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new StoreApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Store\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f58: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      StoreApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", StoreEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f59: 	FMethod
  clazz: 	storeService5
  declaration: 	"public CommandStream addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;
"
  modified: 	false

- f60: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f61: 	FMethod
  clazz: 	storeService5
  declaration: 	"public void connectTo(String sourceServiceName, String sourceUrl, String targetServiceName, String targetUrl, String... commandList)"
  methodBody: 	"      String incommingRoute = targetServiceName + \"To\" + sourceServiceName;
      String incommingURL = sourceUrl + \"/\" + incommingRoute;
      String outgoingRoute = sourceServiceName + \"To\" + targetServiceName;
      String outgoingURL = targetUrl + \"/\" + outgoingRoute;
      ArrayList<String> sourceCommands = new ArrayList<>();
      ArrayList<String> targetCommands = new ArrayList<>();

      ArrayList<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if (\"<->\".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(\" \", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + \"/connect\");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- modelEditor62: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeService5
  modified: 	false
  name: 	modelEditor
  other: 	service43
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams63: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeService5
  modified: 	false
  name: 	streams
  other: 	service72
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl64: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands65: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands66: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f67: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f68: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(content.toString());
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f69: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f70: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, StoreService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f71: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service72: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams63
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute73: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl74: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- commandList75: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	commandList
  propertyStyle: 	POJO
  type: 	String

- f76: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(StoreEditor editor)"
  methodBody: 	"      String[] split = commandList.split(\" \");
      editor.getService().addStream(incommingRoute, outgoingUrl, split);
      return null;
"
  modified: 	false

- modelEditor77: 	Attribute
  clazz: 	storeApp8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	StoreEditor

- id78: 	Attribute
  clazz: 	storeApp8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description79: 	Attribute
  clazz: 	storeApp8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f80: 	FMethod
  clazz: 	storeApp8
  declaration: 	"public StoreApp init(StoreEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Store App\");
      return this;
"
  modified: 	false

- content81: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeApp8
  modified: 	false
  name: 	content
  other: 	app84
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id82: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description83: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app84: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content81
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content85: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page90
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id86: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description87: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action88: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value89: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page90: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content85
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id91: 	Attribute
  clazz: 	storeProduct11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description92: 	Attribute
  clazz: 	storeProduct11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items93: 	Attribute
  clazz: 	storeProduct11
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers94: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct11
  modified: 	false
  name: 	offers
  other: 	product115
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers95: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct11
  modified: 	false
  name: 	customers
  other: 	products105
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description96: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items97: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f98: 	FMethod
  clazz: 	haveProductCommand12
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f99: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id101: 	Attribute
  clazz: 	storeCustomer13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name102: 	Attribute
  clazz: 	storeCustomer13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address103: 	Attribute
  clazz: 	storeCustomer13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders104: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer13
  modified: 	false
  name: 	orders
  other: 	customer129
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products105: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer13
  modified: 	false
  name: 	products
  other: 	customers95
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name106: 	Attribute
  clazz: 	haveCustomerCommand14
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address107: 	Attribute
  clazz: 	haveCustomerCommand14
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f108: 	FMethod
  clazz: 	haveCustomerCommand14
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f109: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand14
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f110: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand14
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id111: 	Attribute
  clazz: 	storeOffer15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price112: 	Attribute
  clazz: 	storeOffer15
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime113: 	Attribute
  clazz: 	storeOffer15
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime114: 	Attribute
  clazz: 	storeOffer15
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product115: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOffer15
  modified: 	false
  name: 	product
  other: 	offers94
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders116: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOffer15
  modified: 	false
  name: 	orders
  other: 	offer142
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price117: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product118: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime119: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime120: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f121: 	FMethod
  clazz: 	haveOfferCommand16
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f123: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f124: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f125: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id126: 	Attribute
  clazz: 	storeOrder17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date127: 	Attribute
  clazz: 	storeOrder17
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state128: 	Attribute
  clazz: 	storeOrder17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer129: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrder17
  modified: 	false
  name: 	customer
  other: 	orders104
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions130: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOrder17
  modified: 	false
  name: 	positions
  other: 	order141
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer131: 	Attribute
  clazz: 	haveOrderCommand18
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date132: 	Attribute
  clazz: 	haveOrderCommand18
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state133: 	Attribute
  clazz: 	haveOrderCommand18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f134: 	FMethod
  clazz: 	haveOrderCommand18
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f135: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand18
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f136: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand18
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f137: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand18
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id138: 	Attribute
  clazz: 	storeOrderPosition19
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount139: 	Attribute
  clazz: 	storeOrderPosition19
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state140: 	Attribute
  clazz: 	storeOrderPosition19
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order141: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition19
  modified: 	false
  name: 	order
  other: 	positions130
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer142: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition19
  modified: 	false
  name: 	offer
  other: 	orders116
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order143: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer144: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount145: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state146: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f147: 	FMethod
  clazz: 	haveOrderPositionCommand20
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f148: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f149: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f150: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f151: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source152: 	Attribute
  clazz: 	haveCustomerProductsLink21
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target153: 	Attribute
  clazz: 	haveCustomerProductsLink21
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f154: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink21
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source155: 	Attribute
  clazz: 	removeCustomerProductsLink22
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target156: 	Attribute
  clazz: 	removeCustomerProductsLink22
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f157: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink22
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

