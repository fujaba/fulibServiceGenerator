- c1: 	ClassModel
  classes: 	storeEditor2 	modelCommand3 	removeCommand4 	storeService5 	commandStream6 	storeApp7 	page8 	line9 	storeProduct10 	haveProductCommand11 	storeCustomer12 	haveCustomerCommand13 	storeOffer14 	haveOfferCommand15 	storeOrder16 	haveOrderCommand17 	storeOrderPosition18 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.websystem.Store
  packageSrcFolder: 	"src/main/java/unikassel/websystem/Store"

- storeEditor2: 	Clazz
  attributes: 	activeCommands22 	removeCommands23 	isoDateFormat24 	lastTime25 	timeDelta26 	storeProducts27 	storeCustomers28 	storeOffers29 	storeOrders30 	storeOrderPositions31 	
  importList: 	null 	null 	null 	
  methods: 	f32 	f33 	f34 	f35 	f36 	f37 	f38 	f39 	
  model: 	c1
  modified: 	false
  name: 	StoreEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id40 	time41 	
  methods: 	f42 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand11 	haveCustomerCommand13 	haveOfferCommand15 	haveOrderCommand17 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName43 	
  importList: 	null 	null 	null 	
  methods: 	f44 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeService5: 	Clazz
  attributes: 	myPort45 	modelEditor46 	reflectorMap47 	currentSession48 	executor49 	sessionToAppMap50 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f51 	f52 	f53 	f54 	
  model: 	c1
  modified: 	false
  name: 	StoreService
  propertyStyle: 	POJO
  roles: 	streams55 	

- commandStream6: 	Clazz
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service56 	

- storeApp7: 	Clazz
  attributes: 	modelEditor57 	id58 	description59 	
  methods: 	f60 	
  model: 	c1
  modified: 	false
  name: 	StoreApp
  propertyStyle: 	POJO
  roles: 	content61 	

- page8: 	Clazz
  attributes: 	id62 	description63 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app64 	content65 	

- line9: 	Clazz
  attributes: 	id66 	description67 	action68 	value69 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page70 	

- storeProduct10: 	Clazz
  attributes: 	id71 	description72 	items73 	
  model: 	c1
  modified: 	false
  name: 	StoreProduct
  propertyStyle: 	POJO
  roles: 	offers74 	customers75 	

- haveProductCommand11: 	Clazz
  attributes: 	description76 	items77 	
  methods: 	f78 	f79 	f80 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeCustomer12: 	Clazz
  attributes: 	id81 	name82 	address83 	
  model: 	c1
  modified: 	false
  name: 	StoreCustomer
  propertyStyle: 	POJO
  roles: 	orders84 	products85 	

- haveCustomerCommand13: 	Clazz
  attributes: 	name86 	address87 	
  methods: 	f88 	f89 	f90 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOffer14: 	Clazz
  attributes: 	id91 	price92 	startTime93 	endTime94 	
  model: 	c1
  modified: 	false
  name: 	StoreOffer
  propertyStyle: 	POJO
  roles: 	product95 	orders96 	

- haveOfferCommand15: 	Clazz
  attributes: 	price97 	product98 	startTime99 	endTime100 	
  methods: 	f101 	f102 	f103 	f104 	f105 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrder16: 	Clazz
  attributes: 	id106 	date107 	state108 	
  model: 	c1
  modified: 	false
  name: 	StoreOrder
  propertyStyle: 	POJO
  roles: 	customer109 	positions110 	

- haveOrderCommand17: 	Clazz
  attributes: 	customer111 	date112 	state113 	
  methods: 	f114 	f115 	f116 	f117 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- storeOrderPosition18: 	Clazz
  attributes: 	id118 	amount119 	state120 	
  model: 	c1
  modified: 	false
  name: 	StoreOrderPosition
  propertyStyle: 	POJO
  roles: 	order121 	offer122 	

- haveOrderPositionCommand19: 	Clazz
  attributes: 	order123 	offer124 	amount125 	state126 	
  methods: 	f127 	f128 	f129 	f130 	f131 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink20: 	Clazz
  attributes: 	source132 	target133 	
  methods: 	f134 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink21: 	Clazz
  attributes: 	source135 	target136 	
  methods: 	f137 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands22: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands23: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- isoDateFormat24: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime25: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta26: 	Attribute
  clazz: 	storeEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- storeProducts27: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreProduct>"

- storeCustomers28: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreCustomer>"

- storeOffers29: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOffer>"

- storeOrders30: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrder>"

- storeOrderPositions31: 	Attribute
  clazz: 	storeEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	storeOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, StoreOrderPosition>"

- f32: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f33: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"// st.render();
"
  modified: 	false

- f34: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Store\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f35: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreProduct getOrCreateStoreProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreProduct oldObject = this.getStoreProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreProduct newObject = new StoreProduct();
      newObject.setId(id);
      this.getStoreProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f36: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreCustomer getOrCreateStoreCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreCustomer oldObject = this.getStoreCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreCustomer newObject = new StoreCustomer();
      newObject.setId(id);
      this.getStoreCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOffer getOrCreateStoreOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreOffer oldObject = this.getStoreOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOffer newObject = new StoreOffer();
      newObject.setId(id);
      this.getStoreOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f38: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrder getOrCreateStoreOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreOrder oldObject = this.getStoreOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrder newObject = new StoreOrder();
      newObject.setId(id);
      this.getStoreOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f39: 	FMethod
  clazz: 	storeEditor2
  declaration: 	"public StoreOrderPosition getOrCreateStoreOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      StoreOrderPosition oldObject = this.getStoreOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      StoreOrderPosition newObject = new StoreOrderPosition();
      newObject.setId(id);
      this.getStoreOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id40: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time41: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f42: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName43: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f44: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(StoreEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort45: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor46: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	StoreEditor

- reflectorMap47: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession48: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor49: 	Attribute
  clazz: 	storeService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap50: 	Attribute
  clazz: 	storeService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, StoreApp>"

- f51: 	FMethod
  clazz: 	storeService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new StoreEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      try { port(myPort);} catch (Exception e) {};
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      get(\"/Store\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      post(\"/Storecmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      // no streams

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Service is listening on port \" + myPort);
"
  modified: 	false

- f52: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f53: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         StoreApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new StoreApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Store\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f54: 	FMethod
  clazz: 	storeService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      StoreApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", StoreEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- streams55: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeService5
  modified: 	false
  name: 	streams
  other: 	service56
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- service56: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams55
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- modelEditor57: 	Attribute
  clazz: 	storeApp7
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	StoreEditor

- id58: 	Attribute
  clazz: 	storeApp7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description59: 	Attribute
  clazz: 	storeApp7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f60: 	FMethod
  clazz: 	storeApp7
  declaration: 	"public StoreApp init(StoreEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Store App\");
      return this;
"
  modified: 	false

- content61: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeApp7
  modified: 	false
  name: 	content
  other: 	app64
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id62: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description63: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app64: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page8
  modified: 	false
  name: 	app
  other: 	content61
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content65: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page8
  modified: 	false
  name: 	content
  other: 	page70
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id66: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description67: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action68: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value69: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page70: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line9
  modified: 	false
  name: 	page
  other: 	content65
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id71: 	Attribute
  clazz: 	storeProduct10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description72: 	Attribute
  clazz: 	storeProduct10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items73: 	Attribute
  clazz: 	storeProduct10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers74: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct10
  modified: 	false
  name: 	offers
  other: 	product95
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers75: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeProduct10
  modified: 	false
  name: 	customers
  other: 	products85
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description76: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items77: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f78: 	FMethod
  clazz: 	haveProductCommand11
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f79: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f80: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public StoreProduct run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreProducts().get(this.getId());
      }
      StoreProduct dataObject = editor.getOrCreateStoreProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id81: 	Attribute
  clazz: 	storeCustomer12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name82: 	Attribute
  clazz: 	storeCustomer12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address83: 	Attribute
  clazz: 	storeCustomer12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders84: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer12
  modified: 	false
  name: 	orders
  other: 	customer109
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products85: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeCustomer12
  modified: 	false
  name: 	products
  other: 	customers75
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name86: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address87: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f88: 	FMethod
  clazz: 	haveCustomerCommand13
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f89: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f90: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public StoreCustomer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreCustomers().get(this.getId());
      }
      StoreCustomer dataObject = editor.getOrCreateStoreCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id91: 	Attribute
  clazz: 	storeOffer14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price92: 	Attribute
  clazz: 	storeOffer14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime93: 	Attribute
  clazz: 	storeOffer14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime94: 	Attribute
  clazz: 	storeOffer14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product95: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOffer14
  modified: 	false
  name: 	product
  other: 	offers74
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders96: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOffer14
  modified: 	false
  name: 	orders
  other: 	offer122
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price97: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product98: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime99: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime100: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f101: 	FMethod
  clazz: 	haveOfferCommand15
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f102: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f103: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f104: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f105: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public StoreOffer run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOffers().get(this.getId());
      }
      StoreOffer dataObject = editor.getOrCreateStoreOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      StoreProduct product = editor.getOrCreateStoreProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id106: 	Attribute
  clazz: 	storeOrder16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date107: 	Attribute
  clazz: 	storeOrder16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state108: 	Attribute
  clazz: 	storeOrder16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer109: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrder16
  modified: 	false
  name: 	customer
  other: 	orders84
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions110: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	storeOrder16
  modified: 	false
  name: 	positions
  other: 	order121
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer111: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date112: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state113: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f114: 	FMethod
  clazz: 	haveOrderCommand17
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f115: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f116: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f117: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public StoreOrder run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrders().get(this.getId());
      }
      StoreOrder dataObject = editor.getOrCreateStoreOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      StoreCustomer customer = editor.getOrCreateStoreCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id118: 	Attribute
  clazz: 	storeOrderPosition18
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount119: 	Attribute
  clazz: 	storeOrderPosition18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state120: 	Attribute
  clazz: 	storeOrderPosition18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order121: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition18
  modified: 	false
  name: 	order
  other: 	positions110
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer122: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	storeOrderPosition18
  modified: 	false
  name: 	offer
  other: 	orders96
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order123: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer124: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount125: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state126: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f127: 	FMethod
  clazz: 	haveOrderPositionCommand19
  declaration: 	"public boolean preCheck(StoreEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"StoreOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"StoreOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f128: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f129: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f130: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f131: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public StoreOrderPosition run(StoreEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getStoreOrderPositions().get(this.getId());
      }
      StoreOrderPosition dataObject = editor.getOrCreateStoreOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      StoreOrder order = editor.getOrCreateStoreOrder(this.getOrder());
      dataObject.setOrder(order);
      StoreOffer offer = editor.getOrCreateStoreOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source132: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target133: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f134: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink20
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source135: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target136: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f137: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink21
  declaration: 	"@Override
   public Object run(StoreEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      StoreCustomer sourceObject = editor.getOrCreateStoreCustomer(this.getSource());
      StoreProduct targetObject = editor.getOrCreateStoreProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

