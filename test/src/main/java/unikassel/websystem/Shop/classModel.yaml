- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	commandStream6 	addStreamCommand7 	shopApp8 	page9 	line10 	shopProduct11 	haveProductCommand12 	shopCustomer13 	haveCustomerCommand14 	shopOffer15 	haveOfferCommand16 	shopOrder17 	haveOrderCommand18 	shopOrderPosition19 	haveOrderPositionCommand20 	haveCustomerProductsLink21 	removeCustomerProductsLink22 	addToCart23 	orderAction24 	customerAccount25 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/main/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands26 	removeCommands27 	commandListeners28 	isoDateFormat29 	lastTime30 	timeDelta31 	shopProducts32 	shopCustomers33 	shopOffers34 	shopOrders35 	shopOrderPositions36 	
  importList: 	null 	null 	null 	null 	
  methods: 	f37 	f38 	f39 	f40 	f41 	f42 	f43 	f44 	f45 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO
  roles: 	service46 	

- modelCommand3: 	Clazz
  attributes: 	id47 	time48 	
  methods: 	f49 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	addStreamCommand7 	haveProductCommand12 	haveCustomerCommand14 	haveOfferCommand16 	haveOrderCommand18 	haveOrderPositionCommand20 	haveCustomerProductsLink21 	removeCustomerProductsLink22 	addToCart23 	orderAction24 	customerAccount25 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName50 	
  importList: 	null 	null 	null 	
  methods: 	f51 	f52 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort53 	reflectorMap54 	currentSession55 	executor56 	spark57 	sessionToAppMap58 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f59 	f60 	f61 	f62 	f63 	f64 	f65 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO
  roles: 	modelEditor66 	streams67 	

- commandStream6: 	Clazz
  attributes: 	targetUrl68 	oldCommands69 	activeCommands70 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f71 	f72 	f73 	f74 	f75 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service76 	

- addStreamCommand7: 	Clazz
  attributes: 	incommingRoute77 	outgoingUrl78 	commandList79 	
  methods: 	f80 	f81 	
  model: 	c1
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopApp8: 	Clazz
  attributes: 	modelEditor82 	id83 	description84 	customer85 	
  methods: 	f86 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content87 	shoppingCart88 	

- page9: 	Clazz
  attributes: 	id89 	description90 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app91 	content92 	

- line10: 	Clazz
  attributes: 	id93 	description94 	action95 	value96 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page97 	

- shopProduct11: 	Clazz
  attributes: 	id98 	description99 	items100 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers101 	customers102 	

- haveProductCommand12: 	Clazz
  attributes: 	description103 	items104 	
  methods: 	f105 	f106 	f107 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer13: 	Clazz
  attributes: 	id108 	name109 	address110 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders111 	products112 	

- haveCustomerCommand14: 	Clazz
  attributes: 	name113 	address114 	
  methods: 	f115 	f116 	f117 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer15: 	Clazz
  attributes: 	id118 	price119 	startTime120 	endTime121 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product122 	orders123 	

- haveOfferCommand16: 	Clazz
  attributes: 	price124 	product125 	startTime126 	endTime127 	
  methods: 	f128 	f129 	f130 	f131 	f132 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder17: 	Clazz
  attributes: 	id133 	date134 	state135 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer136 	positions137 	shopApp138 	

- haveOrderCommand18: 	Clazz
  attributes: 	customer139 	date140 	state141 	
  methods: 	f142 	f143 	f144 	f145 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition19: 	Clazz
  attributes: 	id146 	amount147 	state148 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order149 	offer150 	

- haveOrderPositionCommand20: 	Clazz
  attributes: 	order151 	offer152 	amount153 	state154 	
  methods: 	f155 	f156 	f157 	f158 	f159 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink21: 	Clazz
  attributes: 	source160 	target161 	
  methods: 	f162 	f163 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink22: 	Clazz
  attributes: 	source164 	target165 	
  methods: 	f166 	f167 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addToCart23: 	Clazz
  attributes: 	offer168 	_app169 	
  methods: 	f170 	
  model: 	c1
  modified: 	false
  name: 	AddToCart
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderAction24: 	Clazz
  attributes: 	order171 	name172 	address173 	_app174 	
  methods: 	f175 	
  model: 	c1
  modified: 	false
  name: 	OrderAction
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customerAccount25: 	Clazz
  attributes: 	name176 	address177 	_app178 	
  methods: 	f179 	
  model: 	c1
  modified: 	false
  name: 	CustomerAccount
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat29: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime30: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta31: 	Attribute
  clazz: 	shopEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- shopProducts32: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers33: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers34: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders35: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions36: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f37: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f38: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f39: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f40: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f41: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f42: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f43: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f44: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f45: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- service46: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopEditor2
  modified: 	false
  name: 	service
  other: 	modelEditor66
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id47: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time48: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f49: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName50: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f51: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RemoveCommand-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RemoveCommand-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RemoveCommand-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f52: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort53: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap54: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession55: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor56: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark57: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap58: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f59: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new ShopEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Shop\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Shopcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Shop Service is listening on port \" + myPort);
"
  modified: 	false

- f60: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f61: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         stringWriter.write(
               \"<html>\n\" +
                     \"<head>\n\" +
                     \"    <meta charset=\\"utf-8\\">\n\" +
                     \"    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\n\" +
                     \"\n\" +
                     \"    <link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\\">\n\" +
                     \"    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"></script>\n\" +
                     \"</head>\n\n\"
         );
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         stringWriter.write(\"\n</html>\n\");
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f62: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f63: 	FMethod
  clazz: 	shopService5
  declaration: 	"public CommandStream addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
      return stream;
"
  modified: 	false

- f64: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f65: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void connectTo(String sourceServiceName, String sourceUrl, String targetServiceName, String targetUrl, String... commandList)"
  methodBody: 	"      String incommingRoute = targetServiceName + \"To\" + sourceServiceName;
      String incommingURL = sourceUrl + \"/\" + incommingRoute;
      String outgoingRoute = sourceServiceName + \"To\" + targetServiceName;
      String outgoingURL = targetUrl + \"/\" + outgoingRoute;
      ArrayList<String> sourceCommands = new ArrayList<>();
      ArrayList<String> targetCommands = new ArrayList<>();

      ArrayList<String> currentList = sourceCommands;
      for (String cmd : commandList) {
         if (\"<->\".equals(cmd)) {
            currentList = targetCommands;
         }
         else {
            currentList.add(cmd);
         }
      }

      CommandStream stream = addStream(incommingRoute, outgoingURL, sourceCommands.toArray(new String[0]));

      AddStreamCommand addStreamCommand = new AddStreamCommand()
            .setIncommingRoute(outgoingRoute)
            .setOutgoingUrl(incommingURL)
            .setCommandList(String.join(\" \", targetCommands));

      String yaml = org.fulib.yaml.Yaml.encode(addStreamCommand);
      URL url = null;
      try {
         url = new URL(targetUrl + \"/connect\");
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- modelEditor66: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  other: 	service46
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams67: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopService5
  modified: 	false
  name: 	streams
  other: 	service76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl68: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands69: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands70: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f71: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f72: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(content.toString());
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f73: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f74: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, ShopService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f75: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service76: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams67
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute77: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl78: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- commandList79: 	Attribute
  clazz: 	addStreamCommand7
  modified: 	false
  name: 	commandList
  propertyStyle: 	POJO
  type: 	String

- f80: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AddStreamCommand-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AddStreamCommand-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AddStreamCommand-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f81: 	FMethod
  clazz: 	addStreamCommand7
  declaration: 	"public Object run(ShopEditor editor)"
  methodBody: 	"      String[] split = commandList.split(\" \");
      editor.getService().addStream(incommingRoute, outgoingUrl, split);
      return null;
"
  modified: 	false

- modelEditor82: 	Attribute
  clazz: 	shopApp8
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id83: 	Attribute
  clazz: 	shopApp8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description84: 	Attribute
  clazz: 	shopApp8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- customer85: 	Attribute
  clazz: 	shopApp8
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	ShopCustomer

- f86: 	FMethod
  clazz: 	shopApp8
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp8
  modified: 	false
  name: 	content
  other: 	app91
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shoppingCart88: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp8
  modified: 	false
  name: 	shoppingCart
  other: 	shopApp138
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id89: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description90: 	Attribute
  clazz: 	page9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app91: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page9
  modified: 	false
  name: 	app
  other: 	content87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content92: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page9
  modified: 	false
  name: 	content
  other: 	page97
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id93: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description94: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action95: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value96: 	Attribute
  clazz: 	line10
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page97: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line10
  modified: 	false
  name: 	page
  other: 	content92
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id98: 	Attribute
  clazz: 	shopProduct11
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description99: 	Attribute
  clazz: 	shopProduct11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items100: 	Attribute
  clazz: 	shopProduct11
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers101: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct11
  modified: 	false
  name: 	offers
  other: 	product122
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers102: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct11
  modified: 	false
  name: 	customers
  other: 	products112
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description103: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items104: 	Attribute
  clazz: 	haveProductCommand12
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f105: 	FMethod
  clazz: 	haveProductCommand12
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand12
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id108: 	Attribute
  clazz: 	shopCustomer13
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name109: 	Attribute
  clazz: 	shopCustomer13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address110: 	Attribute
  clazz: 	shopCustomer13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders111: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer13
  modified: 	false
  name: 	orders
  other: 	customer136
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products112: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer13
  modified: 	false
  name: 	products
  other: 	customers102
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name113: 	Attribute
  clazz: 	haveCustomerCommand14
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address114: 	Attribute
  clazz: 	haveCustomerCommand14
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f115: 	FMethod
  clazz: 	haveCustomerCommand14
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f116: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand14
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f117: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand14
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id118: 	Attribute
  clazz: 	shopOffer15
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price119: 	Attribute
  clazz: 	shopOffer15
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime120: 	Attribute
  clazz: 	shopOffer15
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime121: 	Attribute
  clazz: 	shopOffer15
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product122: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer15
  modified: 	false
  name: 	product
  other: 	offers101
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders123: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer15
  modified: 	false
  name: 	orders
  other: 	offer150
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price124: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product125: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime126: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime127: 	Attribute
  clazz: 	haveOfferCommand16
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f128: 	FMethod
  clazz: 	haveOfferCommand16
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f129: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f130: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f131: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f132: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand16
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id133: 	Attribute
  clazz: 	shopOrder17
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date134: 	Attribute
  clazz: 	shopOrder17
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state135: 	Attribute
  clazz: 	shopOrder17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer136: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder17
  modified: 	false
  name: 	customer
  other: 	orders111
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions137: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder17
  modified: 	false
  name: 	positions
  other: 	order149
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shopApp138: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder17
  modified: 	false
  name: 	shopApp
  other: 	shoppingCart88
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer139: 	Attribute
  clazz: 	haveOrderCommand18
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date140: 	Attribute
  clazz: 	haveOrderCommand18
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state141: 	Attribute
  clazz: 	haveOrderCommand18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f142: 	FMethod
  clazz: 	haveOrderCommand18
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f143: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand18
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f144: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand18
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f145: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand18
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id146: 	Attribute
  clazz: 	shopOrderPosition19
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount147: 	Attribute
  clazz: 	shopOrderPosition19
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state148: 	Attribute
  clazz: 	shopOrderPosition19
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order149: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition19
  modified: 	false
  name: 	order
  other: 	positions137
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer150: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition19
  modified: 	false
  name: 	offer
  other: 	orders123
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order151: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer152: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount153: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state154: 	Attribute
  clazz: 	haveOrderPositionCommand20
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f155: 	FMethod
  clazz: 	haveOrderPositionCommand20
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f156: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f157: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f158: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f159: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand20
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source160: 	Attribute
  clazz: 	haveCustomerProductsLink21
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target161: 	Attribute
  clazz: 	haveCustomerProductsLink21
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f162: 	FMethod
  clazz: 	haveCustomerProductsLink21
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"HaveCustomerProductsLink-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"HaveCustomerProductsLink-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"HaveCustomerProductsLink-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f163: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink21
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source164: 	Attribute
  clazz: 	removeCustomerProductsLink22
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target165: 	Attribute
  clazz: 	removeCustomerProductsLink22
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f166: 	FMethod
  clazz: 	removeCustomerProductsLink22
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"RemoveCustomerProductsLink-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"RemoveCustomerProductsLink-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"RemoveCustomerProductsLink-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f167: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink22
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer168: 	Attribute
  clazz: 	addToCart23
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- _app169: 	Attribute
  clazz: 	addToCart23
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- f170: 	FMethod
  clazz: 	addToCart23
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"AddToCart-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"AddToCart-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"AddToCart-\" + this.getId(), this);
      return true;
"
  modified: 	false

- order171: 	Attribute
  clazz: 	orderAction24
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- name172: 	Attribute
  clazz: 	orderAction24
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address173: 	Attribute
  clazz: 	orderAction24
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app174: 	Attribute
  clazz: 	orderAction24
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- f175: 	FMethod
  clazz: 	orderAction24
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"OrderAction-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"OrderAction-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"OrderAction-\" + this.getId(), this);
      return true;
"
  modified: 	false

- name176: 	Attribute
  clazz: 	customerAccount25
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address177: 	Attribute
  clazz: 	customerAccount25
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app178: 	Attribute
  clazz: 	customerAccount25
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- f179: 	FMethod
  clazz: 	customerAccount25
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"CustomerAccount-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"CustomerAccount-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"CustomerAccount-\" + this.getId(), this);
      return true;
"
  modified: 	false

