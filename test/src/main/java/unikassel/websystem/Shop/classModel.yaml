- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	commandStream6 	shopApp7 	page8 	line9 	shopProduct10 	haveProductCommand11 	shopCustomer12 	haveCustomerCommand13 	shopOffer14 	haveOfferCommand15 	shopOrder16 	haveOrderCommand17 	shopOrderPosition18 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	addTobCard22 	orderAction23 	customerAccount24 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/main/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands25 	removeCommands26 	commandListeners27 	isoDateFormat28 	lastTime29 	timeDelta30 	shopProducts31 	shopCustomers32 	shopOffers33 	shopOrders34 	shopOrderPositions35 	
  importList: 	null 	null 	null 	null 	
  methods: 	f36 	f37 	f38 	f39 	f40 	f41 	f42 	f43 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id44 	time45 	
  methods: 	f46 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand11 	haveCustomerCommand13 	haveOfferCommand15 	haveOrderCommand17 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	addTobCard22 	orderAction23 	customerAccount24 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName47 	
  importList: 	null 	null 	null 	
  methods: 	f48 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort49 	modelEditor50 	reflectorMap51 	currentSession52 	executor53 	sessionToAppMap54 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f55 	f56 	f57 	f58 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO
  roles: 	streams59 	

- commandStream6: 	Clazz
  attributes: 	targetUrl60 	activeCommands61 	
  importList: 	null 	null 	null 	null 	null 	
  methods: 	f62 	f63 	f64 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service65 	

- shopApp7: 	Clazz
  attributes: 	modelEditor66 	id67 	description68 	customer69 	
  methods: 	f70 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content71 	shoppingCard72 	

- page8: 	Clazz
  attributes: 	id73 	description74 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app75 	content76 	

- line9: 	Clazz
  attributes: 	id77 	description78 	action79 	value80 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page81 	

- shopProduct10: 	Clazz
  attributes: 	id82 	description83 	items84 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers85 	customers86 	

- haveProductCommand11: 	Clazz
  attributes: 	description87 	items88 	
  methods: 	f89 	f90 	f91 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer12: 	Clazz
  attributes: 	id92 	name93 	address94 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders95 	products96 	

- haveCustomerCommand13: 	Clazz
  attributes: 	name97 	address98 	
  methods: 	f99 	f100 	f101 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer14: 	Clazz
  attributes: 	id102 	price103 	startTime104 	endTime105 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product106 	orders107 	

- haveOfferCommand15: 	Clazz
  attributes: 	price108 	product109 	startTime110 	endTime111 	
  methods: 	f112 	f113 	f114 	f115 	f116 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder16: 	Clazz
  attributes: 	id117 	date118 	state119 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer120 	positions121 	shopApp122 	

- haveOrderCommand17: 	Clazz
  attributes: 	customer123 	date124 	state125 	
  methods: 	f126 	f127 	f128 	f129 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition18: 	Clazz
  attributes: 	id130 	amount131 	state132 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order133 	offer134 	

- haveOrderPositionCommand19: 	Clazz
  attributes: 	order135 	offer136 	amount137 	state138 	
  methods: 	f139 	f140 	f141 	f142 	f143 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink20: 	Clazz
  attributes: 	source144 	target145 	
  methods: 	f146 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink21: 	Clazz
  attributes: 	source147 	target148 	
  methods: 	f149 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addTobCard22: 	Clazz
  attributes: 	offer150 	_app151 	
  model: 	c1
  modified: 	false
  name: 	AddTobCard
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderAction23: 	Clazz
  attributes: 	order152 	name153 	address154 	_app155 	
  model: 	c1
  modified: 	false
  name: 	OrderAction
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customerAccount24: 	Clazz
  attributes: 	name156 	address157 	_app158 	
  model: 	c1
  modified: 	false
  name: 	CustomerAccount
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime29: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta30: 	Attribute
  clazz: 	shopEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- shopProducts31: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers32: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers33: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders34: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions35: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f36: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f38: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f39: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f40: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f41: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f42: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f43: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id44: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time45: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f46: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName47: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f48: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public ModelCommand run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort49: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor50: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- reflectorMap51: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession52: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor53: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- sessionToAppMap54: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f55: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new ShopEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      try { port(myPort);} catch (Exception e) {};
      get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      get(\"/Shop\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      post(\"/Shopcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      // no streams

      notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Store Service is listening on port \" + myPort);
"
  modified: 	false

- f56: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f57: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f58: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- streams59: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopService5
  modified: 	false
  name: 	streams
  other: 	service65
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl60: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- activeCommands61: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f62: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);

      send();
"
  modified: 	false

- f63: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(yaml);
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f64: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- service65: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams59
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- modelEditor66: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id67: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description68: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- customer69: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	ShopCustomer

- f70: 	FMethod
  clazz: 	shopApp7
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content71: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp7
  modified: 	false
  name: 	content
  other: 	app75
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shoppingCard72: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp7
  modified: 	false
  name: 	shoppingCard
  other: 	shopApp122
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id73: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description74: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app75: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page8
  modified: 	false
  name: 	app
  other: 	content71
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content76: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page8
  modified: 	false
  name: 	content
  other: 	page81
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id77: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description78: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action79: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value80: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page81: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line9
  modified: 	false
  name: 	page
  other: 	content76
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id82: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description83: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items84: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers85: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct10
  modified: 	false
  name: 	offers
  other: 	product106
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers86: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct10
  modified: 	false
  name: 	customers
  other: 	products96
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description87: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items88: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f89: 	FMethod
  clazz: 	haveProductCommand11
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f90: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f91: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id92: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name93: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address94: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders95: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer12
  modified: 	false
  name: 	orders
  other: 	customer120
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products96: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer12
  modified: 	false
  name: 	products
  other: 	customers86
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name97: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address98: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f99: 	FMethod
  clazz: 	haveCustomerCommand13
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f100: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f101: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id102: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price103: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime104: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime105: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product106: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer14
  modified: 	false
  name: 	product
  other: 	offers85
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders107: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer14
  modified: 	false
  name: 	orders
  other: 	offer134
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price108: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product109: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime110: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime111: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f112: 	FMethod
  clazz: 	haveOfferCommand15
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f113: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f114: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f115: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f116: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id117: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date118: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state119: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer120: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder16
  modified: 	false
  name: 	customer
  other: 	orders95
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions121: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder16
  modified: 	false
  name: 	positions
  other: 	order133
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shopApp122: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder16
  modified: 	false
  name: 	shopApp
  other: 	shoppingCard72
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer123: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date124: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state125: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f126: 	FMethod
  clazz: 	haveOrderCommand17
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f127: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f128: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f129: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id130: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount131: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state132: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order133: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	order
  other: 	positions121
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer134: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	offer
  other: 	orders107
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order135: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer136: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount137: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state138: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f139: 	FMethod
  clazz: 	haveOrderPositionCommand19
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f140: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f141: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f142: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f143: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source144: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target145: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f146: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink20
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source147: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target148: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f149: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink21
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer150: 	Attribute
  clazz: 	addTobCard22
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- _app151: 	Attribute
  clazz: 	addTobCard22
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- order152: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- name153: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address154: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app155: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- name156: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address157: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app158: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

