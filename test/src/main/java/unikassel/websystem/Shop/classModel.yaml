- c1: 	ClassModel
  classes: 	shopEditor2 	modelCommand3 	removeCommand4 	shopService5 	commandStream6 	shopApp7 	page8 	line9 	shopProduct10 	haveProductCommand11 	shopCustomer12 	haveCustomerCommand13 	shopOffer14 	haveOfferCommand15 	shopOrder16 	haveOrderCommand17 	shopOrderPosition18 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	addTobCard22 	orderAction23 	customerAccount24 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	unikassel.websystem.Shop
  packageSrcFolder: 	"src/main/java/unikassel/websystem/Shop"

- shopEditor2: 	Clazz
  attributes: 	activeCommands25 	removeCommands26 	commandListeners27 	isoDateFormat28 	lastTime29 	timeDelta30 	shopProducts31 	shopCustomers32 	shopOffers33 	shopOrders34 	shopOrderPositions35 	
  importList: 	null 	null 	null 	null 	
  methods: 	f36 	f37 	f38 	f39 	f40 	f41 	f42 	f43 	f44 	
  model: 	c1
  modified: 	false
  name: 	ShopEditor
  propertyStyle: 	POJO

- modelCommand3: 	Clazz
  attributes: 	id45 	time46 	
  methods: 	f47 	
  model: 	c1
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand4 	haveProductCommand11 	haveCustomerCommand13 	haveOfferCommand15 	haveOrderCommand17 	haveOrderPositionCommand19 	haveCustomerProductsLink20 	removeCustomerProductsLink21 	addTobCard22 	orderAction23 	customerAccount24 	

- removeCommand4: 	Clazz
  attributes: 	targetClassName48 	
  importList: 	null 	null 	null 	
  methods: 	f49 	
  model: 	c1
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopService5: 	Clazz
  attributes: 	myPort50 	modelEditor51 	reflectorMap52 	currentSession53 	executor54 	spark55 	sessionToAppMap56 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f57 	f58 	f59 	f60 	f61 	
  model: 	c1
  modified: 	false
  name: 	ShopService
  propertyStyle: 	POJO
  roles: 	streams62 	

- commandStream6: 	Clazz
  attributes: 	targetUrl63 	oldCommands64 	activeCommands65 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f66 	f67 	f68 	f69 	f70 	
  model: 	c1
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service71 	

- shopApp7: 	Clazz
  attributes: 	modelEditor72 	id73 	description74 	customer75 	
  methods: 	f76 	
  model: 	c1
  modified: 	false
  name: 	ShopApp
  propertyStyle: 	POJO
  roles: 	content77 	shoppingCard78 	

- page8: 	Clazz
  attributes: 	id79 	description80 	
  model: 	c1
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app81 	content82 	

- line9: 	Clazz
  attributes: 	id83 	description84 	action85 	value86 	
  model: 	c1
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page87 	

- shopProduct10: 	Clazz
  attributes: 	id88 	description89 	items90 	
  model: 	c1
  modified: 	false
  name: 	ShopProduct
  propertyStyle: 	POJO
  roles: 	offers91 	customers92 	

- haveProductCommand11: 	Clazz
  attributes: 	description93 	items94 	
  methods: 	f95 	f96 	f97 	
  model: 	c1
  modified: 	false
  name: 	HaveProductCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopCustomer12: 	Clazz
  attributes: 	id98 	name99 	address100 	
  model: 	c1
  modified: 	false
  name: 	ShopCustomer
  propertyStyle: 	POJO
  roles: 	orders101 	products102 	

- haveCustomerCommand13: 	Clazz
  attributes: 	name103 	address104 	
  methods: 	f105 	f106 	f107 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOffer14: 	Clazz
  attributes: 	id108 	price109 	startTime110 	endTime111 	
  model: 	c1
  modified: 	false
  name: 	ShopOffer
  propertyStyle: 	POJO
  roles: 	product112 	orders113 	

- haveOfferCommand15: 	Clazz
  attributes: 	price114 	product115 	startTime116 	endTime117 	
  methods: 	f118 	f119 	f120 	f121 	f122 	
  model: 	c1
  modified: 	false
  name: 	HaveOfferCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrder16: 	Clazz
  attributes: 	id123 	date124 	state125 	
  model: 	c1
  modified: 	false
  name: 	ShopOrder
  propertyStyle: 	POJO
  roles: 	customer126 	positions127 	shopApp128 	

- haveOrderCommand17: 	Clazz
  attributes: 	customer129 	date130 	state131 	
  methods: 	f132 	f133 	f134 	f135 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- shopOrderPosition18: 	Clazz
  attributes: 	id136 	amount137 	state138 	
  model: 	c1
  modified: 	false
  name: 	ShopOrderPosition
  propertyStyle: 	POJO
  roles: 	order139 	offer140 	

- haveOrderPositionCommand19: 	Clazz
  attributes: 	order141 	offer142 	amount143 	state144 	
  methods: 	f145 	f146 	f147 	f148 	f149 	
  model: 	c1
  modified: 	false
  name: 	HaveOrderPositionCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- haveCustomerProductsLink20: 	Clazz
  attributes: 	source150 	target151 	
  methods: 	f152 	
  model: 	c1
  modified: 	false
  name: 	HaveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- removeCustomerProductsLink21: 	Clazz
  attributes: 	source153 	target154 	
  methods: 	f155 	
  model: 	c1
  modified: 	false
  name: 	RemoveCustomerProductsLink
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- addTobCard22: 	Clazz
  attributes: 	offer156 	_app157 	
  model: 	c1
  modified: 	false
  name: 	AddTobCard
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- orderAction23: 	Clazz
  attributes: 	order158 	name159 	address160 	_app161 	
  model: 	c1
  modified: 	false
  name: 	OrderAction
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- customerAccount24: 	Clazz
  attributes: 	name162 	address163 	_app164 	
  model: 	c1
  modified: 	false
  name: 	CustomerAccount
  propertyStyle: 	POJO
  superClass: 	modelCommand3

- activeCommands25: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands26: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners27: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- isoDateFormat28: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime29: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta30: 	Attribute
  clazz: 	shopEditor2
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- shopProducts31: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopProducts
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopProduct>"

- shopCustomers32: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopCustomers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopCustomer>"

- shopOffers33: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOffers
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOffer>"

- shopOrders34: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrders
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrder>"

- shopOrderPositions35: 	Attribute
  clazz: 	shopEditor2
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	shopOrderPositions
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ShopOrderPosition>"

- f36: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f37: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f38: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f39: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"unikassel.websystem.Shop\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(this);
      }
"
  modified: 	false

- f40: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopProduct getOrCreateShopProduct(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopProduct oldObject = this.getShopProducts().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopProduct newObject = new ShopProduct();
      newObject.setId(id);
      this.getShopProducts().put(id, newObject);
      return newObject;
"
  modified: 	false

- f41: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopCustomer getOrCreateShopCustomer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopCustomer oldObject = this.getShopCustomers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopCustomer newObject = new ShopCustomer();
      newObject.setId(id);
      this.getShopCustomers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f42: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOffer getOrCreateShopOffer(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOffer oldObject = this.getShopOffers().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOffer newObject = new ShopOffer();
      newObject.setId(id);
      this.getShopOffers().put(id, newObject);
      return newObject;
"
  modified: 	false

- f43: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrder getOrCreateShopOrder(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrder oldObject = this.getShopOrders().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrder newObject = new ShopOrder();
      newObject.setId(id);
      this.getShopOrders().put(id, newObject);
      return newObject;
"
  modified: 	false

- f44: 	FMethod
  clazz: 	shopEditor2
  declaration: 	"public ShopOrderPosition getOrCreateShopOrderPosition(String id)"
  methodBody: 	"      if (id == null) {
         return null;
      }
      ShopOrderPosition oldObject = this.getShopOrderPositions().get(id);
      if (oldObject != null) {
         return oldObject;
      }
      ShopOrderPosition newObject = new ShopOrderPosition();
      newObject.setId(id);
      this.getShopOrderPositions().put(id, newObject);
      return newObject;
"
  modified: 	false

- id45: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time46: 	Attribute
  clazz: 	modelCommand3
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f47: 	FMethod
  clazz: 	modelCommand3
  declaration: 	"public Object run(ShopEditor editor)"
  methodBody: 	"      return null;
"
  modified: 	false

- targetClassName48: 	Attribute
  clazz: 	removeCommand4
  modified: 	false
  name: 	targetClassName
  propertyStyle: 	POJO
  type: 	String

- f49: 	FMethod
  clazz: 	removeCommand4
  declaration: 	"public Object run(ShopEditor editor)"
  methodBody: 	"      // allready removed?
      RemoveCommand oldRemoveCommand = editor.getRemoveCommands().get(this.getTargetClassName() + \"-\" + this.getId());
      if (oldRemoveCommand != null) {
         return null;
      }

      // find the target object
      ReflectorMap reflectorMap = new ReflectorMap(editor.getClass().getPackage().getName());
      Reflector reflector = reflectorMap.getReflector(editor);
      Object value = reflector.getValue(editor, this.getTargetClassName() + \"s\");
      java.util.Map objects = (java.util.Map) value;
      Object target = objects.get(this.getId());
      try {
         Method removeYouMethod = target.getClass().getMethod(\"removeYou\", new Class[0]);
         removeYouMethod.invoke(target, new Object[0]);
      }
      catch (Exception e) {
         // ignore
      }
      objects.remove(this.getId());
      editor.getRemoveCommands().put(this.getTargetClassName() + \"-\" + this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- myPort50: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- modelEditor51: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- reflectorMap52: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession53: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor54: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark55: 	Attribute
  clazz: 	shopService5
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap56: 	Attribute
  clazz: 	shopService5
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, ShopApp>"

- f57: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      modelEditor = new ShopEditor();
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/Shop\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/Shopcmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      // no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"Shop Service is listening on port \" + myPort);
"
  modified: 	false

- f58: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f59: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         ShopApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new ShopApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"Shop\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f60: 	FMethod
  clazz: 	shopService5
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      ShopApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      if (jsonObject.keySet().size() > 3) {
         String cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", ShopEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage;
      }

      return root(req, res);
"
  modified: 	false

- f61: 	FMethod
  clazz: 	shopService5
  declaration: 	"public void addStream(String incommingRoute, String outgoingURL, String... commandList)"
  methodBody: 	"      CommandStream stream = new CommandStream().setService(this);
      stream.start(incommingRoute, outgoingURL, this);
      for (String command : commandList) {
         modelEditor.addCommandListener(command, stream);
      }
"
  modified: 	false

- streams62: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopService5
  modified: 	false
  name: 	streams
  other: 	service71
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- targetUrl63: 	Attribute
  clazz: 	commandStream6
  modified: 	false
  name: 	targetUrl
  propertyStyle: 	POJO
  type: 	String

- oldCommands64: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands65: 	Attribute
  clazz: 	commandStream6
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f66: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f67: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void send()"
  methodBody: 	"      try {
         String yaml = Yaml.encode(activeCommands.values());
         URL url = new URL(targetUrl);
         HttpURLConnection con = (HttpURLConnection) url.openConnection();
         con.setRequestMethod(\"POST\");
         con.setDoOutput(true);
         DataOutputStream out = new DataOutputStream(con.getOutputStream());
         out.writeBytes(yaml);
         out.flush();

         InputStream inputStream = con.getInputStream();
         InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
         BufferedReader in = new BufferedReader(inputStreamReader);
         String inputLine;
         StringBuffer content = new StringBuffer();
         while ((inputLine = in.readLine()) != null) {
            content.append(inputLine);
         }
         in.close();
         out.close();
         con.disconnect();

         // got an answer, clear active commands
         activeCommands.clear();
         LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
               .decode(yaml);
         executeCommands(map.values());
      }
      catch (Exception e) {
         e.printStackTrace();
      }
"
  modified: 	false

- f68: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f69: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public CommandStream start(String answerRouteName, String targetUrl, ShopService service)"
  methodBody: 	"      this.targetUrl = targetUrl;
      this.service = service;
      service.getSpark().post(\"/\" + answerRouteName, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f70: 	FMethod
  clazz: 	commandStream6
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- service71: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream6
  modified: 	false
  name: 	service
  other: 	streams62
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- modelEditor72: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	ShopEditor

- id73: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description74: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- customer75: 	Attribute
  clazz: 	shopApp7
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	ShopCustomer

- f76: 	FMethod
  clazz: 	shopApp7
  declaration: 	"public ShopApp init(ShopEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"Shop App\");
      return this;
"
  modified: 	false

- content77: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp7
  modified: 	false
  name: 	content
  other: 	app81
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shoppingCard78: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopApp7
  modified: 	false
  name: 	shoppingCard
  other: 	shopApp128
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id79: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description80: 	Attribute
  clazz: 	page8
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app81: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page8
  modified: 	false
  name: 	app
  other: 	content77
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content82: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page8
  modified: 	false
  name: 	content
  other: 	page87
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id83: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description84: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action85: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value86: 	Attribute
  clazz: 	line9
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page87: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line9
  modified: 	false
  name: 	page
  other: 	content82
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id88: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description89: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items90: 	Attribute
  clazz: 	shopProduct10
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- offers91: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct10
  modified: 	false
  name: 	offers
  other: 	product112
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customers92: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopProduct10
  modified: 	false
  name: 	customers
  other: 	products102
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- description93: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- items94: 	Attribute
  clazz: 	haveProductCommand11
  modified: 	false
  name: 	items
  propertyStyle: 	POJO
  type: 	double

- f95: 	FMethod
  clazz: 	haveProductCommand11
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopProduct-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopProduct-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f96: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f97: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveProductCommand11
  declaration: 	"@Override
   public ShopProduct run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopProducts().get(this.getId());
      }
      ShopProduct dataObject = editor.getOrCreateShopProduct(this.getId());
      dataObject.setDescription(this.getDescription());
      dataObject.setItems(this.getItems());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id98: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- name99: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address100: 	Attribute
  clazz: 	shopCustomer12
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- orders101: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer12
  modified: 	false
  name: 	orders
  other: 	customer126
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- products102: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopCustomer12
  modified: 	false
  name: 	products
  other: 	customers92
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name103: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address104: 	Attribute
  clazz: 	haveCustomerCommand13
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- f105: 	FMethod
  clazz: 	haveCustomerCommand13
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopCustomer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopCustomer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f106: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f107: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerCommand13
  declaration: 	"@Override
   public ShopCustomer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopCustomers().get(this.getId());
      }
      ShopCustomer dataObject = editor.getOrCreateShopCustomer(this.getId());
      dataObject.setName(this.getName());
      dataObject.setAddress(this.getAddress());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id108: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- price109: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- startTime110: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime111: 	Attribute
  clazz: 	shopOffer14
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- product112: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOffer14
  modified: 	false
  name: 	product
  other: 	offers91
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- orders113: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOffer14
  modified: 	false
  name: 	orders
  other: 	offer140
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- price114: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	price
  propertyStyle: 	POJO
  type: 	double

- product115: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	product
  propertyStyle: 	POJO
  type: 	String

- startTime116: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	startTime
  propertyStyle: 	POJO
  type: 	String

- endTime117: 	Attribute
  clazz: 	haveOfferCommand15
  modified: 	false
  name: 	endTime
  propertyStyle: 	POJO
  type: 	String

- f118: 	FMethod
  clazz: 	haveOfferCommand15
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOffer-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOffer-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f119: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f120: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f121: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f122: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOfferCommand15
  declaration: 	"@Override
   public ShopOffer run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOffers().get(this.getId());
      }
      ShopOffer dataObject = editor.getOrCreateShopOffer(this.getId());
      dataObject.setPrice(this.getPrice());
      dataObject.setStartTime(this.getStartTime());
      dataObject.setEndTime(this.getEndTime());
      ShopProduct product = editor.getOrCreateShopProduct(this.getProduct());
      dataObject.setProduct(product);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id123: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- date124: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state125: 	Attribute
  clazz: 	shopOrder16
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- customer126: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder16
  modified: 	false
  name: 	customer
  other: 	orders101
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- positions127: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	shopOrder16
  modified: 	false
  name: 	positions
  other: 	order139
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- shopApp128: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrder16
  modified: 	false
  name: 	shopApp
  other: 	shoppingCard78
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- customer129: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	customer
  propertyStyle: 	POJO
  type: 	String

- date130: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	date
  propertyStyle: 	POJO
  type: 	String

- state131: 	Attribute
  clazz: 	haveOrderCommand17
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f132: 	FMethod
  clazz: 	haveOrderCommand17
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrder-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrder-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f133: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f134: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f135: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderCommand17
  declaration: 	"@Override
   public ShopOrder run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrders().get(this.getId());
      }
      ShopOrder dataObject = editor.getOrCreateShopOrder(this.getId());
      dataObject.setDate(this.getDate());
      dataObject.setState(this.getState());
      ShopCustomer customer = editor.getOrCreateShopCustomer(this.getCustomer());
      dataObject.setCustomer(customer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- id136: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- amount137: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state138: 	Attribute
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- order139: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	order
  other: 	positions127
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- offer140: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	shopOrderPosition18
  modified: 	false
  name: 	offer
  other: 	orders113
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- order141: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- offer142: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- amount143: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	amount
  propertyStyle: 	POJO
  type: 	double

- state144: 	Attribute
  clazz: 	haveOrderPositionCommand19
  modified: 	false
  name: 	state
  propertyStyle: 	POJO
  type: 	String

- f145: 	FMethod
  clazz: 	haveOrderPositionCommand19
  declaration: 	"public boolean preCheck(ShopEditor editor)"
  methodBody: 	"      if (this.getTime() == null) {
         this.setTime(editor.getTime());
      }
      RemoveCommand oldRemove = editor.getRemoveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldRemove != null) {
         return false;
      }
      ModelCommand oldCommand = editor.getActiveCommands().get(\"ShopOrderPosition-\" + this.getId());
      if (oldCommand != null && java.util.Objects.compare(oldCommand.getTime(), this.getTime(), (a,b) -> a.compareTo(b)) >= 0) {
         return false;
      }
      editor.getActiveCommands().put(\"ShopOrderPosition-\" + this.getId(), this);
      return true;
"
  modified: 	false

- f146: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f147: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f148: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- f149: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveOrderPositionCommand19
  declaration: 	"@Override
   public ShopOrderPosition run(ShopEditor editor)"
  methodBody: 	"      if ( ! preCheck(editor)) {
         return editor.getShopOrderPositions().get(this.getId());
      }
      ShopOrderPosition dataObject = editor.getOrCreateShopOrderPosition(this.getId());
      dataObject.setAmount(this.getAmount());
      dataObject.setState(this.getState());
      ShopOrder order = editor.getOrCreateShopOrder(this.getOrder());
      dataObject.setOrder(order);
      ShopOffer offer = editor.getOrCreateShopOffer(this.getOffer());
      dataObject.setOffer(offer);

      editor.fireCommandExecuted(this);
      return dataObject;
"
  modified: 	false

- source150: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target151: 	Attribute
  clazz: 	haveCustomerProductsLink20
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f152: 	FMethod
  annotations: 	"@Override"
  clazz: 	haveCustomerProductsLink20
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- source153: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	source
  propertyStyle: 	POJO
  type: 	String

- target154: 	Attribute
  clazz: 	removeCustomerProductsLink21
  modified: 	false
  name: 	target
  propertyStyle: 	POJO
  type: 	String

- f155: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCustomerProductsLink21
  declaration: 	"@Override
   public Object run(ShopEditor editor)"
  methodBody: 	"      java.util.Objects.requireNonNull(this.getTime());
      this.setId(\"\" + this.getSource() + \"-Products-\" + this.getTarget());
      ModelCommand oldCommand = editor.getActiveCommands().get(this.getId());
      if (oldCommand != null && oldCommand.getTime().compareTo(this.getTime()) >= 0) {
         // ignore new command
         return null;
      }

      ShopCustomer sourceObject = editor.getOrCreateShopCustomer(this.getSource());
      ShopProduct targetObject = editor.getOrCreateShopProduct(this.getTarget());
      sourceObject.withoutProducts(targetObject);

      editor.getActiveCommands().put(this.getId(), this);
      editor.fireCommandExecuted(this);

      return null;
"
  modified: 	false

- offer156: 	Attribute
  clazz: 	addTobCard22
  modified: 	false
  name: 	offer
  propertyStyle: 	POJO
  type: 	String

- _app157: 	Attribute
  clazz: 	addTobCard22
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- order158: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	order
  propertyStyle: 	POJO
  type: 	String

- name159: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address160: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app161: 	Attribute
  clazz: 	orderAction23
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

- name162: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- address163: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	address
  propertyStyle: 	POJO
  type: 	String

- _app164: 	Attribute
  clazz: 	customerAccount24
  modified: 	false
  name: 	_app
  propertyStyle: 	POJO
  type: 	ShopApp

