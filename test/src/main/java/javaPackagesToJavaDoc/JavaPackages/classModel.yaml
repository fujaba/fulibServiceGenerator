- c: 	ClassModel
  classes: 	javaPackagesEditor 	modelCommand 	removeCommand 	pattern 	patternObject 	patternAttribute 	patternLink 	javaPackagesService 	commandStream 	addStreamCommand 	javaPackagesApp 	page 	line 	javaPackage 	javaClass 	haveRoot 	haveSubUnit 	haveLeaf 	
  defaultPropertyStyle: 	POJO
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"test/src/main/java"
  packageName: 	javaPackagesToJavaDoc.JavaPackages
  packageSrcFolder: 	"test/src/main/java/javaPackagesToJavaDoc/JavaPackages"

- javaPackagesEditor: 	Clazz
  attributes: 	activeCommands 	removeCommands 	commandListeners 	mapOfFrames 	mapOfModelObjects 	isoDateFormat 	lastTime 	timeDelta 	
  importList: 	null 	null 	null 	null 	null 	
  methods: 	f 	f1 	f2 	f3 	f4 	f5 	f6 	f7 	f8 	
  model: 	c
  modified: 	false
  name: 	JavaPackagesEditor
  propertyStyle: 	POJO
  roles: 	service 	

- modelCommand: 	Clazz
  attributes: 	id 	time 	
  importList: 	null 	
  methods: 	f9 	f10 	f11 	f12 	
  model: 	c
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	POJO
  subClasses: 	removeCommand 	addStreamCommand 	haveRoot 	haveSubUnit 	haveLeaf 	

- removeCommand: 	Clazz
  importList: 	null 	null 	null 	
  methods: 	f13 	
  model: 	c
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand

- pattern: 	Clazz
  model: 	c
  modified: 	false
  name: 	Pattern
  propertyStyle: 	POJO
  roles: 	objects 	

- patternObject: 	Clazz
  attributes: 	poId 	handleObjectClass 	handleObject 	kind 	
  model: 	c
  modified: 	false
  name: 	PatternObject
  propertyStyle: 	POJO
  roles: 	pattern14 	attributes 	links 	incommingLinks 	

- patternAttribute: 	Clazz
  attributes: 	handleAttrName 	commandParamName 	
  model: 	c
  modified: 	false
  name: 	PatternAttribute
  propertyStyle: 	POJO
  roles: 	object 	

- patternLink: 	Clazz
  attributes: 	handleLinkName 	
  model: 	c
  modified: 	false
  name: 	PatternLink
  propertyStyle: 	POJO
  roles: 	source 	target 	

- javaPackagesService: 	Clazz
  attributes: 	myPort 	reflectorMap 	currentSession 	executor 	spark 	sessionToAppMap 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f15 	f16 	f17 	f18 	f19 	f20 	
  model: 	c
  modified: 	false
  name: 	JavaPackagesService
  propertyStyle: 	POJO
  roles: 	modelEditor 	streams 	

- commandStream: 	Clazz
  attributes: 	name 	targetUrlList 	oldCommands 	activeCommands21 	
  importList: 	null 	null 	null 	null 	null 	null 	null 	null 	
  methods: 	f22 	f23 	f24 	f25 	f26 	f27 	
  model: 	c
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	POJO
  roles: 	service28 	

- addStreamCommand: 	Clazz
  attributes: 	incommingRoute 	outgoingUrl 	
  methods: 	f29 	
  model: 	c
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	POJO
  superClass: 	modelCommand

- javaPackagesApp: 	Clazz
  attributes: 	modelEditor30 	id31 	description 	
  methods: 	f32 	
  model: 	c
  modified: 	false
  name: 	JavaPackagesApp
  propertyStyle: 	POJO
  roles: 	content 	

- page: 	Clazz
  attributes: 	id33 	description34 	
  model: 	c
  modified: 	false
  name: 	Page
  propertyStyle: 	POJO
  roles: 	app 	content35 	

- line: 	Clazz
  attributes: 	id36 	description37 	action 	value 	
  model: 	c
  modified: 	false
  name: 	Line
  propertyStyle: 	POJO
  roles: 	page38 	

- javaPackage: 	Clazz
  attributes: 	id39 	
  model: 	c
  modified: 	false
  name: 	JavaPackage
  propertyStyle: 	POJO
  roles: 	subPackages 	up 	classes 	

- javaClass: 	Clazz
  attributes: 	id40 	
  model: 	c
  modified: 	false
  name: 	JavaClass
  propertyStyle: 	POJO
  roles: 	parent 	

- haveRoot: 	Clazz
  model: 	c
  modified: 	false
  name: 	HaveRoot
  propertyStyle: 	POJO
  superClass: 	modelCommand

- haveSubUnit: 	Clazz
  attributes: 	parent41 	
  model: 	c
  modified: 	false
  name: 	HaveSubUnit
  propertyStyle: 	POJO
  superClass: 	modelCommand

- haveLeaf: 	Clazz
  attributes: 	parent42 	
  model: 	c
  modified: 	false
  name: 	HaveLeaf
  propertyStyle: 	POJO
  superClass: 	modelCommand

- activeCommands: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- removeCommands: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	removeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, RemoveCommand>"

- commandListeners: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ArrayList<CommandStream>>"

- mapOfFrames: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfFrames
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Object>"

- mapOfModelObjects: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfModelObjects
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, Object>"

- isoDateFormat: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"new java.text.SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	POJO
  type: 	DateFormat

- lastTime: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	POJO
  type: 	String

- timeDelta: 	Attribute
  clazz: 	javaPackagesEditor
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	POJO
  type: 	long

- f: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public Object getOrCreate(Class clazz, String id)"
  methodBody: 	"      Object modelObject = mapOfModelObjects.get(id);
      if (modelObject != null) {
         return modelObject;
      }

      modelObject = getObjectFrame(clazz, id);

      mapOfFrames.remove(id);
      mapOfModelObjects.put(id, modelObject);

      return modelObject;
"
  modified: 	false

- f1: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public Object getObjectFrame(Class clazz, String id)"
  methodBody: 	"      try {
         Object modelObject = mapOfModelObjects.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = mapOfFrames.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = (Object) clazz.getConstructor().newInstance();
         Method setIdMethod = clazz.getMethod(\"setId\", String.class);
         setIdMethod.invoke(modelObject, id);
         mapOfFrames.put(id, modelObject);

         return modelObject;
      }
      catch (Exception e) {
         throw new RuntimeException(e);
      }
"
  modified: 	false

- f2: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public Object getModelObject(String id)"
  methodBody: 	"   return mapOfModelObjects.get(id);
"
  modified: 	false

- f3: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public Object removeModelObject(String id)"
  methodBody: 	"      Object oldObject = mapOfModelObjects.remove(id);

      if (oldObject != null) {
         mapOfFrames.put(id, oldObject);
      }

      return mapOfFrames.get(id);
"
  modified: 	false

- f4: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false

- f5: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false

- f6: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public JavaPackagesEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      ArrayList<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false

- f7: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      java.util.Map map = Yaml.forPackage(\"javaPackagesToJavaDoc.JavaPackages\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         execute(cmd);
      }
"
  modified: 	false

- f8: 	FMethod
  clazz: 	javaPackagesEditor
  declaration: 	"public void execute(ModelCommand command)"
  methodBody: 	"      String id = command.getId();
      if (id == null) {
         id = \"obj\" + activeCommands.size();
         command.setId(id);
      }

      String time = command.getTime();
      if (time == null) {
         time = getTime();
         command.setTime(time);
      }

      ModelCommand oldCommand = activeCommands.get(id);

      if (oldCommand != null && oldCommand.getTime().compareTo(time) >= 0) {
         // already updated
         return;
      }

      if (oldCommand != null && oldCommand instanceof RemoveCommand) {
         // object is dead, do not recreate
         return;
      }

      command.run(this);

      activeCommands.put(id, command);
"
  modified: 	false

- service: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaPackagesEditor
  modified: 	false
  name: 	service
  other: 	modelEditor
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id: 	Attribute
  clazz: 	modelCommand
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- time: 	Attribute
  clazz: 	modelCommand
  modified: 	false
  name: 	time
  propertyStyle: 	POJO
  type: 	String

- f9: 	FMethod
  clazz: 	modelCommand
  declaration: 	"public Object run(JavaPackagesEditor editor)"
  methodBody: 	"      Pattern pattern = havePattern();

      if (pattern == null) {
         return null;
      }

      // have handle objects
      for (PatternObject patternObject : pattern.getObjects()) {
         String handleObjectId = (String) getHandleObjectAttributeValue(patternObject, \"id\");
         Class handleObjectClass = patternObject.getHandleObjectClass();
         Object handleObject = null;
         if (patternObject.getKind() == \"core\") {
            handleObject = editor.getOrCreate(handleObjectClass, handleObjectId);
         }
         else {
            handleObject = editor.getObjectFrame(handleObjectClass, handleObjectId);
         }
         patternObject.setHandleObject(handleObject);
      }


      for (PatternObject patternObject : pattern.getObjects()) {
         Reflector commandReflector = new Reflector().setClassName(this.getClass().getName());
         Reflector handleObjectReflector = new Reflector().setClassName(patternObject.getHandleObject().getClass().getName());

         for (PatternAttribute patternAttribute : patternObject.getAttributes()) {
            if (\"id\".equals(patternAttribute.getHandleAttrName())) {
               continue;
            }

            Object paramValue = commandReflector.getValue(this, patternAttribute.getCommandParamName());
            paramValue = paramValue.toString();
            handleObjectReflector.setValue(patternObject.getHandleObject(), patternAttribute.getHandleAttrName(), paramValue, null);
         }

         Object sourceHandleObject = patternObject.getHandleObject();
         for (PatternLink patternLink : patternObject.getLinks()) {
            String linkName = patternLink.getHandleLinkName();
            Object targetHandleObject = patternLink.getTarget().getHandleObject();
            handleObjectReflector.setValue(sourceHandleObject, linkName, targetHandleObject, null);
         }
      }
      return null;
"
  modified: 	false

- f10: 	FMethod
  clazz: 	modelCommand
  declaration: 	"public void undo(JavaPackagesEditor editor)"
  methodBody: 	"      Pattern pattern = havePattern();

      if (pattern == null) {
         return;
      }

      for (PatternObject patternObject : pattern.getObjects()) {
         if (patternObject.getKind() == \"core\") {
            String id = (String) getHandleObjectAttributeValue(patternObject, \"id\");
            Object handleObject = editor.getObjectFrame(null, id);
            for (PatternLink link : patternObject.getLinks()) {
               String linkName = link.getHandleLinkName();
               Reflector handleObjectReflector = new Reflector().setClassName(handleObject.getClass().getName());
               Object value = handleObjectReflector.getValue(handleObject, linkName);
               if (value != null && value instanceof java.util.Collection) {
                  try {
                     java.lang.reflect.Method withoutMethod = handleObject.getClass().getMethod(\"without\" + linkName.substring(0, 1).toUpperCase() + linkName.substring(1), new Object[]{}.getClass());
                     withoutMethod.invoke(handleObject, value);
                  }
                  catch (Exception e) {
                     e.printStackTrace();
                  }
               }
               else {
                  try {
                     java.lang.reflect.Method setMethod = handleObject.getClass().getMethod(\"set\" + linkName.substring(0, 1).toUpperCase() + linkName.substring(1),
                           link.getTarget().getHandleObjectClass());
                     setMethod.invoke(handleObject, new Object[]{null});
                  }
                  catch (Exception e) {
                     e.printStackTrace();
                  }
               }
            }
         }
      }
"
  modified: 	false

- f11: 	FMethod
  clazz: 	modelCommand
  declaration: 	"public Pattern havePattern()"
  methodBody: 	"      return null;
"
  modified: 	false

- f12: 	FMethod
  clazz: 	modelCommand
  declaration: 	"public Object getHandleObjectAttributeValue(PatternObject patternObject, String handleAttributeName)"
  methodBody: 	"      Reflector reflector = new Reflector().setClassName(this.getClass().getName());
      for (PatternAttribute patternAttribute : patternObject.getAttributes()) {
         if (patternAttribute.getHandleAttrName().equals(handleAttributeName)) {
            String commandParamName = patternAttribute.getCommandParamName();
            Object value = reflector.getValue(this, commandParamName);
            return value;
         }
      }
      return null;
"
  modified: 	false

- f13: 	FMethod
  clazz: 	removeCommand
  declaration: 	"public Object run(JavaPackagesEditor editor)"
  methodBody: 	"      java.util.Map<String, Object> mapOfModelObjects = editor.getMapOfModelObjects();
      java.util.Map<String, Object> mapOfFrames = editor.getMapOfFrames();

      Object oldObject = mapOfModelObjects.remove(getId());

      if (oldObject != null) {
         mapOfFrames.put(getId(), oldObject);
      }

      // call undo on old command
      ModelCommand oldCommand = editor.getActiveCommands().get(getId());
      oldCommand.undo(editor);

      return null;
"
  modified: 	false

- objects: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	pattern
  modified: 	false
  name: 	objects
  other: 	pattern14
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- poId: 	Attribute
  clazz: 	patternObject
  modified: 	false
  name: 	poId
  propertyStyle: 	POJO
  type: 	String

- handleObjectClass: 	Attribute
  clazz: 	patternObject
  modified: 	false
  name: 	handleObjectClass
  propertyStyle: 	POJO
  type: 	Class

- handleObject: 	Attribute
  clazz: 	patternObject
  modified: 	false
  name: 	handleObject
  propertyStyle: 	POJO
  type: 	Object

- kind: 	Attribute
  clazz: 	patternObject
  modified: 	false
  name: 	kind
  propertyStyle: 	POJO
  type: 	String

- pattern14: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternObject
  modified: 	false
  name: 	pattern
  other: 	objects
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- attributes: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	patternObject
  modified: 	false
  name: 	attributes
  other: 	object
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- links: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	patternObject
  modified: 	false
  name: 	links
  other: 	source
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingLinks: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	patternObject
  modified: 	false
  name: 	incommingLinks
  other: 	target
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- handleAttrName: 	Attribute
  clazz: 	patternAttribute
  modified: 	false
  name: 	handleAttrName
  propertyStyle: 	POJO
  type: 	String

- commandParamName: 	Attribute
  clazz: 	patternAttribute
  modified: 	false
  name: 	commandParamName
  propertyStyle: 	POJO
  type: 	String

- object: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternAttribute
  modified: 	false
  name: 	object
  other: 	attributes
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- handleLinkName: 	Attribute
  clazz: 	patternLink
  modified: 	false
  name: 	handleLinkName
  propertyStyle: 	POJO
  type: 	String

- source: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternLink
  modified: 	false
  name: 	source
  other: 	links
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- target: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternLink
  modified: 	false
  name: 	target
  other: 	incommingLinks
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- myPort: 	Attribute
  clazz: 	javaPackagesService
  modified: 	false
  name: 	myPort
  propertyStyle: 	POJO
  type: 	int

- reflectorMap: 	Attribute
  clazz: 	javaPackagesService
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	POJO
  type: 	ReflectorMap

- currentSession: 	Attribute
  clazz: 	javaPackagesService
  modified: 	false
  name: 	currentSession
  propertyStyle: 	POJO
  type: 	String

- executor: 	Attribute
  clazz: 	javaPackagesService
  modified: 	false
  name: 	executor
  propertyStyle: 	POJO
  type: 	"ExecutorService "

- spark: 	Attribute
  clazz: 	javaPackagesService
  modified: 	false
  name: 	spark
  propertyStyle: 	POJO
  type: 	Service

- sessionToAppMap: 	Attribute
  clazz: 	javaPackagesService
  initialization: 	"new LinkedHashMap()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	POJO
  type: 	"LinkedHashMap<String, JavaPackagesApp>"

- f15: 	FMethod
  clazz: 	javaPackagesService
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new JavaPackagesEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/JavaPackages\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/JavaPackagescmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // there are no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"JavaPackages Service is listening on port \" + myPort);
"
  modified: 	false

- f16: 	FMethod
  clazz: 	javaPackagesService
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false

- f17: 	FMethod
  clazz: 	javaPackagesService
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         JavaPackagesApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new JavaPackagesApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String, String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         stringWriter.write(
               \"<html>\n\" +
                     \"<head>\n\" +
                     \"    <meta charset=\\"utf-8\\">\n\" +
                     \"    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\n\" +
                     \"\n\" +
                     \"    <link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\\">\n\" +
                     \"    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"></script>\n\" +
                     \"</head>\n\n\"
         );
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         stringWriter.write(\"\n</html>\n\");
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"JavaPackages\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false

- f18: 	FMethod
  clazz: 	javaPackagesService
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      JavaPackagesApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", JavaPackagesEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false

- f19: 	FMethod
  clazz: 	javaPackagesService
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false

- f20: 	FMethod
  clazz: 	javaPackagesService
  declaration: 	"public CommandStream getStream(String streamName)"
  methodBody: 	"      for (CommandStream stream : this.getStreams()) {
         if (stream.getName().equals(streamName)) {
            return stream;
         }
      }
      CommandStream newStream = new CommandStream().setName(streamName);
      newStream.setService(this);
      withStreams(newStream);
      newStream.start();
      return newStream;
"
  modified: 	false

- modelEditor: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaPackagesService
  modified: 	false
  name: 	modelEditor
  other: 	service
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- streams: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	javaPackagesService
  modified: 	false
  name: 	streams
  other: 	service28
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- name: 	Attribute
  clazz: 	commandStream
  modified: 	false
  name: 	name
  propertyStyle: 	POJO
  type: 	String

- targetUrlList: 	Attribute
  clazz: 	commandStream
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	targetUrlList
  propertyStyle: 	POJO
  type: 	"ArrayList<String>"

- oldCommands: 	Attribute
  clazz: 	commandStream
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	POJO
  type: 	"ArrayList<ModelCommand>"

- activeCommands21: 	Attribute
  clazz: 	commandStream
  initialization: 	"new java.util.LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	POJO
  type: 	"java.util.Map<String, ModelCommand>"

- f22: 	FMethod
  clazz: 	commandStream
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      String yaml = Yaml.encode(cmd);
      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false

- f23: 	FMethod
  clazz: 	commandStream
  declaration: 	"public void send()"
  methodBody: 	"      String yaml = Yaml.encode(activeCommands.values());
      for (String targetUrl : targetUrlList) {
         try {
            URL url = new URL(targetUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(\"POST\");
            con.setDoOutput(true);
            DataOutputStream out = new DataOutputStream(con.getOutputStream());
            out.writeBytes(yaml);
            out.flush();

            InputStream inputStream = con.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            BufferedReader in = new BufferedReader(inputStreamReader);
            String inputLine;
            StringBuffer content = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
               content.append(inputLine);
            }
            in.close();
            out.close();
            con.disconnect();

            // got an answer, clear active commands
            activeCommands.clear();
            LinkedHashMap<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName())
                  .decode(content.toString());
            executeCommands(map.values());

         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f24: 	FMethod
  clazz: 	commandStream
  declaration: 	"public void executeCommands(Collection values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false

- f25: 	FMethod
  clazz: 	commandStream
  declaration: 	"public CommandStream start()"
  methodBody: 	"      service.getSpark().post(\"/\" + name, (req, res) -> handlePostRequest(req, res));
      return this;
"
  modified: 	false

- f26: 	FMethod
  clazz: 	commandStream
  declaration: 	"public String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName())
            .decode(body);

      Collection values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false

- f27: 	FMethod
  clazz: 	commandStream
  declaration: 	"public void addCommandsToBeStreamed(String... commandList)"
  methodBody: 	"      for (String cmd : commandList) {
         service.getModelEditor().addCommandListener(cmd, this);
      }
"
  modified: 	false

- service28: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream
  modified: 	false
  name: 	service
  other: 	streams
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- incommingRoute: 	Attribute
  clazz: 	addStreamCommand
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	POJO
  type: 	String

- outgoingUrl: 	Attribute
  clazz: 	addStreamCommand
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	POJO
  type: 	String

- f29: 	FMethod
  clazz: 	addStreamCommand
  declaration: 	"public Object run(JavaPackagesEditor editor)"
  methodBody: 	"      CommandStream stream = editor.getService().getStream(incommingRoute);
      stream.getTargetUrlList().add(outgoingUrl);
      return null;
"
  modified: 	false

- modelEditor30: 	Attribute
  clazz: 	javaPackagesApp
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	POJO
  type: 	JavaPackagesEditor

- id31: 	Attribute
  clazz: 	javaPackagesApp
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description: 	Attribute
  clazz: 	javaPackagesApp
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- f32: 	FMethod
  clazz: 	javaPackagesApp
  declaration: 	"public JavaPackagesApp init(JavaPackagesEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"JavaPackages App\");
      return this;
"
  modified: 	false

- content: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaPackagesApp
  modified: 	false
  name: 	content
  other: 	app
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id33: 	Attribute
  clazz: 	page
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description34: 	Attribute
  clazz: 	page
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- app: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page
  modified: 	false
  name: 	app
  other: 	content
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- content35: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page
  modified: 	false
  name: 	content
  other: 	page38
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id36: 	Attribute
  clazz: 	line
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- description37: 	Attribute
  clazz: 	line
  modified: 	false
  name: 	description
  propertyStyle: 	POJO
  type: 	String

- action: 	Attribute
  clazz: 	line
  modified: 	false
  name: 	action
  propertyStyle: 	POJO
  type: 	String

- value: 	Attribute
  clazz: 	line
  modified: 	false
  name: 	value
  propertyStyle: 	POJO
  type: 	String

- page38: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line
  modified: 	false
  name: 	page
  other: 	content35
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id39: 	Attribute
  clazz: 	javaPackage
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- subPackages: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	javaPackage
  modified: 	false
  name: 	subPackages
  other: 	up
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- up: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaPackage
  modified: 	false
  name: 	up
  other: 	subPackages
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- classes: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	javaPackage
  modified: 	false
  name: 	classes
  other: 	parent
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- id40: 	Attribute
  clazz: 	javaClass
  modified: 	false
  name: 	id
  propertyStyle: 	POJO
  type: 	String

- parent: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaClass
  modified: 	false
  name: 	parent
  other: 	classes
  propertyStyle: 	POJO
  roleType: 	"java.util.ArrayList<%s>"

- parent41: 	Attribute
  clazz: 	haveSubUnit
  modified: 	false
  name: 	parent
  propertyStyle: 	POJO
  type: 	String

- parent42: 	Attribute
  clazz: 	haveLeaf
  modified: 	false
  name: 	parent
  propertyStyle: 	POJO
  type: 	String

