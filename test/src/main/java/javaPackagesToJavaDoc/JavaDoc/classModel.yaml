- c: 	ClassModel
  classes: 	javaDocEditor 	modelCommand 	removeCommand 	pattern 	patternObject 	patternAttribute 	patternLink 	javaDocService 	commandStream 	addStreamCommand 	javaDocApp 	page 	line 	folder 	docFile 	haveContent 	haveRoot 	haveSubUnit 	haveLeaf
  defaultCollectionType: 	c1
  defaultPropertyStyle: 	Bean
  defaultRoleType: 	"java.util.ArrayList<%s>"
  mainJavaDir: 	"src/main/java"
  packageName: 	javaPackagesToJavaDoc.JavaDoc
  packageSrcFolder: 	"src/main/java/javaPackagesToJavaDoc/JavaDoc"

- javaDocEditor: 	Clazz
  attributes: 	javaDocEditor_activeCommands 	javaDocEditor_commandListeners 	javaDocEditor_mapOfFrames 	javaDocEditor_mapOfModelObjects 	javaDocEditor_mapOfParsedObjects 	javaDocEditor_isoDateFormat 	javaDocEditor_lastTime 	javaDocEditor_timeDelta 	javaDocEditor_commandPrototypes
  importList: 	java.lang.reflect.Method 	java.text.DateFormat 	java.text.SimpleDateFormat 	java.util.Date 	java.util.List 	java.util.ArrayList 	org.fulib.yaml.Yaml 	"java.util.*" 	org.fulib.yaml.Reflector
  imports: 	java.lang.reflect.Method 	java.text.DateFormat 	java.text.SimpleDateFormat 	java.util.Date 	java.util.List 	java.util.ArrayList 	org.fulib.yaml.Yaml 	"java.util.*" 	org.fulib.yaml.Reflector
  methods: 	getOrCreate 	getObjectFrame 	getModelObject 	removeModelObject 	getTime 	fireCommandExecuted 	addCommandListener 	loadYaml 	execute 	parse 	findCommands 	getFromAllCommands 	equalsButTime 	haveCommandPrototypes
  model: 	c
  modified: 	false
  name: 	JavaDocEditor
  propertyStyle: 	Bean
  roles: 	javaDocEditor_service

- modelCommand: 	Clazz
  attributes: 	modelCommand_id 	modelCommand_time
  importList: 	org.fulib.yaml.Reflector 	org.fulib.yaml.StrUtil 	java.lang.reflect.Method 	org.fulib.tables.PathTable 	"java.util.*"
  imports: 	org.fulib.yaml.Reflector 	org.fulib.yaml.StrUtil 	java.lang.reflect.Method 	org.fulib.tables.PathTable 	"java.util.*"
  methods: 	run 	undo 	parse2 	matchAttributesAndLinks 	getSetOfTargetHandles 	havePattern 	getHandleObjectAttributeValue
  model: 	c
  modified: 	false
  name: 	ModelCommand
  propertyStyle: 	Bean
  subClasses: 	removeCommand 	addStreamCommand 	haveContent 	haveRoot 	haveSubUnit 	haveLeaf

- removeCommand: 	Clazz
  methods: 	run3
  model: 	c
  modified: 	false
  name: 	RemoveCommand
  propertyStyle: 	Bean
  superClass: 	modelCommand

- pattern: 	Clazz
  model: 	c
  modified: 	false
  name: 	Pattern
  propertyStyle: 	Bean
  roles: 	pattern_objects

- patternObject: 	Clazz
  attributes: 	patternObject_poId 	patternObject_handleObjectClass 	patternObject_handleObject 	patternObject_kind
  model: 	c
  modified: 	false
  name: 	PatternObject
  propertyStyle: 	Bean
  roles: 	patternObject_pattern 	patternObject_attributes 	patternObject_links 	patternObject_incommingLinks

- patternAttribute: 	Clazz
  attributes: 	patternAttribute_handleAttrName 	patternAttribute_commandParamName
  model: 	c
  modified: 	false
  name: 	PatternAttribute
  propertyStyle: 	Bean
  roles: 	patternAttribute_object

- patternLink: 	Clazz
  attributes: 	patternLink_handleLinkName 	patternLink_kind
  model: 	c
  modified: 	false
  name: 	PatternLink
  propertyStyle: 	Bean
  roles: 	patternLink_source 	patternLink_target

- javaDocService: 	Clazz
  attributes: 	javaDocService_myPort 	javaDocService_reflectorMap 	javaDocService_currentSession 	javaDocService_executor 	javaDocService_spark 	javaDocService_sessionToAppMap
  importList: 	java.util.Map 	java.util.LinkedHashMap 	spark.Service 	org.fulib.yaml.ReflectorMap 	java.util.concurrent.ExecutorService 	spark.Request 	spark.Response 	org.fulib.scenarios.MockupTools 	org.json.JSONObject 	org.fulib.yaml.Reflector 	java.lang.reflect.Method 	java.util.ArrayList 	java.net.URL 	java.net.HttpURLConnection 	java.io.DataOutputStream 	java.io.InputStream 	java.io.InputStreamReader 	java.io.BufferedReader
  imports: 	java.util.Map 	java.util.LinkedHashMap 	spark.Service 	org.fulib.yaml.ReflectorMap 	java.util.concurrent.ExecutorService 	spark.Request 	spark.Response 	org.fulib.scenarios.MockupTools 	org.json.JSONObject 	org.fulib.yaml.Reflector 	java.lang.reflect.Method 	java.util.ArrayList 	java.net.URL 	java.net.HttpURLConnection 	java.io.DataOutputStream 	java.io.InputStream 	java.io.InputStreamReader 	java.io.BufferedReader
  methods: 	start 	getFirstRoot 	root 	cmd 	connect 	getStream
  model: 	c
  modified: 	false
  name: 	JavaDocService
  propertyStyle: 	Bean
  roles: 	javaDocService_modelEditor 	javaDocService_streams

- commandStream: 	Clazz
  attributes: 	commandStream_name 	commandStream_targetUrlList 	commandStream_oldCommands 	commandStream_activeCommands
  importList: 	org.fulib.yaml.Yaml 	java.net.URL 	java.net.HttpURLConnection 	"java.io.*" 	"java.util.*" 	spark.Request 	spark.Response
  imports: 	org.fulib.yaml.Yaml 	java.net.URL 	java.net.HttpURLConnection 	"java.io.*" 	"java.util.*" 	spark.Request 	spark.Response
  methods: 	publish 	send 	executeCommands 	start4 	handlePostRequest
  model: 	c
  modified: 	false
  name: 	CommandStream
  propertyStyle: 	Bean
  roles: 	commandStream_service

- addStreamCommand: 	Clazz
  attributes: 	addStreamCommand_incommingRoute 	addStreamCommand_outgoingUrl
  methods: 	run5
  model: 	c
  modified: 	false
  name: 	AddStreamCommand
  propertyStyle: 	Bean
  superClass: 	modelCommand

- javaDocApp: 	Clazz
  attributes: 	javaDocApp_modelEditor 	javaDocApp_id 	javaDocApp_description
  methods: 	init
  model: 	c
  modified: 	false
  name: 	JavaDocApp
  propertyStyle: 	Bean
  roles: 	javaDocApp_content

- page: 	Clazz
  attributes: 	page_id 	page_description
  model: 	c
  modified: 	false
  name: 	Page
  propertyStyle: 	Bean
  roles: 	page_app 	page_content

- line: 	Clazz
  attributes: 	line_id 	line_description 	line_action 	line_value
  model: 	c
  modified: 	false
  name: 	Line
  propertyStyle: 	Bean
  roles: 	line_page

- folder: 	Clazz
  attributes: 	folder_id
  model: 	c
  modified: 	false
  name: 	Folder
  propertyStyle: 	Bean
  roles: 	folder_subFolders 	folder_up 	folder_files

- docFile: 	Clazz
  attributes: 	docFile_id 	docFile_version 	docFile_content
  model: 	c
  modified: 	false
  name: 	DocFile
  propertyStyle: 	Bean
  roles: 	docFile_up

- haveContent: 	Clazz
  attributes: 	haveContent_owner 	haveContent_content
  model: 	c
  modified: 	false
  name: 	HaveContent
  propertyStyle: 	Bean
  superClass: 	modelCommand

- haveRoot: 	Clazz
  model: 	c
  modified: 	false
  name: 	HaveRoot
  propertyStyle: 	Bean
  superClass: 	modelCommand

- haveSubUnit: 	Clazz
  attributes: 	haveSubUnit_parent
  model: 	c
  modified: 	false
  name: 	HaveSubUnit
  propertyStyle: 	Bean
  superClass: 	modelCommand

- haveLeaf: 	Clazz
  attributes: 	haveLeaf_parent 	haveLeaf_vTag
  model: 	c
  modified: 	false
  name: 	HaveLeaf
  propertyStyle: 	Bean
  superClass: 	modelCommand

- c1: 	CollectionType
  implClass: 	class java.util.ArrayList
  implTemplate: 	"java.util.ArrayList<%s>"
  itf: 	org.fulib.classmodel.CollectionInterface.List
  qualifiedImplName: 	java.util.ArrayList
  simpleImplName: 	ArrayList

- javaDocEditor_activeCommands: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_activeCommands
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	Bean
  type: 	"Map<String, ModelCommand>"
  typeSignature: 	"Map<String,ModelCommand>"

- javaDocEditor_commandListeners: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_commandListeners
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	commandListeners
  propertyStyle: 	Bean
  type: 	"Map<String, List<CommandStream>>"
  typeSignature: 	"Map<String,List<CommandStream>>"

- javaDocEditor_mapOfFrames: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_mapOfFrames
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfFrames
  propertyStyle: 	Bean
  type: 	"Map<String, Object>"
  typeSignature: 	"Map<String,Object>"

- javaDocEditor_mapOfModelObjects: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_mapOfModelObjects
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfModelObjects
  propertyStyle: 	Bean
  type: 	"Map<String, Object>"
  typeSignature: 	"Map<String,Object>"

- javaDocEditor_mapOfParsedObjects: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_mapOfParsedObjects
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	mapOfParsedObjects
  propertyStyle: 	Bean
  type: 	"Map<String, Object>"
  typeSignature: 	"Map<String,Object>"

- javaDocEditor_isoDateFormat: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_isoDateFormat
  initialization: 	"new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")"
  modified: 	false
  name: 	isoDateFormat
  propertyStyle: 	Bean
  type: 	DateFormat
  typeSignature: 	DateFormat

- javaDocEditor_lastTime: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_lastTime
  initialization: 	"isoDateFormat.format(new Date())"
  modified: 	false
  name: 	lastTime
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- javaDocEditor_timeDelta: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_timeDelta
  initialization: 	1
  modified: 	false
  name: 	timeDelta
  propertyStyle: 	Bean
  type: 	long
  typeSignature: 	long

- javaDocEditor_commandPrototypes: 	Attribute
  clazz: 	javaDocEditor
  id: 	JavaDocEditor_commandPrototypes
  modified: 	false
  name: 	commandPrototypes
  propertyStyle: 	Bean
  type: 	"List<ModelCommand>"
  typeSignature: 	"List<ModelCommand>"

- getOrCreate: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public Object getOrCreate(Class<?> clazz, String id)"
  methodBody: 	"      Object modelObject = mapOfParsedObjects.get(id);
      if (modelObject != null) {
         mapOfModelObjects.put(id, modelObject);
         return modelObject;
      }

      modelObject = mapOfModelObjects.get(id);
      if (modelObject != null) {
         return modelObject;
      }

      modelObject = getObjectFrame(clazz, id);

      mapOfFrames.remove(id);
      mapOfModelObjects.put(id, modelObject);

      return modelObject;
"
  modified: 	false
  modifiers: 	public
  name: 	getOrCreate
  paramsString: 	"Class<?> clazz, String id"
  returnType: 	Object
  signature: 	"class/JavaDocEditor/method/getOrCreate(Class<?>,String)"

- getObjectFrame: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public Object getObjectFrame(Class<?> clazz, String id)"
  methodBody: 	"      try {
         Object modelObject = mapOfParsedObjects.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = mapOfModelObjects.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = mapOfFrames.get(id);
         if (modelObject != null) {
            return modelObject;
         }

         modelObject = clazz.getConstructor().newInstance();
         Method setIdMethod = clazz.getMethod(\"setId\", String.class);
         setIdMethod.invoke(modelObject, id);
         mapOfFrames.put(id, modelObject);

         return modelObject;
      }
      catch (Exception e) {
         throw new RuntimeException(e);
      }
"
  modified: 	false
  modifiers: 	public
  name: 	getObjectFrame
  paramsString: 	"Class<?> clazz, String id"
  returnType: 	Object
  signature: 	"class/JavaDocEditor/method/getObjectFrame(Class<?>,String)"

- getModelObject: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public Object getModelObject(String id)"
  methodBody: 	"return mapOfModelObjects.get(id);
"
  modified: 	false
  modifiers: 	public
  name: 	getModelObject
  paramsString: 	"String id"
  returnType: 	Object
  signature: 	"class/JavaDocEditor/method/getModelObject(String)"

- removeModelObject: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public Object removeModelObject(String id)"
  methodBody: 	"      Object oldObject = mapOfModelObjects.remove(id);

      if (oldObject != null) {
         mapOfFrames.put(id, oldObject);
      }

      return mapOfFrames.get(id);
"
  modified: 	false
  modifiers: 	public
  name: 	removeModelObject
  paramsString: 	"String id"
  returnType: 	Object
  signature: 	"class/JavaDocEditor/method/removeModelObject(String)"

- getTime: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public String getTime()"
  methodBody: 	"      String newTime = isoDateFormat.format(new Date());
      if (newTime.compareTo(lastTime) <= 0) {
         try {
            Date lastDate = isoDateFormat.parse(lastTime);
            long millis = lastDate.getTime();
            millis += timeDelta;
            Date newDate = new Date(millis);
            newTime = isoDateFormat.format(newDate);
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      lastTime = newTime;
      return newTime;
"
  modified: 	false
  modifiers: 	public
  name: 	getTime
  paramsString: 	""
  returnType: 	String
  signature: 	"class/JavaDocEditor/method/getTime()"

- fireCommandExecuted: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public void fireCommandExecuted(ModelCommand command)"
  methodBody: 	"      String commandName = command.getClass().getSimpleName();
      List<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      for (CommandStream stream : listeners) {
         stream.publish(command);
      }
"
  modified: 	false
  modifiers: 	public
  name: 	fireCommandExecuted
  paramsString: 	"ModelCommand command"
  returnType: 	void
  signature: 	"class/JavaDocEditor/method/fireCommandExecuted(ModelCommand)"

- addCommandListener: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public JavaDocEditor addCommandListener(String commandName, CommandStream stream)"
  methodBody: 	"      List<CommandStream> listeners = commandListeners.computeIfAbsent(commandName, s -> new ArrayList<>());
      listeners.add(stream);
      return this;
"
  modified: 	false
  modifiers: 	public
  name: 	addCommandListener
  paramsString: 	"String commandName, CommandStream stream"
  returnType: 	JavaDocEditor
  signature: 	"class/JavaDocEditor/method/addCommandListener(String,CommandStream)"

- loadYaml: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public void loadYaml(String yamlString)"
  methodBody: 	"      Map<String, Object> map = Yaml.forPackage(\"javaPackagesToJavaDoc.JavaDoc\").decode(yamlString);
      for (Object value : map.values()) {
         ModelCommand cmd = (ModelCommand) value;
         execute(cmd);
      }
"
  modified: 	false
  modifiers: 	public
  name: 	loadYaml
  paramsString: 	"String yamlString"
  returnType: 	void
  signature: 	"class/JavaDocEditor/method/loadYaml(String)"

- execute: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public void execute(ModelCommand command)"
  methodBody: 	"      String id = command.getId();
      if (id == null) {
         id = \"obj\" + activeCommands.size();
         command.setId(id);
      }

      String time = command.getTime();
      if (time == null) {
         time = getTime();
         command.setTime(time);
      }

      ModelCommand oldCommand = activeCommands.get(id);

      if (oldCommand != null) {
         if (oldCommand.getTime().compareTo(time) > 0) {
            return;
         } else if (oldCommand.getTime().equals(time)) {
            String oldYaml = Yaml.encode(oldCommand);
            String newYaml = Yaml.encode(command);
            if (oldYaml.compareTo(newYaml) >= 0) {
               return;
            }
         }
      }

      command.run(this);

      activeCommands.put(id, command);
"
  modified: 	false
  modifiers: 	public
  name: 	execute
  paramsString: 	"ModelCommand command"
  returnType: 	void
  signature: 	"class/JavaDocEditor/method/execute(ModelCommand)"

- parse: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public void parse(Collection<?> allObjects)"
  methodBody: 	"      // register parsed objects
      mapOfParsedObjects.clear();
      for (Object parsedObject : allObjects) {
         Reflector reflector = new Reflector().setClazz(parsedObject.getClass());
         String id = (String) reflector.getValue(parsedObject, \"id\");
         if (id != null) {
            mapOfParsedObjects.put(id, parsedObject);
         }
      }

      List<ModelCommand> allCommandsFromParsing = new ArrayList<>();
      for (Object currentObject : allObjects) {
         findCommands(allCommandsFromParsing, currentObject);
      }

      // add parsed commands, if new
      for (ModelCommand commandFromParsing : allCommandsFromParsing) {
         String id = commandFromParsing.getId();
         ModelCommand oldCommand = activeCommands.get(id);
         if (oldCommand == null || ! equalsButTime(oldCommand, commandFromParsing)) {
            execute(commandFromParsing);
         }
      }
"
  modified: 	false
  modifiers: 	public
  name: 	parse
  paramsString: 	"Collection<?> allObjects"
  returnType: 	void
  signature: 	"class/JavaDocEditor/method/parse(Collection<?>)"

- findCommands: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"private ModelCommand findCommands(List<ModelCommand> allCommands, Object currentObject)"
  methodBody: 	"      List<ModelCommand> prototypes = haveCommandPrototypes();
      for (ModelCommand prototype : prototypes) {
         ModelCommand currentCommand = prototype.parse(currentObject);
         if (currentCommand != null) {
            allCommands.add(currentCommand);
         }
      }

      return null;
"
  modified: 	false
  modifiers: 	private
  name: 	findCommands
  paramsString: 	"List<ModelCommand> allCommands, Object currentObject"
  returnType: 	ModelCommand
  signature: 	"class/JavaDocEditor/method/findCommands(List<ModelCommand>,Object)"

- getFromAllCommands: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"private ModelCommand getFromAllCommands(List<ModelCommand> allCommands, String id)"
  methodBody: 	"      for (ModelCommand command : allCommands) {
         if (command.getId().equals(id)) {
            return command;
         }
      }
      return null;
"
  modified: 	false
  modifiers: 	private
  name: 	getFromAllCommands
  paramsString: 	"List<ModelCommand> allCommands, String id"
  returnType: 	ModelCommand
  signature: 	"class/JavaDocEditor/method/getFromAllCommands(List<ModelCommand>,String)"

- equalsButTime: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"public boolean equalsButTime(ModelCommand oldCommand, ModelCommand newCommand)"
  methodBody: 	"      if (oldCommand.getClass() != newCommand.getClass()) {
         return false;
      }

      Reflector reflector = new Reflector().setClazz(oldCommand.getClass());

      for (String property : reflector.getProperties()) {
         if (\"time\".equals(property)) {
            continue;
         }
         Object oldValue = reflector.getValue(oldCommand, property);
         Object newValue = reflector.getValue(newCommand, property);

         if ( ! Objects.equals(oldValue, newValue)) {
            return false;
         }
      }

      return true;
"
  modified: 	false
  modifiers: 	public
  name: 	equalsButTime
  paramsString: 	"ModelCommand oldCommand, ModelCommand newCommand"
  returnType: 	boolean
  signature: 	"class/JavaDocEditor/method/equalsButTime(ModelCommand,ModelCommand)"

- haveCommandPrototypes: 	FMethod
  annotations: 	""
  clazz: 	javaDocEditor
  declaration: 	"private List<ModelCommand> haveCommandPrototypes()"
  methodBody: 	"      if (commandPrototypes == null) {
         commandPrototypes = new ArrayList<>();
         commandPrototypes.add(new HaveContent());
         commandPrototypes.add(new HaveRoot());
         commandPrototypes.add(new HaveSubUnit());
         commandPrototypes.add(new HaveLeaf());
      }

      return commandPrototypes;
"
  modified: 	false
  modifiers: 	private
  name: 	haveCommandPrototypes
  paramsString: 	""
  returnType: 	"List<ModelCommand>"
  signature: 	"class/JavaDocEditor/method/haveCommandPrototypes()"

- javaDocEditor_service: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaDocEditor
  collectionType: 	c1
  id: 	JavaDocEditor_service
  modified: 	false
  name: 	service
  other: 	javaDocService_modelEditor
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- modelCommand_id: 	Attribute
  clazz: 	modelCommand
  id: 	ModelCommand_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- modelCommand_time: 	Attribute
  clazz: 	modelCommand
  id: 	ModelCommand_time
  modified: 	false
  name: 	time
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- run: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"public Object run(JavaDocEditor editor)"
  methodBody: 	"      Pattern pattern = havePattern();

      if (pattern == null) {
         return null;
      }

      // have handle objects
      for (PatternObject patternObject : pattern.getObjects()) {
         String handleObjectId = (String) getHandleObjectAttributeValue(patternObject, \"id\");
         if (handleObjectId == null) {
            // do not handle
            continue;
         }
         Class handleObjectClass = patternObject.getHandleObjectClass();
         Object handleObject = null;
         if (patternObject.getKind().equals(\"core\") ) {
            handleObject = editor.getOrCreate(handleObjectClass, handleObjectId);
         }
         else if (patternObject.getKind().equals(\"context\")) {
            handleObject = editor.getObjectFrame(handleObjectClass, handleObjectId);
         }
         else { // nac
            handleObject = editor.getObjectFrame(handleObjectClass, handleObjectId);
            editor.removeModelObject(handleObjectId);
         }

         patternObject.setHandleObject(handleObject);
      }

      for (PatternObject patternObject : pattern.getObjects()) {
         if (patternObject.getHandleObject() == null) {
            continue;
         }

         Reflector commandReflector = new Reflector().setClassName(this.getClass().getName());
         Reflector handleObjectReflector = new Reflector().setClassName(patternObject.getHandleObject().getClass().getName());

         for (PatternAttribute patternAttribute : patternObject.getAttributes()) {
            if (\"id\".equals(patternAttribute.getHandleAttrName())) {
               continue;
            }

            Object paramValue = commandReflector.getValue(this, patternAttribute.getCommandParamName());
            paramValue = paramValue.toString();
            handleObjectReflector.setValue(patternObject.getHandleObject(), patternAttribute.getHandleAttrName(), paramValue, null);
         }

         Object sourceHandleObject = patternObject.getHandleObject();
         for (PatternLink patternLink : patternObject.getLinks()) {
            String linkName = patternLink.getHandleLinkName();
            Object targetHandleObject = patternLink.getTarget().getHandleObject();
            if (patternLink.getKind().equals(\"core\")) {
               handleObjectReflector.setValue(sourceHandleObject, linkName, targetHandleObject, null);
            }
            else if (patternLink.getKind().equals(\"nac\")) {
               // remove link
               if (targetHandleObject != null) {
                  try {
                     Method withoutMethod = sourceHandleObject.getClass().getMethod(\"without\" + StrUtil.cap(linkName), new Object[0].getClass());
                     if (withoutMethod != null) {
                        withoutMethod.invoke(sourceHandleObject, new Object[] {new Object[] {targetHandleObject}});
                     }
                     else {
                        Method setMethod = sourceHandleObject.getClass().getMethod(\"set\" + StrUtil.cap(linkName), patternLink.getTarget().getHandleObjectClass());
                        setMethod.invoke(sourceHandleObject, new Object[] {null});
                     }
                  }
                  catch (Exception e) {
                     e.printStackTrace();
                  }
               }
               else {
                  try {
                     Method setMethod = sourceHandleObject.getClass().getMethod(\"set\" + StrUtil.cap(linkName), patternLink.getTarget().getHandleObjectClass());
                     setMethod.invoke(sourceHandleObject, new Object[] {null});
                  }
                  catch (Exception e) {
                     e.printStackTrace();
                  }
               }
            }
         }
      }
      return null;
"
  modified: 	false
  modifiers: 	public
  name: 	run
  paramsString: 	"JavaDocEditor editor"
  returnType: 	Object
  signature: 	"class/ModelCommand/method/run(JavaDocEditor)"

- undo: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"public void undo(JavaDocEditor editor)"
  methodBody: 	"      Pattern pattern = havePattern();

      if (pattern == null) {
         return;
      }

      for (PatternObject patternObject : pattern.getObjects()) {
         if (patternObject.getKind() == \"core\") {
            String id = (String) getHandleObjectAttributeValue(patternObject, \"id\");
            Object handleObject = editor.getObjectFrame(null, id);
            for (PatternLink link : patternObject.getLinks()) {
               String linkName = link.getHandleLinkName();
               Reflector handleObjectReflector = new Reflector().setClassName(handleObject.getClass().getName());
               Object value = handleObjectReflector.getValue(handleObject, linkName);
               if (value != null && value instanceof java.util.Collection) {
                  try {
                     if (((Collection) value).isEmpty()) {
                        continue;
                     }

                     java.lang.reflect.Method withoutMethod = handleObject.getClass().getMethod(\"without\" + linkName.substring(0, 1).toUpperCase() + linkName.substring(1), new Object[]{}.getClass());
                     Object[] valueArray = ((Collection)value).toArray();
                     withoutMethod.invoke(handleObject, new Object[] {valueArray});
                  }
                  catch (Exception e) {
                     e.printStackTrace();
                  }
               }
               else {
                  try {
                     java.lang.reflect.Method setMethod = handleObject.getClass().getMethod(\"set\" + linkName.substring(0, 1).toUpperCase() + linkName.substring(1),
                           link.getTarget().getHandleObjectClass());
                     setMethod.invoke(handleObject, new Object[]{null});
                  }
                  catch (Exception e) {
                     e.printStackTrace();
                  }
               }
            }
         }
      }
"
  modified: 	false
  modifiers: 	public
  name: 	undo
  paramsString: 	"JavaDocEditor editor"
  returnType: 	void
  signature: 	"class/ModelCommand/method/undo(JavaDocEditor)"

- parse2: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"public ModelCommand parse(Object currentObject)"
  methodBody: 	"      Pattern pattern = havePattern();

      if (pattern == null) {
         return null;
      }

      PatternObject firstPatternObject = pattern.getObjects().get(0);
      if ( ! firstPatternObject.getHandleObjectClass().equals(currentObject.getClass())) {
         // not my business
         return null;
      }

      PathTable pathTable = new PathTable(firstPatternObject.getPoId(), currentObject);

      matchAttributesAndLinks(pattern, firstPatternObject, pathTable);

      // retrieve command
      if (pathTable.rowCount() == 0) {
         return null;
      }

      Map<String,Object> firstRow = pathTable.convertRowToMap(pathTable.getTable().get(0));;
      ModelCommand newCommand = null;
      try {
         newCommand = this.getClass().getConstructor().newInstance();
         Reflector commandReflector = new Reflector().setClazz(newCommand.getClass());
         for (PatternObject patternObject : pattern.getObjects()) {
            String poId = patternObject.getPoId();
            for (PatternAttribute attribute : patternObject.getAttributes()) {
               String commandParamName = attribute.getCommandParamName();
               Object value = firstRow.get(poId + \".\" + attribute.getHandleAttrName());
               commandReflector.setValue(newCommand, commandParamName, \"\" + value);
            }
         }
      }
      catch (Exception e) {
         e.printStackTrace();
      }

      return newCommand;
"
  modified: 	false
  modifiers: 	public
  name: 	parse
  paramsString: 	"Object currentObject"
  returnType: 	ModelCommand
  signature: 	"class/ModelCommand/method/parse(Object)"

- matchAttributesAndLinks: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"public void matchAttributesAndLinks(Pattern pattern, PatternObject currentPatternObject, PathTable pathTable)"
  methodBody: 	"      // match attributes
      String poId = currentPatternObject.getPoId();

      for (PatternAttribute attribute : currentPatternObject.getAttributes()) {
         String attrName = attribute.getHandleAttrName();
         pathTable.expand(poId, attrName, poId + \".\" +attrName);
      }

      // match links
      for (PatternLink link : currentPatternObject.getLinks()) {
         PatternObject source = link.getSource();
         PatternObject target = link.getTarget();

         if (link.getKind().equals(\"core\")) {
            if (pathTable.getColumnIndex(target.getPoId()) >= 0) {
               pathTable.hasLink(source.getPoId(), link.getHandleLinkName(), target.getPoId());
            }
            else {
               pathTable.expand(source.getPoId(), link.getHandleLinkName(), link.getTarget().getPoId());
               matchAttributesAndLinks(pattern, target, pathTable);
            }
         }
         else if (link.getKind().equals(\"nac\")) {
            if (pathTable.getColumnIndex(target.getPoId()) >= 0) {
               pathTable.filterRows(map -> getSetOfTargetHandles((Map<String,Object>) map, poId, link.getHandleLinkName())
                     .contains(((Map<String,Object>) map).get(source.getPoId())));
            }
            else {
               pathTable.filterRows(map -> getSetOfTargetHandles((Map<String,Object>) map, poId, link.getHandleLinkName()).isEmpty());
            }
         }
      }
"
  modified: 	false
  modifiers: 	public
  name: 	matchAttributesAndLinks
  paramsString: 	"Pattern pattern, PatternObject currentPatternObject, PathTable pathTable"
  returnType: 	void
  signature: 	"class/ModelCommand/method/matchAttributesAndLinks(Pattern,PatternObject,PathTable)"

- getSetOfTargetHandles: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"public Set getSetOfTargetHandles(Map map, String poId, String linkName)"
  methodBody: 	"      Object sourceHandleObject = map.get(poId);
      PathTable pathTable = new PathTable(poId, sourceHandleObject);
      pathTable.expand(poId, linkName, linkName);

      return pathTable.toSet(linkName);
"
  modified: 	false
  modifiers: 	public
  name: 	getSetOfTargetHandles
  paramsString: 	"Map map, String poId, String linkName"
  returnType: 	Set
  signature: 	"class/ModelCommand/method/getSetOfTargetHandles(Map,String,String)"

- havePattern: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"public Pattern havePattern()"
  methodBody: 	"      return null;
"
  modified: 	false
  modifiers: 	public
  name: 	havePattern
  paramsString: 	""
  returnType: 	Pattern
  signature: 	"class/ModelCommand/method/havePattern()"

- getHandleObjectAttributeValue: 	FMethod
  annotations: 	""
  clazz: 	modelCommand
  declaration: 	"private Object getHandleObjectAttributeValue(PatternObject patternObject, String handleAttributeName)"
  methodBody: 	"      Reflector reflector = new Reflector().setClassName(this.getClass().getName());
      for (PatternAttribute patternAttribute : patternObject.getAttributes()) {
         if (patternAttribute.getHandleAttrName().equals(handleAttributeName)) {
            String commandParamName = patternAttribute.getCommandParamName();
            Object value = reflector.getValue(this, commandParamName);
            return value;
         }
      }
      return null;
"
  modified: 	false
  modifiers: 	private
  name: 	getHandleObjectAttributeValue
  paramsString: 	"PatternObject patternObject, String handleAttributeName"
  returnType: 	Object
  signature: 	"class/ModelCommand/method/getHandleObjectAttributeValue(PatternObject,String)"

- run3: 	FMethod
  annotations: 	"@Override"
  clazz: 	removeCommand
  declaration: 	"@Override
   public Object run(JavaDocEditor editor)"
  methodBody: 	"      editor.removeModelObject(getId());
      ModelCommand oldCommand = editor.getActiveCommands().get(getId());
      if (oldCommand != null) {
         oldCommand.undo(editor);
      }
      return null;
"
  modified: 	false
  modifiers: 	public
  name: 	run
  paramsString: 	"JavaDocEditor editor"
  returnType: 	Object
  signature: 	"class/RemoveCommand/method/run(JavaDocEditor)"

- pattern_objects: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	pattern
  collectionType: 	c1
  id: 	Pattern_objects
  modified: 	false
  name: 	objects
  other: 	patternObject_pattern
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternObject_poId: 	Attribute
  clazz: 	patternObject
  id: 	PatternObject_poId
  modified: 	false
  name: 	poId
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- patternObject_handleObjectClass: 	Attribute
  clazz: 	patternObject
  id: 	PatternObject_handleObjectClass
  modified: 	false
  name: 	handleObjectClass
  propertyStyle: 	Bean
  type: 	Class
  typeSignature: 	Class

- patternObject_handleObject: 	Attribute
  clazz: 	patternObject
  id: 	PatternObject_handleObject
  modified: 	false
  name: 	handleObject
  propertyStyle: 	Bean
  type: 	Object
  typeSignature: 	Object

- patternObject_kind: 	Attribute
  clazz: 	patternObject
  id: 	PatternObject_kind
  modified: 	false
  name: 	kind
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- patternObject_pattern: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternObject
  collectionType: 	c1
  id: 	PatternObject_pattern
  modified: 	false
  name: 	pattern
  other: 	pattern_objects
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternObject_attributes: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	patternObject
  collectionType: 	c1
  id: 	PatternObject_attributes
  modified: 	false
  name: 	attributes
  other: 	patternAttribute_object
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternObject_links: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	patternObject
  collectionType: 	c1
  id: 	PatternObject_links
  modified: 	false
  name: 	links
  other: 	patternLink_source
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternObject_incommingLinks: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	patternObject
  collectionType: 	c1
  id: 	PatternObject_incommingLinks
  modified: 	false
  name: 	incommingLinks
  other: 	patternLink_target
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternAttribute_handleAttrName: 	Attribute
  clazz: 	patternAttribute
  id: 	PatternAttribute_handleAttrName
  modified: 	false
  name: 	handleAttrName
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- patternAttribute_commandParamName: 	Attribute
  clazz: 	patternAttribute
  id: 	PatternAttribute_commandParamName
  modified: 	false
  name: 	commandParamName
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- patternAttribute_object: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternAttribute
  collectionType: 	c1
  id: 	PatternAttribute_object
  modified: 	false
  name: 	object
  other: 	patternObject_attributes
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternLink_handleLinkName: 	Attribute
  clazz: 	patternLink
  id: 	PatternLink_handleLinkName
  modified: 	false
  name: 	handleLinkName
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- patternLink_kind: 	Attribute
  clazz: 	patternLink
  id: 	PatternLink_kind
  initialization: 	"\"core\""
  modified: 	false
  name: 	kind
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- patternLink_source: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternLink
  collectionType: 	c1
  id: 	PatternLink_source
  modified: 	false
  name: 	source
  other: 	patternObject_links
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- patternLink_target: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	patternLink
  collectionType: 	c1
  id: 	PatternLink_target
  modified: 	false
  name: 	target
  other: 	patternObject_incommingLinks
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- javaDocService_myPort: 	Attribute
  clazz: 	javaDocService
  id: 	JavaDocService_myPort
  modified: 	false
  name: 	myPort
  propertyStyle: 	Bean
  type: 	int
  typeSignature: 	int

- javaDocService_reflectorMap: 	Attribute
  clazz: 	javaDocService
  id: 	JavaDocService_reflectorMap
  modified: 	false
  name: 	reflectorMap
  propertyStyle: 	Bean
  type: 	ReflectorMap
  typeSignature: 	ReflectorMap

- javaDocService_currentSession: 	Attribute
  clazz: 	javaDocService
  id: 	JavaDocService_currentSession
  modified: 	false
  name: 	currentSession
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- javaDocService_executor: 	Attribute
  clazz: 	javaDocService
  id: 	JavaDocService_executor
  modified: 	false
  name: 	executor
  propertyStyle: 	Bean
  type: 	ExecutorService
  typeSignature: 	ExecutorService

- javaDocService_spark: 	Attribute
  clazz: 	javaDocService
  id: 	JavaDocService_spark
  modified: 	false
  name: 	spark
  propertyStyle: 	Bean
  type: 	Service
  typeSignature: 	Service

- javaDocService_sessionToAppMap: 	Attribute
  clazz: 	javaDocService
  id: 	JavaDocService_sessionToAppMap
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	sessionToAppMap
  propertyStyle: 	Bean
  type: 	"Map<String, JavaDocApp>"
  typeSignature: 	"Map<String,JavaDocApp>"

- start: 	FMethod
  annotations: 	""
  clazz: 	javaDocService
  declaration: 	"public void start()"
  methodBody: 	"      if (myPort <= 0) {
         myPort = 4571;
      }
      String envPort = System.getenv(\"PORT\");
      if (envPort != null) {
         myPort = Integer.parseInt(envPort);
      }
      executor = java.util.concurrent.Executors.newSingleThreadExecutor();
      setModelEditor(new JavaDocEditor());
      reflectorMap = new ReflectorMap(this.getClass().getPackage().getName());
      spark = Service.ignite();
      try { spark.port(myPort);} catch (Exception e) {};
      spark.get(\"/\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.get(\"/JavaDoc\", (req, res) -> executor.submit( () -> this.getFirstRoot(req, res)).get());
      spark.post(\"/cmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/JavaDoccmd\", (req, res) -> executor.submit( () -> this.cmd(req, res)).get());
      spark.post(\"/connect\", (req, res) -> executor.submit( () -> this.connect(req, res)).get());
      // there are no streams

      spark.notFound((req, resp) -> {
         return \"404 not found: \" + req.requestMethod() + req.url() + req.body();
      });

      java.util.logging.Logger.getGlobal().info(\"JavaDoc Service is listening on port \" + myPort);
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	void
  signature: 	"class/JavaDocService/method/start()"

- getFirstRoot: 	FMethod
  annotations: 	""
  clazz: 	javaDocService
  declaration: 	"public String getFirstRoot(Request req, Response res)"
  methodBody: 	"      currentSession = \"\" + (sessionToAppMap.size() + 1);
      return root(req, res);
"
  modified: 	false
  modifiers: 	public
  name: 	getFirstRoot
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/JavaDocService/method/getFirstRoot(Request,Response)"

- root: 	FMethod
  annotations: 	""
  clazz: 	javaDocService
  declaration: 	"public String root(Request req, Response res)"
  methodBody: 	"      try
      {
         JavaDocApp myApp = this.sessionToAppMap.get(currentSession);
         if (myApp == null) {
            myApp = new JavaDocApp().init(this.modelEditor);
            sessionToAppMap.put(currentSession, myApp);
         }

         java.util.Map<String,String> params = req.params();
         java.io.StringWriter stringWriter = new java.io.StringWriter();
         stringWriter.write(
               \"<html>\n\" +
                     \"<head>\n\" +
                     \"    <meta charset=\\"utf-8\\">\n\" +
                     \"    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\n\" +
                     \"\n\" +
                     \"    <link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\\">\n\" +
                     \"    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"></script>\n\" +
                     \"</head>\n\n\"
         );
         MockupTools.htmlTool().dumpScreen(stringWriter, myApp);
         stringWriter.write(\"\n</html>\n\");
         StringBuilder page = new StringBuilder(stringWriter.toString());
         int paramPos = page.indexOf(\"_cmd: words[0],\");
         String sessionParam = String.format(\"_session: '%s', \", currentSession);
         page.insert(paramPos, sessionParam);
         int cmdUrlPos = page.indexOf(\"'/cmd'\");
         page.insert(cmdUrlPos + 2, \"JavaDoc\");
         String sessionPage = page.toString();
         return sessionPage;
      }
      catch (Exception e)
      {
         e.printStackTrace();
         return \"404 \" + e.getMessage();
      }
"
  modified: 	false
  modifiers: 	public
  name: 	root
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/JavaDocService/method/root(Request,Response)"

- cmd: 	FMethod
  annotations: 	""
  clazz: 	javaDocService
  declaration: 	"public String cmd(Request req, Response res)"
  methodBody: 	"      String cmd = req.body();
      JSONObject jsonObject = new JSONObject(cmd);

      this.currentSession = jsonObject.getString(\"_session\");

      JavaDocApp app = sessionToAppMap.get(currentSession);

      if (app == null) {
         return \"404 could not find session \" + currentSession;
      }

      String cmdClassName = jsonObject.getString(\"_cmd\");
      String[] split = new String[0];
      if (cmdClassName.indexOf('?') > 0) {
         split = cmdClassName.split(\"\\?\");
         cmdClassName = split[0];
         jsonObject.put(\"_cmd\", cmdClassName);
         String params = split[1];
         String[] paramArray = params.split(\"\\&\");
         for (String oneParam : paramArray) {
            String[] keyValue = oneParam.split(\"\\=\");
            jsonObject.put(keyValue[0], keyValue[1]);
         }
      }

      if (jsonObject.keySet().size() > 3) {
         cmdClassName = jsonObject.getString(\"_cmd\");
         Reflector reflector = reflectorMap.getReflector(cmdClassName);
         Object cmdObject = reflector.newInstance();
         reflector.setValue(cmdObject, \"_app\", app, null);
         for (String key : jsonObject.keySet()) {
            if (key.startsWith(\"_\")) {
               continue;
            }
            else {
               // assign to command attribute
               String attrName = key;
               if (key.endsWith(\"In\")) {
                  attrName = key.substring(0, key.length() - 2);
               }
               String value = jsonObject.getString(key);
               reflector.setValue(cmdObject, attrName, value, null);
            }
         }
         // call command
         try {
            Method runMethod = cmdObject.getClass().getMethod(\"run\", JavaDocEditor.class);
            runMethod.invoke(cmdObject, modelEditor);

         }
         catch (Exception e) {
            e.printStackTrace();
            return \"404 \" + e.getMessage();
         }
      }

      // next page
      String newPage = jsonObject.getString(\"_newPage\");
      try {
         Method method = app.getClass().getMethod(newPage, new Class[0]);
         method.invoke(app);
      }
      catch (Exception e) {
         return \"404 app has no method to compute page \" + newPage+ \"\n\" + e.getMessage();
      }

      return root(req, res);
"
  modified: 	false
  modifiers: 	public
  name: 	cmd
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/JavaDocService/method/cmd(Request,Response)"

- connect: 	FMethod
  annotations: 	""
  clazz: 	javaDocService
  declaration: 	"public String connect(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      LinkedHashMap<String,Object> cmdList = org.fulib.yaml.Yaml.forPackage(AddStreamCommand.class.getPackage().getName()).decode(body);
      for (Object value : cmdList.values()) {
         ModelCommand cmd = (ModelCommand) value;
         cmd.run(modelEditor);
      }
      return \"200\";
"
  modified: 	false
  modifiers: 	public
  name: 	connect
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/JavaDocService/method/connect(Request,Response)"

- getStream: 	FMethod
  annotations: 	""
  clazz: 	javaDocService
  declaration: 	"public CommandStream getStream(String streamName)"
  methodBody: 	"      for (CommandStream stream : this.getStreams()) {
         if (stream.getName().equals(streamName)) {
            return stream;
         }
      }
      CommandStream newStream = new CommandStream().setName(streamName);
      newStream.setService(this);
      withStreams(newStream);
      newStream.start();
      return newStream;
"
  modified: 	false
  modifiers: 	public
  name: 	getStream
  paramsString: 	"String streamName"
  returnType: 	CommandStream
  signature: 	"class/JavaDocService/method/getStream(String)"

- javaDocService_modelEditor: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaDocService
  collectionType: 	c1
  id: 	JavaDocService_modelEditor
  modified: 	false
  name: 	modelEditor
  other: 	javaDocEditor_service
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- javaDocService_streams: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	javaDocService
  collectionType: 	c1
  id: 	JavaDocService_streams
  modified: 	false
  name: 	streams
  other: 	commandStream_service
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- commandStream_name: 	Attribute
  clazz: 	commandStream
  id: 	CommandStream_name
  modified: 	false
  name: 	name
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- commandStream_targetUrlList: 	Attribute
  clazz: 	commandStream
  id: 	CommandStream_targetUrlList
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	targetUrlList
  propertyStyle: 	Bean
  type: 	"List<String>"
  typeSignature: 	"List<String>"

- commandStream_oldCommands: 	Attribute
  clazz: 	commandStream
  id: 	CommandStream_oldCommands
  initialization: 	"new ArrayList<>()"
  modified: 	false
  name: 	oldCommands
  propertyStyle: 	Bean
  type: 	"List<ModelCommand>"
  typeSignature: 	"List<ModelCommand>"

- commandStream_activeCommands: 	Attribute
  clazz: 	commandStream
  id: 	CommandStream_activeCommands
  initialization: 	"new LinkedHashMap<>()"
  modified: 	false
  name: 	activeCommands
  propertyStyle: 	Bean
  type: 	"Map<String, ModelCommand>"
  typeSignature: 	"Map<String,ModelCommand>"

- publish: 	FMethod
  annotations: 	""
  clazz: 	commandStream
  declaration: 	"public void publish(ModelCommand cmd)"
  methodBody: 	"      activeCommands.put(cmd.getId(), cmd);
      oldCommands.add(cmd);
      send();
"
  modified: 	false
  modifiers: 	public
  name: 	publish
  paramsString: 	"ModelCommand cmd"
  returnType: 	void
  signature: 	"class/CommandStream/method/publish(ModelCommand)"

- send: 	FMethod
  annotations: 	""
  clazz: 	commandStream
  declaration: 	"public void send()"
  methodBody: 	"      String yaml = Yaml.encode(activeCommands.values());
      for (String targetUrl : targetUrlList) {
         try {
            URL url = new URL(targetUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod(\"POST\");
            con.setDoOutput(true);
            DataOutputStream out = new DataOutputStream(con.getOutputStream());
            out.writeBytes(yaml);
            out.flush();

            InputStream inputStream = con.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            BufferedReader in = new BufferedReader(inputStreamReader);
            String inputLine;
            StringBuilder content = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
               content.append(inputLine);
            }
            in.close();
            out.close();
            con.disconnect();

            // got an answer, clear active commands
            activeCommands.clear();
            Map<String, Object> map = Yaml.forPackage(service.getClass().getPackage().getName()).decode(content.toString());
            executeCommands(map.values());

         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false
  modifiers: 	public
  name: 	send
  paramsString: 	""
  returnType: 	void
  signature: 	"class/CommandStream/method/send()"

- executeCommands: 	FMethod
  annotations: 	""
  clazz: 	commandStream
  declaration: 	"public void executeCommands(Collection<?> values)"
  methodBody: 	"      for (Object value : values) {
         try {
            ModelCommand cmd = (ModelCommand) value;
            this.service.getExecutor().submit(() -> cmd.run(this.service.getModelEditor()));
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
"
  modified: 	false
  modifiers: 	public
  name: 	executeCommands
  paramsString: 	"Collection<?> values"
  returnType: 	void
  signature: 	"class/CommandStream/method/executeCommands(Collection<?>)"

- start4: 	FMethod
  annotations: 	""
  clazz: 	commandStream
  declaration: 	"public CommandStream start()"
  methodBody: 	"      service.getSpark().post(\"/\" + name, this::handlePostRequest);
      return this;
"
  modified: 	false
  modifiers: 	public
  name: 	start
  paramsString: 	""
  returnType: 	CommandStream
  signature: 	"class/CommandStream/method/start()"

- handlePostRequest: 	FMethod
  annotations: 	""
  clazz: 	commandStream
  declaration: 	"private String handlePostRequest(Request req, Response res)"
  methodBody: 	"      String body = req.body();
      Map<String, Object> commandMap = Yaml.forPackage(this.getClass().getPackage().getName()).decode(body);

      Collection<Object> values = commandMap.values();
      executeCommands(values);

      return \"OK\";
"
  modified: 	false
  modifiers: 	private
  name: 	handlePostRequest
  paramsString: 	"Request req, Response res"
  returnType: 	String
  signature: 	"class/CommandStream/method/handlePostRequest(Request,Response)"

- commandStream_service: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	commandStream
  collectionType: 	c1
  id: 	CommandStream_service
  modified: 	false
  name: 	service
  other: 	javaDocService_streams
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- addStreamCommand_incommingRoute: 	Attribute
  clazz: 	addStreamCommand
  id: 	AddStreamCommand_incommingRoute
  modified: 	false
  name: 	incommingRoute
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- addStreamCommand_outgoingUrl: 	Attribute
  clazz: 	addStreamCommand
  id: 	AddStreamCommand_outgoingUrl
  modified: 	false
  name: 	outgoingUrl
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- run5: 	FMethod
  annotations: 	"@Override"
  clazz: 	addStreamCommand
  declaration: 	"@Override
   public Object run(JavaDocEditor editor)"
  methodBody: 	"      CommandStream stream = editor.getService().getStream(incommingRoute);
      stream.getTargetUrlList().add(outgoingUrl);
      return null;
"
  modified: 	false
  modifiers: 	public
  name: 	run
  paramsString: 	"JavaDocEditor editor"
  returnType: 	Object
  signature: 	"class/AddStreamCommand/method/run(JavaDocEditor)"

- javaDocApp_modelEditor: 	Attribute
  clazz: 	javaDocApp
  id: 	JavaDocApp_modelEditor
  modified: 	false
  name: 	modelEditor
  propertyStyle: 	Bean
  type: 	JavaDocEditor
  typeSignature: 	JavaDocEditor

- javaDocApp_id: 	Attribute
  clazz: 	javaDocApp
  id: 	JavaDocApp_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- javaDocApp_description: 	Attribute
  clazz: 	javaDocApp
  id: 	JavaDocApp_description
  modified: 	false
  name: 	description
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- init: 	FMethod
  annotations: 	""
  clazz: 	javaDocApp
  declaration: 	"public JavaDocApp init(JavaDocEditor editor)"
  methodBody: 	"      this.modelEditor = editor;
      this.setId(\"root\");
      this.setDescription(\"JavaDoc App\");
      return this;
"
  modified: 	false
  modifiers: 	public
  name: 	init
  paramsString: 	"JavaDocEditor editor"
  returnType: 	JavaDocApp
  signature: 	"class/JavaDocApp/method/init(JavaDocEditor)"

- javaDocApp_content: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	javaDocApp
  collectionType: 	c1
  id: 	JavaDocApp_content
  modified: 	false
  name: 	content
  other: 	page_app
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- page_id: 	Attribute
  clazz: 	page
  id: 	Page_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- page_description: 	Attribute
  clazz: 	page
  id: 	Page_description
  modified: 	false
  name: 	description
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- page_app: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	page
  collectionType: 	c1
  id: 	Page_app
  modified: 	false
  name: 	app
  other: 	javaDocApp_content
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- page_content: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	page
  collectionType: 	c1
  id: 	Page_content
  modified: 	false
  name: 	content
  other: 	line_page
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- line_id: 	Attribute
  clazz: 	line
  id: 	Line_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- line_description: 	Attribute
  clazz: 	line
  id: 	Line_description
  modified: 	false
  name: 	description
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- line_action: 	Attribute
  clazz: 	line
  id: 	Line_action
  modified: 	false
  name: 	action
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- line_value: 	Attribute
  clazz: 	line
  id: 	Line_value
  modified: 	false
  name: 	value
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- line_page: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	line
  collectionType: 	c1
  id: 	Line_page
  modified: 	false
  name: 	page
  other: 	page_content
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- folder_id: 	Attribute
  clazz: 	folder
  id: 	Folder_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- folder_subFolders: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	folder
  collectionType: 	c1
  id: 	Folder_subFolders
  modified: 	false
  name: 	subFolders
  other: 	folder_up
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- folder_up: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	folder
  collectionType: 	c1
  id: 	Folder_up
  modified: 	false
  name: 	up
  other: 	folder_subFolders
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- folder_files: 	AssocRole
  aggregation: 	false
  cardinality: 	42
  clazz: 	folder
  collectionType: 	c1
  id: 	Folder_files
  modified: 	false
  name: 	files
  other: 	docFile_up
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- docFile_id: 	Attribute
  clazz: 	docFile
  id: 	DocFile_id
  modified: 	false
  name: 	id
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- docFile_version: 	Attribute
  clazz: 	docFile
  id: 	DocFile_version
  modified: 	false
  name: 	version
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- docFile_content: 	Attribute
  clazz: 	docFile
  id: 	DocFile_content
  modified: 	false
  name: 	content
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- docFile_up: 	AssocRole
  aggregation: 	false
  cardinality: 	1
  clazz: 	docFile
  collectionType: 	c1
  id: 	DocFile_up
  modified: 	false
  name: 	up
  other: 	folder_files
  propertyStyle: 	Bean
  roleType: 	"java.util.ArrayList<%s>"

- haveContent_owner: 	Attribute
  clazz: 	haveContent
  id: 	HaveContent_owner
  modified: 	false
  name: 	owner
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- haveContent_content: 	Attribute
  clazz: 	haveContent
  id: 	HaveContent_content
  modified: 	false
  name: 	content
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- haveSubUnit_parent: 	Attribute
  clazz: 	haveSubUnit
  id: 	HaveSubUnit_parent
  modified: 	false
  name: 	parent
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- haveLeaf_parent: 	Attribute
  clazz: 	haveLeaf
  id: 	HaveLeaf_parent
  modified: 	false
  name: 	parent
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

- haveLeaf_vTag: 	Attribute
  clazz: 	haveLeaf
  id: 	HaveLeaf_vTag
  modified: 	false
  name: 	vTag
  propertyStyle: 	Bean
  type: 	String
  typeSignature: 	String

